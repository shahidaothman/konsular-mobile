var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Stripe = /** @class */ (function (_super) {
    __extends(Stripe, _super);
    function Stripe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Stripe.prototype.setPublishableKey = function (publishableKey) { return cordova(this, "setPublishableKey", {}, arguments); };
    Stripe.prototype.createCardToken = function (params) { return cordova(this, "createCardToken", {}, arguments); };
    Stripe.prototype.createBankAccountToken = function (params) { return cordova(this, "createBankAccountToken", {}, arguments); };
    Stripe.prototype.validateCardNumber = function (cardNumber) { return cordova(this, "validateCardNumber", {}, arguments); };
    Stripe.prototype.validateCVC = function (cvc) { return cordova(this, "validateCVC", {}, arguments); };
    Stripe.prototype.validateExpiryDate = function (expMonth, expYear) { return cordova(this, "validateExpiryDate", {}, arguments); };
    Stripe.prototype.getCardType = function (cardNumber) { return cordova(this, "getCardType", {}, arguments); };
    Stripe.pluginName = "Stripe";
    Stripe.plugin = "cordova-plugin-stripe";
    Stripe.pluginRef = "cordova.plugins.stripe";
    Stripe.repo = "https://github.com/zyramedia/cordova-plugin-stripe";
    Stripe.platforms = ["Android", "Browser", "iOS"];
    Stripe = __decorate([
        Injectable()
    ], Stripe);
    return Stripe;
}(IonicNativePlugin));
export { Stripe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3N0cmlwZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFnSjVDLDBCQUFpQjs7OztJQVEzQyxrQ0FBaUIsYUFBQyxjQUFzQjtJQVV4QyxnQ0FBZSxhQUFDLE1BQTZCO0lBVTdDLHVDQUFzQixhQUFDLE1BQStCO0lBVXRELG1DQUFrQixhQUFDLFVBQWtCO0lBVXJDLDRCQUFXLGFBQUMsR0FBVztJQVd2QixtQ0FBa0IsYUFBQyxRQUFnQixFQUFFLE9BQWU7SUFVcEQsNEJBQVcsYUFBQyxVQUFrQjs7Ozs7O0lBckVuQixNQUFNO1FBRGxCLFVBQVUsRUFBRTtPQUNBLE1BQU07aUJBakpuQjtFQWlKNEIsaUJBQWlCO1NBQWhDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBTdHJpcGVDYXJkVG9rZW5QYXJhbXMge1xuICAvKipcbiAgICogQ2FyZCBudW1iZXJcbiAgICovXG4gIG51bWJlcjogc3RyaW5nO1xuICAvKipcbiAgICogRXhwaXJ5IG1vbnRoXG4gICAqL1xuICBleHBNb250aDogbnVtYmVyO1xuICAvKipcbiAgICogRXhwaXJ5IHllYXJcbiAgICovXG4gIGV4cFllYXI6IG51bWJlcjtcbiAgLyoqXG4gICAqIENWQyAvIENWVlxuICAgKi9cbiAgY3ZjPzogc3RyaW5nO1xuICAvKipcbiAgICogQ2FyZGhvbGRlciBuYW1lXG4gICAqL1xuICBuYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogQWRkcmVzcyBsaW5lIDFcbiAgICovXG4gIGFkZHJlc3NfbGluZTE/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBZGRyZXNzIGxpbmUgMlxuICAgKi9cbiAgYWRkcmVzc19saW5lMj86IHN0cmluZztcbiAgLyoqXG4gICAqIENpdHlcbiAgICovXG4gIGFkZHJlc3NfY2l0eT86IHN0cmluZztcbiAgLyoqXG4gICAqIFN0YXRlIC8gUHJvdmluY2VcbiAgICovXG4gIGFkZHJlc3Nfc3RhdGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDb3VudHJ5XG4gICAqL1xuICBhZGRyZXNzX2NvdW50cnk/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBQb3N0YWwgY29kZSAvIFpJUCBDb2RlXG4gICAqL1xuICBwb3N0YWxDb2RlPzogc3RyaW5nO1xuICAvKipcbiAgICogMy1sZXR0ZXIgSVNPIGNvZGUgZm9yIGN1cnJlbmN5XG4gICAqL1xuICBjdXJyZW5jeT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdHJpcGVCYW5rQWNjb3VudFBhcmFtcyB7XG4gIC8qKlxuICAgKiBSb3V0aW5nIG51bWJlci5cbiAgICovXG4gIHJvdXRpbmdfbnVtYmVyOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBY2NvdW50IG51bWJlci5cbiAgICovXG4gIGFjY291bnRfbnVtYmVyOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDdXJyZW5jeSBjb2RlLiBFeGFtcGxlOiBgVVNEYC5cbiAgICovXG4gIGN1cnJlbmN5OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDb3VudHJ5IGNvZGUuIEV4YW1wbGU6IGBVU2AuXG4gICAqL1xuICBjb3VudHJ5OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBY2NvdW50IGhvbGRlciBuYW1lLlxuICAgKi9cbiAgYWNjb3VudF9ob2xkZXJfbmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFjY291bnQgaG9sZGVyIHR5cGUuIFRoaXMgY2FuIGJlIGBpbmRpdmlkdWFsYCBvciBgY29tcGFueWAuXG4gICAqL1xuICBhY2NvdW50X2hvbGRlcl90eXBlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmlwZUNhcmRUb2tlblJlcyB7XG4gIC8qKlxuICAgKiBDYXJkIE9iamVjdC5cbiAgICovXG4gIGNhcmQ6IHtcbiAgICBicmFuZDogc3RyaW5nLFxuICAgIGV4cF9tb250aDogbnVtYmVyLFxuICAgIGV4cF95ZWFyOiBudW1iZXIsXG4gICAgZnVuZGluZzogc3RyaW5nLFxuICAgIGxhc3Q0OiBzdHJpbmdcbiAgfTtcbiAgLyoqXG4gICAqIFRva2VuIFJlcXVlc3QgRGF0ZSBUaW1lLlxuICAgKi9cbiAgY3JlYXRlZDogc3RyaW5nO1xuICAvKipcbiAgICogQ2FyZCBUb2tlbi5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTb3VyY2UgVHlwZSAoY2FyZCBvciBhY2NvdW50KS5cbiAgICovXG4gIHR5cGU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBTdHJpcGVcbiAqIEBkZXNjcmlwdGlvblxuICogQSBwbHVnaW4gdGhhdCBhbGxvd3MgeW91IHRvIHVzZSBTdHJpcGUncyBOYXRpdmUgU0RLcyBmb3IgQW5kcm9pZCBhbmQgaU9TLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU3RyaXBlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zdHJpcGUvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0cmlwZTogU3RyaXBlKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnN0cmlwZS5zZXRQdWJsaXNoYWJsZUtleSgnbXlfcHVibGlzaGFibGVfa2V5Jyk7XG4gKlxuICogbGV0IGNhcmQgPSB7XG4gKiAgbnVtYmVyOiAnNDI0MjQyNDI0MjQyNDI0MicsXG4gKiAgZXhwTW9udGg6IDEyLFxuICogIGV4cFllYXI6IDIwMjAsXG4gKiAgY3ZjOiAnMjIwJ1xuICogfVxuICpcbiAqIHRoaXMuc3RyaXBlLmNyZWF0ZUNhcmRUb2tlbihjYXJkKVxuICogICAgLnRoZW4odG9rZW4gPT4gY29uc29sZS5sb2codG9rZW4uaWQpKVxuICogICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqXG4gKiBAaW50ZXJmYWNlc1xuICogU3RyaXBlQ2FyZFRva2VuUGFyYW1zXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU3RyaXBlJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc3RyaXBlJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnN0cmlwZScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20venlyYW1lZGlhL2NvcmRvdmEtcGx1Z2luLXN0cmlwZScsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3RyaXBlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIC8qKlxuICAgKiBTZXQgcHVibGlzaGFibGUga2V5XG4gICAqIEBwYXJhbSBwdWJsaXNoYWJsZUtleSB7c3RyaW5nfSBQdWJsaXNoYWJsZSBrZXlcbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0UHVibGlzaGFibGVLZXkocHVibGlzaGFibGVLZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgQ3JlZGl0IENhcmQgVG9rZW5cbiAgICogQHBhcmFtIHBhcmFtcyB7U3RyaXBlQ2FyZFRva2VuUGFyYW1zfSBDcmVkaXQgY2FyZCBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFN0cmlwZUNhcmRUb2tlblJlcz59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdG9rZW4gb2JqZWN0LCBvciByZWplY3RzIHdpdGggYW4gZXJyb3JcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY3JlYXRlQ2FyZFRva2VuKHBhcmFtczogU3RyaXBlQ2FyZFRva2VuUGFyYW1zKTogUHJvbWlzZTxTdHJpcGVDYXJkVG9rZW5SZXM+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgYmFuayBhY2NvdW50IHRva2VuXG4gICAqIEBwYXJhbSBwYXJhbXMge1N0cmlwZUJhbmtBY2NvdW50UGFyYW1zfSBCYW5rIGFjY291bnQgaW5mb3JtYXRpb25cbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRva2VuLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3JcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY3JlYXRlQmFua0FjY291bnRUb2tlbihwYXJhbXM6IFN0cmlwZUJhbmtBY2NvdW50UGFyYW1zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGVzIGEgY3JlZGl0IGNhcmQgbnVtYmVyXG4gICAqIEBwYXJhbSBjYXJkTnVtYmVyIHtzdHJpbmd9IENyZWRpdCBjYXJkIG51bWJlclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIG51bWJlciBpcyB2YWxpZCwgYW5kIHJlamVjdHMgaWYgaXQncyBpbnZhbGlkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHZhbGlkYXRlQ2FyZE51bWJlcihjYXJkTnVtYmVyOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgYSBDVkMgbnVtYmVyXG4gICAqIEBwYXJhbSBjdmMge3N0cmluZ30gQ1ZDIG51bWJlclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIG51bWJlciBpcyB2YWxpZCwgYW5kIHJlamVjdHMgaWYgaXQncyBpbnZhbGlkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHZhbGlkYXRlQ1ZDKGN2Yzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGVzIGFuIGV4cGlyeSBkYXRlXG4gICAqIEBwYXJhbSBleHBNb250aCB7c3RyaW5nfSBleHBpcnkgbW9udGhcbiAgICogQHBhcmFtIGV4cFllYXIge3N0cmluZ30gZXhwaXJ5IHllYXJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHRoZSBkYXRlIGlzIHZhbGlkLCBhbmQgcmVqZWN0cyBpZiBpdCdzIGludmFsaWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdmFsaWRhdGVFeHBpcnlEYXRlKGV4cE1vbnRoOiBzdHJpbmcsIGV4cFllYXI6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGNhcmQgdHlwZSBmcm9tIGNhcmQgbnVtYmVyXG4gICAqIEBwYXJhbSBjYXJkTnVtYmVyIHtzdHJpbmd9IENhcmQgbnVtYmVyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBjcmVkaXQgY2FyZCB0eXBlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldENhcmRUeXBlKGNhcmROdW1iZXI6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbn1cbiJdfQ==
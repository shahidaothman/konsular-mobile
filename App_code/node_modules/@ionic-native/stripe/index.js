var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var StripeOriginal = /** @class */ (function (_super) {
    __extends(StripeOriginal, _super);
    function StripeOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StripeOriginal.prototype.setPublishableKey = function (publishableKey) { return cordova(this, "setPublishableKey", {}, arguments); };
    StripeOriginal.prototype.createCardToken = function (params) { return cordova(this, "createCardToken", {}, arguments); };
    StripeOriginal.prototype.createBankAccountToken = function (params) { return cordova(this, "createBankAccountToken", {}, arguments); };
    StripeOriginal.prototype.validateCardNumber = function (cardNumber) { return cordova(this, "validateCardNumber", {}, arguments); };
    StripeOriginal.prototype.validateCVC = function (cvc) { return cordova(this, "validateCVC", {}, arguments); };
    StripeOriginal.prototype.validateExpiryDate = function (expMonth, expYear) { return cordova(this, "validateExpiryDate", {}, arguments); };
    StripeOriginal.prototype.getCardType = function (cardNumber) { return cordova(this, "getCardType", {}, arguments); };
    StripeOriginal.pluginName = "Stripe";
    StripeOriginal.plugin = "cordova-plugin-stripe";
    StripeOriginal.pluginRef = "cordova.plugins.stripe";
    StripeOriginal.repo = "https://github.com/zyramedia/cordova-plugin-stripe";
    StripeOriginal.platforms = ["Android", "Browser", "iOS"];
    return StripeOriginal;
}(IonicNativePlugin));
var Stripe = new StripeOriginal();
export { Stripe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3N0cmlwZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFnSjVDLDBCQUFpQjs7OztJQVEzQyxrQ0FBaUIsYUFBQyxjQUFzQjtJQVV4QyxnQ0FBZSxhQUFDLE1BQTZCO0lBVTdDLHVDQUFzQixhQUFDLE1BQStCO0lBVXRELG1DQUFrQixhQUFDLFVBQWtCO0lBVXJDLDRCQUFXLGFBQUMsR0FBVztJQVd2QixtQ0FBa0IsYUFBQyxRQUFnQixFQUFFLE9BQWU7SUFVcEQsNEJBQVcsYUFBQyxVQUFrQjs7Ozs7O2lCQXROaEM7RUFpSjRCLGlCQUFpQjtTQUFoQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQ2FyZFRva2VuUGFyYW1zIHtcbiAgLyoqXG4gICAqIENhcmQgbnVtYmVyXG4gICAqL1xuICBudW1iZXI6IHN0cmluZztcbiAgLyoqXG4gICAqIEV4cGlyeSBtb250aFxuICAgKi9cbiAgZXhwTW9udGg6IG51bWJlcjtcbiAgLyoqXG4gICAqIEV4cGlyeSB5ZWFyXG4gICAqL1xuICBleHBZZWFyOiBudW1iZXI7XG4gIC8qKlxuICAgKiBDVkMgLyBDVlZcbiAgICovXG4gIGN2Yz86IHN0cmluZztcbiAgLyoqXG4gICAqIENhcmRob2xkZXIgbmFtZVxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFkZHJlc3MgbGluZSAxXG4gICAqL1xuICBhZGRyZXNzX2xpbmUxPzogc3RyaW5nO1xuICAvKipcbiAgICogQWRkcmVzcyBsaW5lIDJcbiAgICovXG4gIGFkZHJlc3NfbGluZTI/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDaXR5XG4gICAqL1xuICBhZGRyZXNzX2NpdHk/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTdGF0ZSAvIFByb3ZpbmNlXG4gICAqL1xuICBhZGRyZXNzX3N0YXRlPzogc3RyaW5nO1xuICAvKipcbiAgICogQ291bnRyeVxuICAgKi9cbiAgYWRkcmVzc19jb3VudHJ5Pzogc3RyaW5nO1xuICAvKipcbiAgICogUG9zdGFsIGNvZGUgLyBaSVAgQ29kZVxuICAgKi9cbiAgcG9zdGFsQ29kZT86IHN0cmluZztcbiAgLyoqXG4gICAqIDMtbGV0dGVyIElTTyBjb2RlIGZvciBjdXJyZW5jeVxuICAgKi9cbiAgY3VycmVuY3k/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQmFua0FjY291bnRQYXJhbXMge1xuICAvKipcbiAgICogUm91dGluZyBudW1iZXIuXG4gICAqL1xuICByb3V0aW5nX251bWJlcjogc3RyaW5nO1xuICAvKipcbiAgICogQWNjb3VudCBudW1iZXIuXG4gICAqL1xuICBhY2NvdW50X251bWJlcjogc3RyaW5nO1xuICAvKipcbiAgICogQ3VycmVuY3kgY29kZS4gRXhhbXBsZTogYFVTRGAuXG4gICAqL1xuICBjdXJyZW5jeTogc3RyaW5nO1xuICAvKipcbiAgICogQ291bnRyeSBjb2RlLiBFeGFtcGxlOiBgVVNgLlxuICAgKi9cbiAgY291bnRyeTogc3RyaW5nO1xuICAvKipcbiAgICogQWNjb3VudCBob2xkZXIgbmFtZS5cbiAgICovXG4gIGFjY291bnRfaG9sZGVyX25hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBY2NvdW50IGhvbGRlciB0eXBlLiBUaGlzIGNhbiBiZSBgaW5kaXZpZHVhbGAgb3IgYGNvbXBhbnlgLlxuICAgKi9cbiAgYWNjb3VudF9ob2xkZXJfdHlwZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdHJpcGVDYXJkVG9rZW5SZXMge1xuICAvKipcbiAgICogQ2FyZCBPYmplY3QuXG4gICAqL1xuICBjYXJkOiB7XG4gICAgYnJhbmQ6IHN0cmluZyxcbiAgICBleHBfbW9udGg6IG51bWJlcixcbiAgICBleHBfeWVhcjogbnVtYmVyLFxuICAgIGZ1bmRpbmc6IHN0cmluZyxcbiAgICBsYXN0NDogc3RyaW5nXG4gIH07XG4gIC8qKlxuICAgKiBUb2tlbiBSZXF1ZXN0IERhdGUgVGltZS5cbiAgICovXG4gIGNyZWF0ZWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIENhcmQgVG9rZW4uXG4gICAqL1xuICBpZDogc3RyaW5nO1xuICAvKipcbiAgICogU291cmNlIFR5cGUgKGNhcmQgb3IgYWNjb3VudCkuXG4gICAqL1xuICB0eXBlOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgU3RyaXBlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgcGx1Z2luIHRoYXQgYWxsb3dzIHlvdSB0byB1c2UgU3RyaXBlJ3MgTmF0aXZlIFNES3MgZm9yIEFuZHJvaWQgYW5kIGlPUy5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFN0cmlwZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc3RyaXBlL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzdHJpcGU6IFN0cmlwZSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5zdHJpcGUuc2V0UHVibGlzaGFibGVLZXkoJ215X3B1Ymxpc2hhYmxlX2tleScpO1xuICpcbiAqIGxldCBjYXJkID0ge1xuICogIG51bWJlcjogJzQyNDI0MjQyNDI0MjQyNDInLFxuICogIGV4cE1vbnRoOiAxMixcbiAqICBleHBZZWFyOiAyMDIwLFxuICogIGN2YzogJzIyMCdcbiAqIH1cbiAqXG4gKiB0aGlzLnN0cmlwZS5jcmVhdGVDYXJkVG9rZW4oY2FyZClcbiAqICAgIC50aGVuKHRva2VuID0+IGNvbnNvbGUubG9nKHRva2VuLmlkKSlcbiAqICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKlxuICogQGludGVyZmFjZXNcbiAqIFN0cmlwZUNhcmRUb2tlblBhcmFtc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1N0cmlwZScsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXN0cmlwZScsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5zdHJpcGUnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3p5cmFtZWRpYS9jb3Jkb3ZhLXBsdWdpbi1zdHJpcGUnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0cmlwZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcblxuICAvKipcbiAgICogU2V0IHB1Ymxpc2hhYmxlIGtleVxuICAgKiBAcGFyYW0gcHVibGlzaGFibGVLZXkge3N0cmluZ30gUHVibGlzaGFibGUga2V5XG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldFB1Ymxpc2hhYmxlS2V5KHB1Ymxpc2hhYmxlS2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIENyZWRpdCBDYXJkIFRva2VuXG4gICAqIEBwYXJhbSBwYXJhbXMge1N0cmlwZUNhcmRUb2tlblBhcmFtc30gQ3JlZGl0IGNhcmQgaW5mb3JtYXRpb25cbiAgICogQHJldHVybiB7UHJvbWlzZTxTdHJpcGVDYXJkVG9rZW5SZXM+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRva2VuIG9iamVjdCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNyZWF0ZUNhcmRUb2tlbihwYXJhbXM6IFN0cmlwZUNhcmRUb2tlblBhcmFtcyk6IFByb21pc2U8U3RyaXBlQ2FyZFRva2VuUmVzPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGJhbmsgYWNjb3VudCB0b2tlblxuICAgKiBAcGFyYW0gcGFyYW1zIHtTdHJpcGVCYW5rQWNjb3VudFBhcmFtc30gQmFuayBhY2NvdW50IGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0b2tlbiwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNyZWF0ZUJhbmtBY2NvdW50VG9rZW4ocGFyYW1zOiBTdHJpcGVCYW5rQWNjb3VudFBhcmFtcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyBhIGNyZWRpdCBjYXJkIG51bWJlclxuICAgKiBAcGFyYW0gY2FyZE51bWJlciB7c3RyaW5nfSBDcmVkaXQgY2FyZCBudW1iZXJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHRoZSBudW1iZXIgaXMgdmFsaWQsIGFuZCByZWplY3RzIGlmIGl0J3MgaW52YWxpZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB2YWxpZGF0ZUNhcmROdW1iZXIoY2FyZE51bWJlcjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGVzIGEgQ1ZDIG51bWJlclxuICAgKiBAcGFyYW0gY3ZjIHtzdHJpbmd9IENWQyBudW1iZXJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHRoZSBudW1iZXIgaXMgdmFsaWQsIGFuZCByZWplY3RzIGlmIGl0J3MgaW52YWxpZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB2YWxpZGF0ZUNWQyhjdmM6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyBhbiBleHBpcnkgZGF0ZVxuICAgKiBAcGFyYW0gZXhwTW9udGgge3N0cmluZ30gZXhwaXJ5IG1vbnRoXG4gICAqIEBwYXJhbSBleHBZZWFyIHtzdHJpbmd9IGV4cGlyeSB5ZWFyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgZGF0ZSBpcyB2YWxpZCwgYW5kIHJlamVjdHMgaWYgaXQncyBpbnZhbGlkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHZhbGlkYXRlRXhwaXJ5RGF0ZShleHBNb250aDogc3RyaW5nLCBleHBZZWFyOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBjYXJkIHR5cGUgZnJvbSBjYXJkIG51bWJlclxuICAgKiBAcGFyYW0gY2FyZE51bWJlciB7c3RyaW5nfSBDYXJkIG51bWJlclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgY3JlZGl0IGNhcmQgdHlwZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRDYXJkVHlwZShjYXJkTnVtYmVyOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG59XG4iXX0=
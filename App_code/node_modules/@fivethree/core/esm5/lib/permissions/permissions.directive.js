/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ViewContainerRef, TemplateRef } from '@angular/core';
var FivPermissions = /** @class */ (function () {
    function FivPermissions(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
        this.allowedPermissions = [];
        this.uPermissions = [];
    }
    Object.defineProperty(FivPermissions.prototype, "fivPermissionsUserPermissions", {
        set: /**
         * @param {?} userPermissions
         * @return {?}
         */
        function (userPermissions) {
            this.uPermissions = userPermissions || [];
            this.updateView();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FivPermissions.prototype, "fivPermissions", {
        set: /**
         * @param {?} allowed
         * @return {?}
         */
        function (allowed) {
            this.allowedPermissions = allowed || [];
            this.updateView();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FivPermissions.prototype.checkPermission = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var show = false;
        this.uPermissions.forEach((/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            if (_this.allowedPermissions.find((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.toUpperCase() === role.toUpperCase(); }))) {
                show = true;
            }
        }));
        return show;
    };
    /**
     * @return {?}
     */
    FivPermissions.prototype.updateView = /**
     * @return {?}
     */
    function () {
        if (this.checkPermission()) {
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
        else {
            this.viewContainer.clear();
        }
    };
    FivPermissions.decorators = [
        { type: Directive, args: [{
                    selector: '[fivPermissions]'
                },] }
    ];
    /** @nocollapse */
    FivPermissions.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef }
    ]; };
    FivPermissions.propDecorators = {
        fivPermissionsUserPermissions: [{ type: Input }],
        fivPermissions: [{ type: Input }]
    };
    return FivPermissions;
}());
export { FivPermissions };
if (false) {
    /** @type {?} */
    FivPermissions.prototype.allowedPermissions;
    /** @type {?} */
    FivPermissions.prototype.uPermissions;
    /**
     * @type {?}
     * @private
     */
    FivPermissions.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    FivPermissions.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpdmV0aHJlZS9jb3JlLyIsInNvdXJjZXMiOlsibGliL3Blcm1pc3Npb25zL3Blcm1pc3Npb25zLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWhGO0lBT0Usd0JBQ1UsYUFBK0IsRUFDL0IsV0FBNkI7UUFEN0Isa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUx2Qyx1QkFBa0IsR0FBYSxFQUFFLENBQUM7UUFDbEMsaUJBQVksR0FBYSxFQUFFLENBQUM7SUFLekIsQ0FBQztJQUVKLHNCQUFhLHlEQUE2Qjs7Ozs7UUFBMUMsVUFBMkMsZUFBeUI7WUFDbEUsSUFBSSxDQUFDLFlBQVksR0FBRyxlQUFlLElBQUksRUFBRSxDQUFDO1lBQzFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwQixDQUFDOzs7T0FBQTtJQUVELHNCQUNJLDBDQUFjOzs7OztRQURsQixVQUNtQixPQUFpQjtZQUNsQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztZQUN4QyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEIsQ0FBQzs7O09BQUE7Ozs7SUFFRCx3Q0FBZTs7O0lBQWY7UUFBQSxpQkFhQzs7WUFaSyxJQUFJLEdBQUcsS0FBSztRQUNoQixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLElBQUk7WUFDNUIsSUFDRSxLQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSTs7OztZQUMxQixVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQXRDLENBQXNDLEVBQzVDLEVBQ0Q7Z0JBQ0EsSUFBSSxHQUFHLElBQUksQ0FBQzthQUNiO1FBQ0gsQ0FBQyxFQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7SUFFRCxtQ0FBVTs7O0lBQVY7UUFDRSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUMxQixJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN6RDthQUFNO1lBQ0wsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM1QjtJQUNILENBQUM7O2dCQTVDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtpQkFDN0I7Ozs7Z0JBSjBCLGdCQUFnQjtnQkFBRSxXQUFXOzs7Z0RBY3JELEtBQUs7aUNBS0wsS0FBSzs7SUE0QlIscUJBQUM7Q0FBQSxBQTdDRCxJQTZDQztTQTFDWSxjQUFjOzs7SUFDekIsNENBQWtDOztJQUNsQyxzQ0FBNEI7Ozs7O0lBRzFCLHVDQUF1Qzs7Ozs7SUFDdkMscUNBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVmlld0NvbnRhaW5lclJlZiwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ZpdlBlcm1pc3Npb25zXSdcbn0pXG5leHBvcnQgY2xhc3MgRml2UGVybWlzc2lvbnMge1xuICBhbGxvd2VkUGVybWlzc2lvbnM6IHN0cmluZ1tdID0gW107XG4gIHVQZXJtaXNzaW9uczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PlxuICApIHt9XG5cbiAgQElucHV0KCkgc2V0IGZpdlBlcm1pc3Npb25zVXNlclBlcm1pc3Npb25zKHVzZXJQZXJtaXNzaW9uczogc3RyaW5nW10pIHtcbiAgICB0aGlzLnVQZXJtaXNzaW9ucyA9IHVzZXJQZXJtaXNzaW9ucyB8fCBbXTtcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBmaXZQZXJtaXNzaW9ucyhhbGxvd2VkOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuYWxsb3dlZFBlcm1pc3Npb25zID0gYWxsb3dlZCB8fCBbXTtcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcbiAgfVxuXG4gIGNoZWNrUGVybWlzc2lvbigpOiBib29sZWFuIHtcbiAgICBsZXQgc2hvdyA9IGZhbHNlO1xuICAgIHRoaXMudVBlcm1pc3Npb25zLmZvckVhY2gocm9sZSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuYWxsb3dlZFBlcm1pc3Npb25zLmZpbmQoXG4gICAgICAgICAgYSA9PiBhLnRvVXBwZXJDYXNlKCkgPT09IHJvbGUudG9VcHBlckNhc2UoKVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgc2hvdyA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2hvdztcbiAgfVxuXG4gIHVwZGF0ZVZpZXcoKSB7XG4gICAgaWYgKHRoaXMuY2hlY2tQZXJtaXNzaW9uKCkpIHtcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgIH1cbiAgfVxufVxuIl19
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FivFeatureDiscovery } from './../feature-discovery/feature-discovery.component';
import { FivLoadingProgressBar } from './../loading-progress-bar/loading-progress-bar.component';
import { FivIcon } from './../icon/icon.component';
import { Component, Input, ViewChild, Output, EventEmitter, Renderer2, ContentChild, TemplateRef, Optional } from '@angular/core';
import { animate, style, transition, trigger } from '@angular/animations';
import { FivLoadingSpinner } from '../loading-spinner/loading-spinner.component';
import { IonContent, IonLabel } from '@ionic/angular';
import { Subject } from 'rxjs';
import { takeUntil, tap, filter, repeat, map, pairwise, distinctUntilChanged } from 'rxjs/operators';
var FivFab = /** @class */ (function () {
    function FivFab(renderer, content) {
        this.renderer = renderer;
        this.content = content;
        this.vertical = 'none';
        this.horizontal = 'none';
        this.mode = 'normal';
        this.spinColor = 'primary';
        this.disabled = false;
        this.visible = true;
        this.pulse = false;
        this._scroll = true;
        this.fivComplete = new EventEmitter();
        this.fivRefresh = new EventEmitter();
        this.fivHidden = new EventEmitter();
        this.fivShow = new EventEmitter();
        this.fivTransition = new EventEmitter();
        this.loading = false;
        this.extended = false;
        this.iconState = 'normal';
        this.currentDeltaY = 0;
        this.$onDestroy = new Subject();
        this.params = {
            fromTransform: 'translateX(-50%) scale(0)',
            toTransform: 'translateX(-50%) scale(1)'
        };
        this.params = {
            toTransform: this.toTransform,
            fromTransform: this.fromTransform
        };
    }
    Object.defineProperty(FivFab.prototype, "scroll", {
        get: /**
         * @return {?}
         */
        function () {
            return this._scroll;
        },
        set: /**
         * @param {?} scroll
         * @return {?}
         */
        function (scroll) {
            this._scroll = scroll;
            this.$onDestroy.next();
            this.ngOnInit();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FivFab.prototype, "fromTransform", {
        get: /**
         * @return {?}
         */
        function () {
            return this.horizontal === 'center'
                ? 'scale(0) translateX(-50%)'
                : 'scale(0)';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FivFab.prototype, "toTransform", {
        get: /**
         * @return {?}
         */
        function () {
            return this.horizontal === 'center'
                ? 'translateX(-50%) scale(1)'
                : 'scale(1)';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FivFab.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.content) {
            return;
        }
        if (!this.scroll) {
            return;
        }
        this.content.scrollEvents = true;
        /** @type {?} */
        var directionChange = this.content.ionScroll.pipe(map((/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return ev.detail.deltaY; })), pairwise(), map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), y1 = _b[0], y2 = _b[1];
            return (y2 < y1 ? 'Up' : 'Down');
        })), distinctUntilChanged(), takeUntil(this.content.ionScrollEnd), repeat());
        /** @type {?} */
        var up = directionChange.pipe(filter((/**
         * @param {?} direction
         * @return {?}
         */
        function (direction) { return direction === 'Up'; })));
        /** @type {?} */
        var down = directionChange.pipe(filter((/**
         * @param {?} direction
         * @return {?}
         */
        function (direction) { return direction === 'Down'; })));
        up.pipe(tap((/**
         * @return {?}
         */
        function () {
            return _this.labelComp ? (_this.extended = true) : (_this.visible = true);
        })), takeUntil(this.$onDestroy)).subscribe();
        down
            .pipe(tap((/**
         * @return {?}
         */
        function () {
            return _this.labelComp ? (_this.extended = false) : (_this.visible = false);
        })), takeUntil(this.$onDestroy))
            .subscribe();
    };
    /**
     * @return {?}
     */
    FivFab.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.$onDestroy.next();
    };
    /**
     * @return {?}
     */
    FivFab.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.extended = !!this.labelComp;
    };
    /**
     * @return {?}
     */
    FivFab.prototype.load = /**
     * @return {?}
     */
    function () {
        this.loading = true;
        this.fivRefresh.emit(this);
    };
    /**
     * @return {?}
     */
    FivFab.prototype.unload = /**
     * @return {?}
     */
    function () {
        if (this.bar) {
            this.bar.unload();
        }
        this.loading = false;
    };
    /**
     * @return {?}
     */
    FivFab.prototype.complete = /**
     * @return {?}
     */
    function () {
        if (this.loading) {
            if (this.spinner) {
                this.spinner.completeIn(1000);
            }
            else if (this.bar) {
                this.bar.complete();
            }
        }
    };
    /**
     * @return {?}
     */
    FivFab.prototype.fillAnimationDone = /**
     * @return {?}
     */
    function () {
        this.fivComplete.emit(this);
        this.unload();
    };
    /**
     * @param {?} progress
     * @return {?}
     */
    FivFab.prototype.rotate = /**
     * @param {?} progress
     * @return {?}
     */
    function (progress) {
        this.renderer.setStyle(this.spinner._elementRef.nativeElement, 'transform', "rotateZ(" + (progress / 200) * 360 + "deg)");
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FivFab.prototype.fabAnimDone = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.fromState === 'void') {
            this.fivShow.emit(this);
        }
        if (event.toState === 'void') {
            this.fivHidden.emit(this);
        }
    };
    FivFab.decorators = [
        { type: Component, args: [{
                    selector: 'fiv-fab',
                    template: "<ion-fab *ngIf=\"visible\" (@fabAnim.done)=\"fabAnimDone($event)\" [@fabAnim]=\"{value: '*',params: params}\"\n  [ngClass]=\"[mode,horizontal,vertical]\" [slot]=\"slot\">\n  <fiv-loading-spinner [color]=\"spinColor\" *ngIf=\"!extended && loading\" (fivProgress)=\"rotate($event)\" #spinner\n    (fivComplete)=\"fillAnimationDone()\" class=\"spinner\" [circleRadius]=\"30\" [diameter]=\"68\" [strokeWidth]=\"4\"\n    [mode]=\"'indeterminate'\">\n  </fiv-loading-spinner>\n\n  <ion-button [ngClass]=\"{'pulse': pulse}\" [color]=\"color\" [disabled]=\"disabled\">\n    <fiv-loading-progress-bar *ngIf=\"extended\" [loading]=\"loading\" (fivComplete)=\"fillAnimationDone()\" #bar>\n    </fiv-loading-progress-bar>\n    <fiv-icon #feature=\"fivFeature\" [fivFeature]=\"feature\" *ngIf=\"iconComp\" [color]=\"iconComp.color\"\n      [name]=\"iconComp.name\" [dotVisible]=\"iconComp.dotVisible\" [indicatorValue]=\"iconComp.indicatorValue\">\n    </fiv-icon>\n    <div [@labelAnim] *ngIf=\"labelComp && extended\">\n      <ng-content select=\"ion-label\"></ng-content>\n    </div>\n  </ion-button>\n</ion-fab>",
                    animations: [
                        trigger('fabAnim', [
                            transition('void => *', [
                                style({
                                    transform: '{{fromTransform}}'
                                }),
                                animate('250ms ease-out', style({
                                    transform: '{{toTransform}}'
                                }))
                            ], {
                                params: {
                                    fromTransform: 'scale(0) translateX(-50%)',
                                    toTransform: 'translateX(-50%) scale(1)'
                                }
                            }),
                            transition('* => void', [
                                style({
                                    transform: '{{toTransform}}'
                                }),
                                animate('250ms ease-in', style({ transform: '{{fromTransform}}' }))
                            ], {
                                params: {
                                    fromTransform: 'scale(0) translateX(-50%)',
                                    toTransform: 'translateX(-50%) scale(1)'
                                }
                            })
                        ]),
                        trigger('labelAnim', [
                            transition('void => *', [
                                style({ width: '0', opacity: 0 }),
                                animate('140ms', style({ width: '*', opacity: 1 }))
                            ]),
                            transition('* => void', [
                                style({ width: '*', opacity: 1 }),
                                animate('120ms', style({ width: 0, opacity: 0 }))
                            ])
                        ])
                    ],
                    styles: [":host{--fiv-spinner-size:68px;display:contents}:host(.button-disabled){pointer-events:none}ion-button{--border-radius:28px;height:56px;min-width:56px;-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:0;margin-inline-end:0;margin:0}ion-fab.top{top:10px}ion-fab.top.edge{top:-28px}ion-fab.middle{top:calc(50% - 28px)}ion-fab.bottom.edge{bottom:-28px}ion-fab.bottom{bottom:10px}ion-fab.center{left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}ion-fab.start{left:10px}ion-fab.end{right:calc(10px + var(--ion-safe-area-right,0px))}.pulse{-webkit-animation:1.2s infinite shadow-pulse;animation:1.2s infinite shadow-pulse}fiv-loading-spinner{position:absolute;left:calc((var(--fiv-spinner-size) - 56px)/ -2);top:calc((var(--fiv-spinner-size) - 56px)/ -2)}@-webkit-keyframes shadow-pulse{0%{border-radius:28px;box-shadow:0 0 0 0 rgba(0,0,0,.2)}100%{border-radius:28px;box-shadow:0 0 0 28px transparent}}@keyframes shadow-pulse{0%{border-radius:28px;box-shadow:0 0 0 0 rgba(0,0,0,.2)}100%{border-radius:28px;box-shadow:0 0 0 28px transparent}}"]
                }] }
    ];
    /** @nocollapse */
    FivFab.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: IonContent, decorators: [{ type: Optional }] }
    ]; };
    FivFab.propDecorators = {
        vertical: [{ type: Input }],
        horizontal: [{ type: Input }],
        mode: [{ type: Input }],
        slot: [{ type: Input }],
        icon: [{ type: Input }],
        spinColor: [{ type: Input }],
        color: [{ type: Input }],
        disabled: [{ type: Input }],
        visible: [{ type: Input }],
        pulse: [{ type: Input }],
        scroll: [{ type: Input }],
        feature: [{ type: Input }],
        fivComplete: [{ type: Output }],
        fivRefresh: [{ type: Output }],
        fivHidden: [{ type: Output }],
        fivShow: [{ type: Output }],
        fivTransition: [{ type: Output }],
        spinner: [{ type: ViewChild, args: ['spinner',] }],
        featureDiscovery: [{ type: ViewChild, args: ['feature',] }],
        bar: [{ type: ViewChild, args: ['bar',] }],
        iconComp: [{ type: ContentChild, args: [FivIcon,] }],
        labelComp: [{ type: ContentChild, args: [IonLabel,] }]
    };
    return FivFab;
}());
export { FivFab };
if (false) {
    /** @type {?} */
    FivFab.prototype.vertical;
    /** @type {?} */
    FivFab.prototype.horizontal;
    /** @type {?} */
    FivFab.prototype.mode;
    /** @type {?} */
    FivFab.prototype.slot;
    /** @type {?} */
    FivFab.prototype.icon;
    /** @type {?} */
    FivFab.prototype.spinColor;
    /** @type {?} */
    FivFab.prototype.color;
    /** @type {?} */
    FivFab.prototype.disabled;
    /** @type {?} */
    FivFab.prototype.visible;
    /** @type {?} */
    FivFab.prototype.pulse;
    /** @type {?} */
    FivFab.prototype._scroll;
    /** @type {?} */
    FivFab.prototype.feature;
    /** @type {?} */
    FivFab.prototype.fivComplete;
    /** @type {?} */
    FivFab.prototype.fivRefresh;
    /** @type {?} */
    FivFab.prototype.fivHidden;
    /** @type {?} */
    FivFab.prototype.fivShow;
    /** @type {?} */
    FivFab.prototype.fivTransition;
    /** @type {?} */
    FivFab.prototype.spinner;
    /** @type {?} */
    FivFab.prototype.featureDiscovery;
    /** @type {?} */
    FivFab.prototype.bar;
    /** @type {?} */
    FivFab.prototype.iconComp;
    /** @type {?} */
    FivFab.prototype.labelComp;
    /** @type {?} */
    FivFab.prototype.loading;
    /** @type {?} */
    FivFab.prototype.extended;
    /** @type {?} */
    FivFab.prototype.iconState;
    /** @type {?} */
    FivFab.prototype.currentDeltaY;
    /** @type {?} */
    FivFab.prototype.$onDestroy;
    /** @type {?} */
    FivFab.prototype.params;
    /**
     * @type {?}
     * @private
     */
    FivFab.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FivFab.prototype.content;
}
/**
 * @record
 */
export function FabTransitionEvent() { }
if (false) {
    /** @type {?} */
    FabTransitionEvent.prototype.from;
    /** @type {?} */
    FabTransitionEvent.prototype.to;
}
/** @enum {number} */
var FabState = {
    HIDDEN: 0,
    NORMAL: 1,
    EXTENDED: 2,
};
export { FabState };
FabState[FabState.HIDDEN] = 'HIDDEN';
FabState[FabState.NORMAL] = 'NORMAL';
FabState[FabState.EXTENDED] = 'EXTENDED';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFiLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXZldGhyZWUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9mYWIvZmFiLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRCxPQUFPLEVBQ0wsU0FBUyxFQUVULEtBQUssRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBR1QsWUFBWSxFQUVaLFdBQVcsRUFDWCxRQUFRLEVBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNMLE9BQU8sRUFDUCxLQUFLLEVBQ0wsVUFBVSxFQUNWLE9BQU8sRUFFUixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQ0wsU0FBUyxFQUNULEdBQUcsRUFDSCxNQUFNLEVBQ04sTUFBTSxFQUNOLEdBQUcsRUFDSCxRQUFRLEVBQ1Isb0JBQW9CLEVBQ3JCLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEI7SUErR0UsZ0JBQ1UsUUFBbUIsRUFDUCxPQUFtQjtRQUQvQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ1AsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQTFEaEMsYUFBUSxHQUEwQyxNQUFNLENBQUM7UUFDekQsZUFBVSxHQUF5QyxNQUFNLENBQUM7UUFDMUQsU0FBSSxHQUF1QixRQUFRLENBQUM7UUFHcEMsY0FBUyxHQUFHLFNB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QzNCLHlCQUF1Qzs7Ozs7QUF3RzNDLHdDQUdDOzs7SUFGQyxrQ0FBZTs7SUFDZixnQ0FBYTs7OztJQUliLFNBQU07SUFDTixTQUFNO0lBQ04sV0FBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFuaW1hdGlvblBhcmFtcyB9IGZyb20gJy4vLi4vZ2FsbGVyeS9nYWxsZXJ5LWltYWdlL2dhbGxlcnktaW1hZ2UuY29tcG9uZW50JztcbmltcG9ydCB7IEZpdkZlYXR1cmVEaXNjb3ZlcnkgfSBmcm9tICcuLy4uL2ZlYXR1cmUtZGlzY292ZXJ5L2ZlYXR1cmUtZGlzY292ZXJ5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaXZMb2FkaW5nUHJvZ3Jlc3NCYXIgfSBmcm9tICcuLy4uL2xvYWRpbmctcHJvZ3Jlc3MtYmFyL2xvYWRpbmctcHJvZ3Jlc3MtYmFyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaXZJY29uIH0gZnJvbSAnLi8uLi9pY29uL2ljb24uY29tcG9uZW50JztcbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBJbnB1dCxcbiAgVmlld0NoaWxkLFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgUmVuZGVyZXIyLFxuICBIb3N0QmluZGluZyxcbiAgT25EZXN0cm95LFxuICBDb250ZW50Q2hpbGQsXG4gIEFmdGVyQ29udGVudEluaXQsXG4gIFRlbXBsYXRlUmVmLFxuICBPcHRpb25hbFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIGFuaW1hdGUsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uLFxuICB0cmlnZ2VyLFxuICBzdGF0ZVxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IEZpdkxvYWRpbmdTcGlubmVyIH0gZnJvbSAnLi4vbG9hZGluZy1zcGlubmVyL2xvYWRpbmctc3Bpbm5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgSW9uQ29udGVudCwgSW9uTGFiZWwgfSBmcm9tICdAaW9uaWMvYW5ndWxhcic7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICB0YWtlVW50aWwsXG4gIHRhcCxcbiAgZmlsdGVyLFxuICByZXBlYXQsXG4gIG1hcCxcbiAgcGFpcndpc2UsXG4gIGRpc3RpbmN0VW50aWxDaGFuZ2VkXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZml2LWZhYicsXG4gIHRlbXBsYXRlVXJsOiAnLi9mYWIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9mYWIuY29tcG9uZW50LnNjc3MnXSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ2ZhYkFuaW0nLCBbXG4gICAgICB0cmFuc2l0aW9uKFxuICAgICAgICAndm9pZCA9PiAqJyxcbiAgICAgICAgW1xuICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3t7ZnJvbVRyYW5zZm9ybX19J1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGFuaW1hdGUoXG4gICAgICAgICAgICAnMjUwbXMgZWFzZS1vdXQnLFxuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICB0cmFuc2Zvcm06ICd7e3RvVHJhbnNmb3JtfX0nXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgXSxcbiAgICAgICAge1xuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgZnJvbVRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZVgoLTUwJSknLFxuICAgICAgICAgICAgdG9UcmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpIHNjYWxlKDEpJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKSxcbiAgICAgIHRyYW5zaXRpb24oXG4gICAgICAgICcqID0+IHZvaWQnLFxuICAgICAgICBbXG4gICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgdHJhbnNmb3JtOiAne3t0b1RyYW5zZm9ybX19J1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGFuaW1hdGUoJzI1MG1zIGVhc2UtaW4nLCBzdHlsZSh7IHRyYW5zZm9ybTogJ3t7ZnJvbVRyYW5zZm9ybX19JyB9KSlcbiAgICAgICAgXSxcbiAgICAgICAge1xuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgZnJvbVRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZVgoLTUwJSknLFxuICAgICAgICAgICAgdG9UcmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpIHNjYWxlKDEpJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKVxuICAgIF0pLFxuICAgIHRyaWdnZXIoJ2xhYmVsQW5pbScsIFtcbiAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gKicsIFtcbiAgICAgICAgc3R5bGUoeyB3aWR0aDogJzAnLCBvcGFjaXR5OiAwIH0pLFxuICAgICAgICBhbmltYXRlKCcxNDBtcycsIHN0eWxlKHsgd2lkdGg6ICcqJywgb3BhY2l0eTogMSB9KSlcbiAgICAgIF0pLFxuICAgICAgdHJhbnNpdGlvbignKiA9PiB2b2lkJywgW1xuICAgICAgICBzdHlsZSh7IHdpZHRoOiAnKicsIG9wYWNpdHk6IDEgfSksXG4gICAgICAgIGFuaW1hdGUoJzEyMG1zJywgc3R5bGUoeyB3aWR0aDogMCwgb3BhY2l0eTogMCB9KSlcbiAgICAgIF0pXG4gICAgXSlcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBGaXZGYWIgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIEBJbnB1dCgpIHZlcnRpY2FsPzogJ3RvcCcgfCAnbWlkZGxlJyB8ICdib3R0b20nIHwgJ25vbmUnID0gJ25vbmUnO1xuICBASW5wdXQoKSBob3Jpem9udGFsPzogJ2NlbnRlcicgfCAnc3RhcnQnIHwgJ2VuZCcgfCAnbm9uZScgPSAnbm9uZSc7XG4gIEBJbnB1dCgpIG1vZGU/OiAnbm9ybWFsJyB8ICdlZGdlJyA9ICdub3JtYWwnO1xuICBASW5wdXQoKSBzbG90OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGljb246IHN0cmluZztcbiAgQElucHV0KCkgc3BpbkNvbG9yID0gJ3ByaW1hcnknO1xuICBASW5wdXQoKSBjb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuICBASW5wdXQoKSB2aXNpYmxlID0gdHJ1ZTtcbiAgQElucHV0KCkgcHVsc2UgPSBmYWxzZTtcbiAgQElucHV0KCkgc2V0IHNjcm9sbChzY3JvbGw6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zY3JvbGwgPSBzY3JvbGw7XG4gICAgdGhpcy4kb25EZXN0cm95Lm5leHQoKTtcbiAgICB0aGlzLm5nT25Jbml0KCk7XG4gIH1cbiAgZ2V0IHNjcm9sbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsO1xuICB9XG4gIF9zY3JvbGwgPSB0cnVlO1xuICBASW5wdXQoKSBmZWF0dXJlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBPdXRwdXQoKSBmaXZDb21wbGV0ZTogRXZlbnRFbWl0dGVyPEZpdkZhYj4gPSBuZXcgRXZlbnRFbWl0dGVyPEZpdkZhYj4oKTtcbiAgQE91dHB1dCgpIGZpdlJlZnJlc2g6IEV2ZW50RW1pdHRlcjxGaXZGYWI+ID0gbmV3IEV2ZW50RW1pdHRlcjxGaXZGYWI+KCk7XG4gIEBPdXRwdXQoKSBmaXZIaWRkZW46IEV2ZW50RW1pdHRlcjxGaXZGYWI+ID0gbmV3IEV2ZW50RW1pdHRlcjxGaXZGYWI+KCk7XG4gIEBPdXRwdXQoKSBmaXZTaG93OiBFdmVudEVtaXR0ZXI8Rml2RmFiPiA9IG5ldyBFdmVudEVtaXR0ZXI8Rml2RmFiPigpO1xuICBAT3V0cHV0KCkgZml2VHJhbnNpdGlvbjogRXZlbnRFbWl0dGVyPEZpdkZhYj4gPSBuZXcgRXZlbnRFbWl0dGVyPEZpdkZhYj4oKTtcblxuICBAVmlld0NoaWxkKCdzcGlubmVyJykgc3Bpbm5lcjogRml2TG9hZGluZ1NwaW5uZXI7XG4gIEBWaWV3Q2hpbGQoJ2ZlYXR1cmUnKSBmZWF0dXJlRGlzY292ZXJ5OiBGaXZGZWF0dXJlRGlzY292ZXJ5O1xuICBAVmlld0NoaWxkKCdiYXInKSBiYXI6IEZpdkxvYWRpbmdQcm9ncmVzc0JhcjtcbiAgQENvbnRlbnRDaGlsZChGaXZJY29uKSBpY29uQ29tcDogRml2SWNvbjtcbiAgQENvbnRlbnRDaGlsZChJb25MYWJlbCkgbGFiZWxDb21wOiBJb25MYWJlbDtcblxuICBsb2FkaW5nID0gZmFsc2U7XG4gIGV4dGVuZGVkID0gZmFsc2U7XG4gIGljb25TdGF0ZSA9ICdub3JtYWwnO1xuICBjdXJyZW50RGVsdGFZID0gMDtcbiAgJG9uRGVzdHJveSA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgcGFyYW1zOiB7IGZyb21UcmFuc2Zvcm06IHN0cmluZzsgdG9UcmFuc2Zvcm06IHN0cmluZyB9ID0ge1xuICAgIGZyb21UcmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpIHNjYWxlKDApJyxcbiAgICB0b1RyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSkgc2NhbGUoMSknXG4gIH07XG5cbiAgZ2V0IGZyb21UcmFuc2Zvcm0oKSB7XG4gICAgcmV0dXJuIHRoaXMuaG9yaXpvbnRhbCA9PT0gJ2NlbnRlcidcbiAgICAgID8gJ3NjYWxlKDApIHRyYW5zbGF0ZVgoLTUwJSknXG4gICAgICA6ICdzY2FsZSgwKSc7XG4gIH1cblxuICBnZXQgdG9UcmFuc2Zvcm0oKSB7XG4gICAgcmV0dXJuIHRoaXMuaG9yaXpvbnRhbCA9PT0gJ2NlbnRlcidcbiAgICAgID8gJ3RyYW5zbGF0ZVgoLTUwJSkgc2NhbGUoMSknXG4gICAgICA6ICdzY2FsZSgxKSc7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb250ZW50OiBJb25Db250ZW50XG4gICkge1xuICAgIHRoaXMucGFyYW1zID0ge1xuICAgICAgdG9UcmFuc2Zvcm06IHRoaXMudG9UcmFuc2Zvcm0sXG4gICAgICBmcm9tVHJhbnNmb3JtOiB0aGlzLmZyb21UcmFuc2Zvcm1cbiAgICB9O1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc2Nyb2xsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY29udGVudC5zY3JvbGxFdmVudHMgPSB0cnVlO1xuXG4gICAgY29uc3QgZGlyZWN0aW9uQ2hhbmdlID0gdGhpcy5jb250ZW50LmlvblNjcm9sbC5waXBlKFxuICAgICAgbWFwKGV2ID0+IGV2LmRldGFpbC5kZWx0YVkpLFxuICAgICAgcGFpcndpc2UoKSxcbiAgICAgIG1hcCgoW3kxLCB5Ml0pID0+ICh5MiA8IHkxID8gJ1VwJyA6ICdEb3duJykpLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIHRha2VVbnRpbCh0aGlzLmNvbnRlbnQuaW9uU2Nyb2xsRW5kKSxcbiAgICAgIHJlcGVhdCgpXG4gICAgKTtcblxuICAgIGNvbnN0IHVwID0gZGlyZWN0aW9uQ2hhbmdlLnBpcGUoZmlsdGVyKGRpcmVjdGlvbiA9PiBkaXJlY3Rpb24gPT09ICdVcCcpKTtcblxuICAgIGNvbnN0IGRvd24gPSBkaXJlY3Rpb25DaGFuZ2UucGlwZShcbiAgICAgIGZpbHRlcihkaXJlY3Rpb24gPT4gZGlyZWN0aW9uID09PSAnRG93bicpXG4gICAgKTtcblxuICAgIHVwLnBpcGUoXG4gICAgICB0YXAoKCkgPT5cbiAgICAgICAgdGhpcy5sYWJlbENvbXAgPyAodGhpcy5leHRlbmRlZCA9IHRydWUpIDogKHRoaXMudmlzaWJsZSA9IHRydWUpXG4gICAgICApLFxuICAgICAgdGFrZVVudGlsKHRoaXMuJG9uRGVzdHJveSlcbiAgICApLnN1YnNjcmliZSgpO1xuXG4gICAgZG93blxuICAgICAgLnBpcGUoXG4gICAgICAgIHRhcCgoKSA9PlxuICAgICAgICAgIHRoaXMubGFiZWxDb21wID8gKHRoaXMuZXh0ZW5kZWQgPSBmYWxzZSkgOiAodGhpcy52aXNpYmxlID0gZmFsc2UpXG4gICAgICAgICksXG4gICAgICAgIHRha2VVbnRpbCh0aGlzLiRvbkRlc3Ryb3kpXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLiRvbkRlc3Ryb3kubmV4dCgpO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZXh0ZW5kZWQgPSAhIXRoaXMubGFiZWxDb21wO1xuICB9XG5cbiAgbG9hZCgpIHtcbiAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgIHRoaXMuZml2UmVmcmVzaC5lbWl0KHRoaXMpO1xuICB9XG5cbiAgdW5sb2FkKCkge1xuICAgIGlmICh0aGlzLmJhcikge1xuICAgICAgdGhpcy5iYXIudW5sb2FkKCk7XG4gICAgfVxuICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICB9XG5cbiAgY29tcGxldGUoKSB7XG4gICAgaWYgKHRoaXMubG9hZGluZykge1xuICAgICAgaWYgKHRoaXMuc3Bpbm5lcikge1xuICAgICAgICB0aGlzLnNwaW5uZXIuY29tcGxldGVJbigxMDAwKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5iYXIpIHtcbiAgICAgICAgdGhpcy5iYXIuY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmaWxsQW5pbWF0aW9uRG9uZSgpIHtcbiAgICB0aGlzLmZpdkNvbXBsZXRlLmVtaXQodGhpcyk7XG4gICAgdGhpcy51bmxvYWQoKTtcbiAgfVxuXG4gIHJvdGF0ZShwcm9ncmVzczogbnVtYmVyKSB7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShcbiAgICAgIHRoaXMuc3Bpbm5lci5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgJ3RyYW5zZm9ybScsXG4gICAgICBgcm90YXRlWigkeyhwcm9ncmVzcyAvIDIwMCkgKiAzNjB9ZGVnKWBcbiAgICApO1xuICB9XG5cbiAgZmFiQW5pbURvbmUoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuZnJvbVN0YXRlID09PSAndm9pZCcpIHtcbiAgICAgIHRoaXMuZml2U2hvdy5lbWl0KHRoaXMpO1xuICAgIH1cblxuICAgIGlmIChldmVudC50b1N0YXRlID09PSAndm9pZCcpIHtcbiAgICAgIHRoaXMuZml2SGlkZGVuLmVtaXQodGhpcyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmFiVHJhbnNpdGlvbkV2ZW50IHtcbiAgZnJvbTogRmFiU3RhdGU7XG4gIHRvOiBGYWJTdGF0ZTtcbn1cblxuZXhwb3J0IGVudW0gRmFiU3RhdGUge1xuICBISURERU4sXG4gIE5PUk1BTCxcbiAgRVhURU5ERURcbn1cbiJdfQ==
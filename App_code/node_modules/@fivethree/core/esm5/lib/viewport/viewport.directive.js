/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
var FivViewport = /** @class */ (function () {
    function FivViewport(elementRef) {
        this.elementRef = elementRef;
        this.fivAppear = new EventEmitter();
        this.fivDisappear = new EventEmitter();
        this.visible = false;
    }
    /**
     * @return {?}
     */
    FivViewport.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.io = new IntersectionObserver((/**
         * @param {?} entries
         * @param {?} observer
         * @return {?}
         */
        function (entries, observer) {
            entries.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            function (entry) {
                if (entry.isIntersecting) {
                    _this.handleIntersection();
                }
                else {
                    _this.handleNonIntersection();
                }
            }));
        }));
        this.io['POLL_INTERVAL'] = 100;
        this.io.observe(this.elementRef.nativeElement);
    };
    /**
     * @return {?}
     */
    FivViewport.prototype.handleNonIntersection = /**
     * @return {?}
     */
    function () {
        if (this.visible) {
            this.fivDisappear.emit(this);
        }
        this.visible = false;
    };
    /**
     * @return {?}
     */
    FivViewport.prototype.handleIntersection = /**
     * @return {?}
     */
    function () {
        if (!this.visible) {
            this.fivAppear.emit(this);
        }
        this.visible = true;
    };
    /**
     * @return {?}
     */
    FivViewport.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.io.disconnect();
    };
    /**
     * @return {?}
     */
    FivViewport.prototype.isVisible = /**
     * @return {?}
     */
    function () {
        return this.visible;
    };
    FivViewport.decorators = [
        { type: Directive, args: [{
                    selector: '[fivViewport]',
                    exportAs: 'viewport'
                },] }
    ];
    /** @nocollapse */
    FivViewport.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FivViewport.propDecorators = {
        fivAppear: [{ type: Output }],
        fivDisappear: [{ type: Output }]
    };
    return FivViewport;
}());
export { FivViewport };
if (false) {
    /** @type {?} */
    FivViewport.prototype.fivAppear;
    /** @type {?} */
    FivViewport.prototype.fivDisappear;
    /**
     * @type {?}
     * @private
     */
    FivViewport.prototype.visible;
    /**
     * @type {?}
     * @private
     */
    FivViewport.prototype.io;
    /**
     * @type {?}
     * @private
     */
    FivViewport.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld3BvcnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpdmV0aHJlZS9jb3JlLyIsInNvdXJjZXMiOlsibGliL3ZpZXdwb3J0L3ZpZXdwb3J0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUdaLE1BQU0sRUFFUCxNQUFNLGVBQWUsQ0FBQztBQUV2QjtJQVVFLHFCQUE2QixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBTHpDLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3BDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUN6QyxZQUFPLEdBQUcsS0FBSyxDQUFDO0lBRzhCLENBQUM7Ozs7SUFFdkQsOEJBQVE7OztJQUFSO1FBQUEsaUJBWUM7UUFYQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksb0JBQW9COzs7OztRQUFDLFVBQUMsT0FBTyxFQUFFLFFBQVE7WUFDbkQsT0FBTyxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLEtBQUs7Z0JBQ25CLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRTtvQkFDeEIsS0FBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7aUJBQzNCO3FCQUFNO29CQUNMLEtBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO2lCQUM5QjtZQUNILENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUMvQixJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7SUFFRCwyQ0FBcUI7OztJQUFyQjtRQUNFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM5QjtRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFDRCx3Q0FBa0I7OztJQUFsQjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQzs7OztJQUVELGlDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7OztJQUVELCtCQUFTOzs7SUFBVDtRQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDOztnQkE3Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsVUFBVTtpQkFDckI7Ozs7Z0JBWEMsVUFBVTs7OzRCQWFULE1BQU07K0JBQ04sTUFBTTs7SUF3Q1Qsa0JBQUM7Q0FBQSxBQTlDRCxJQThDQztTQTFDWSxXQUFXOzs7SUFDdEIsZ0NBQThDOztJQUM5QyxtQ0FBaUQ7Ozs7O0lBQ2pELDhCQUF3Qjs7Ozs7SUFDeEIseUJBQWlDOzs7OztJQUVyQixpQ0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBPbkRlc3Ryb3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tmaXZWaWV3cG9ydF0nLFxuICBleHBvcnRBczogJ3ZpZXdwb3J0J1xufSlcbmV4cG9ydCBjbGFzcyBGaXZWaWV3cG9ydCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQE91dHB1dCgpIGZpdkFwcGVhciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgZml2RGlzYXBwZWFyID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIHByaXZhdGUgdmlzaWJsZSA9IGZhbHNlO1xuICBwcml2YXRlIGlvOiBJbnRlcnNlY3Rpb25PYnNlcnZlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5pbyA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcbiAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgIHRoaXMuaGFuZGxlSW50ZXJzZWN0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVOb25JbnRlcnNlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5pb1snUE9MTF9JTlRFUlZBTCddID0gMTAwO1xuICAgIHRoaXMuaW8ub2JzZXJ2ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gIH1cblxuICBoYW5kbGVOb25JbnRlcnNlY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudmlzaWJsZSkge1xuICAgICAgdGhpcy5maXZEaXNhcHBlYXIuZW1pdCh0aGlzKTtcbiAgICB9XG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gIH1cbiAgaGFuZGxlSW50ZXJzZWN0aW9uKCkge1xuICAgIGlmICghdGhpcy52aXNpYmxlKSB7XG4gICAgICB0aGlzLmZpdkFwcGVhci5lbWl0KHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5pby5kaXNjb25uZWN0KCk7XG4gIH1cblxuICBpc1Zpc2libGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudmlzaWJsZTtcbiAgfVxufVxuIl19
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, HostBinding } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
var FivCenter = /** @class */ (function () {
    function FivCenter(sanitizer) {
        this.sanitizer = sanitizer;
        this.vertical = true;
        this.horizontal = true;
    }
    Object.defineProperty(FivCenter.prototype, "myStyle", {
        get: /**
         * @return {?}
         */
        function () {
            // tslint:disable-next-line:max-line-length
            /** @type {?} */
            var style = "position: absolute; " + (this.vertical && this.horizontal
                ? 'top: 50%; left: 50%; transform: translateY(-50%) translateX(-50%);'
                : this.vertical
                    ? 'top: 50%; transform: translateY(-50%);'
                    : 'left: 50%; transform: translateX(-50%);');
            return this.sanitizer.bypassSecurityTrustStyle(style);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FivCenter.prototype, "fivCenter", {
        set: /**
         * @param {?} center
         * @return {?}
         */
        function (center) {
            if (center) {
                this.vertical = center.vertical;
                this.horizontal = center.horizontal;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FivCenter.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    FivCenter.decorators = [
        { type: Directive, args: [{
                    selector: '[fivCenter]'
                },] }
    ];
    /** @nocollapse */
    FivCenter.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    FivCenter.propDecorators = {
        myStyle: [{ type: HostBinding, args: ['style',] }],
        fivCenter: [{ type: Input }]
    };
    return FivCenter;
}());
export { FivCenter };
if (false) {
    /** @type {?} */
    FivCenter.prototype.vertical;
    /** @type {?} */
    FivCenter.prototype.horizontal;
    /**
     * @type {?}
     * @private
     */
    FivCenter.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VudGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXZldGhyZWUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9jZW50ZXIvY2VudGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBYSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVwRTtJQU9FLG1CQUFvQixTQUF1QjtRQUF2QixjQUFTLEdBQVQsU0FBUyxDQUFjO1FBSDNDLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFDaEIsZUFBVSxHQUFHLElBQUksQ0FBQztJQUU0QixDQUFDO0lBRS9DLHNCQUNJLDhCQUFPOzs7O1FBRFg7OztnQkFHUSxLQUFLLEdBQUcsMEJBQ1osSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVTtnQkFDOUIsQ0FBQyxDQUFDLG9FQUFvRTtnQkFDdEUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRO29CQUNmLENBQUMsQ0FBQyx3Q0FBd0M7b0JBQzFDLENBQUMsQ0FBQyx5Q0FBeUMsQ0FDN0M7WUFDRixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEQsQ0FBQzs7O09BQUE7SUFFRCxzQkFBYSxnQ0FBUzs7Ozs7UUFBdEIsVUFBdUIsTUFBa0Q7WUFDdkUsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO2dCQUNoQyxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7YUFDckM7UUFDSCxDQUFDOzs7T0FBQTs7OztJQUVELDRCQUFROzs7SUFBUixjQUFrQixDQUFDOztnQkE3QnBCLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtpQkFDeEI7Ozs7Z0JBSm1CLFlBQVk7OzswQkFXN0IsV0FBVyxTQUFDLE9BQU87NEJBYW5CLEtBQUs7O0lBUVIsZ0JBQUM7Q0FBQSxBQTlCRCxJQThCQztTQTNCWSxTQUFTOzs7SUFDcEIsNkJBQWdCOztJQUNoQiwrQkFBa0I7Ozs7O0lBRU4sOEJBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgSG9zdEJpbmRpbmcsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2FmZVN0eWxlLCBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ZpdkNlbnRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIEZpdkNlbnRlciBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHZlcnRpY2FsID0gdHJ1ZTtcbiAgaG9yaXpvbnRhbCA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcikge31cblxuICBASG9zdEJpbmRpbmcoJ3N0eWxlJylcbiAgZ2V0IG15U3R5bGUoKTogU2FmZVN0eWxlIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgY29uc3Qgc3R5bGUgPSBgcG9zaXRpb246IGFic29sdXRlOyAke1xuICAgICAgdGhpcy52ZXJ0aWNhbCAmJiB0aGlzLmhvcml6b250YWxcbiAgICAgICAgPyAndG9wOiA1MCU7IGxlZnQ6IDUwJTsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpIHRyYW5zbGF0ZVgoLTUwJSk7J1xuICAgICAgICA6IHRoaXMudmVydGljYWxcbiAgICAgICAgPyAndG9wOiA1MCU7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsnXG4gICAgICAgIDogJ2xlZnQ6IDUwJTsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpOydcbiAgICB9YDtcbiAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFN0eWxlKHN0eWxlKTtcbiAgfVxuXG4gIEBJbnB1dCgpIHNldCBmaXZDZW50ZXIoY2VudGVyOiB7IHZlcnRpY2FsOiBib29sZWFuOyBob3Jpem9udGFsOiBib29sZWFuIH0pIHtcbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICB0aGlzLnZlcnRpY2FsID0gY2VudGVyLnZlcnRpY2FsO1xuICAgICAgdGhpcy5ob3Jpem9udGFsID0gY2VudGVyLmhvcml6b250YWw7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7fVxufVxuIl19
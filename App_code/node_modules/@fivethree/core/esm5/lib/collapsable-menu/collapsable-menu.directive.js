/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Platform, IonMenu, IonSplitPane } from '@ionic/angular';
import { Directive, HostBinding, Input, HostListener, Host, Optional } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { map } from 'rxjs/operators';
var FivCollapsableMenu = /** @class */ (function () {
    function FivCollapsableMenu(sanitizer, menu, split, platform) {
        var _this = this;
        this.sanitizer = sanitizer;
        this.menu = menu;
        this.split = split;
        this.platform = platform;
        this.collapsed = false;
        this.hovering = false;
        this.splitVisible = false;
        this.hoverMenu = true;
        this.width = 64;
        this.minWidth = 270;
        this.maxWidth = this.platform.width() * 0.28;
        this.split.ionSplitPaneVisible
            .pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event.detail.visible; })))
            .subscribe((/**
         * @param {?} visible
         * @return {?}
         */
        function (visible) { return (_this.splitVisible = visible); }));
    }
    Object.defineProperty(FivCollapsableMenu.prototype, "myStyle", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.collapsed && this.splitVisible) {
                return (this.sanitizer
                    // tslint:disable-next-line:max-line-length
                    .bypassSecurityTrustStyle("min-width: " + this.width + "px; max-width: " + this.width + "px; --border: 0; transition: all cubic-bezier(.55,0,.1,1) 200ms;"));
            }
            else {
                if (!this.splitVisible) {
                    return (this.sanitizer
                        // tslint:disable-next-line:max-line-length
                        .bypassSecurityTrustStyle("--border: 0; transition: all cubic-bezier(.55,0,.1,1) 200ms;"));
                }
                else {
                    return (this.sanitizer
                        // tslint:disable-next-line:max-line-length
                        .bypassSecurityTrustStyle("min-width: " + this.minWidth + "px; max-width: " + this.maxWidth + "px; --border: 0; transition: all cubic-bezier(.55,0,.1,1) 200ms;"));
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FivCollapsableMenu.prototype.hover = /**
     * @return {?}
     */
    function () {
        if (this.collapsed && !this.hovering && this.hoverMenu) {
            this.open();
            this.hovering = true;
        }
    };
    /**
     * @return {?}
     */
    FivCollapsableMenu.prototype.blur = /**
     * @return {?}
     */
    function () {
        if (!this.hoverMenu) {
            return;
        }
        if (!this.collapsed && this.hovering) {
            this.close();
        }
        this.hovering = false;
    };
    Object.defineProperty(FivCollapsableMenu.prototype, "fivCollapseMenu", {
        set: /**
         * @param {?} collapse
         * @return {?}
         */
        function (collapse) {
            this.collapsed = collapse;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FivCollapsableMenu.prototype.toggleMenu = /**
     * @return {?}
     */
    function () {
        if (this.hovering) {
            this.open();
            this.hovering = false;
            return;
        }
        this.collapsed = !this.collapsed;
    };
    /**
     * @return {?}
     */
    FivCollapsableMenu.prototype.open = /**
     * @return {?}
     */
    function () {
        this.collapsed = false;
    };
    /**
     * @return {?}
     */
    FivCollapsableMenu.prototype.close = /**
     * @return {?}
     */
    function () {
        this.collapsed = true;
    };
    FivCollapsableMenu.decorators = [
        { type: Directive, args: [{
                    selector: '[fivCollapseMenu]',
                    exportAs: 'menuCollapse'
                },] }
    ];
    /** @nocollapse */
    FivCollapsableMenu.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: IonMenu, decorators: [{ type: Host }] },
        { type: IonSplitPane, decorators: [{ type: Host }, { type: Optional }] },
        { type: Platform }
    ]; };
    FivCollapsableMenu.propDecorators = {
        hoverMenu: [{ type: Input }],
        width: [{ type: Input }],
        minWidth: [{ type: Input }],
        maxWidth: [{ type: Input }],
        myStyle: [{ type: HostBinding, args: ['style',] }],
        hover: [{ type: HostListener, args: ['mouseenter',] }],
        blur: [{ type: HostListener, args: ['mouseleave',] }],
        fivCollapseMenu: [{ type: Input }]
    };
    return FivCollapsableMenu;
}());
export { FivCollapsableMenu };
if (false) {
    /** @type {?} */
    FivCollapsableMenu.prototype.collapsed;
    /** @type {?} */
    FivCollapsableMenu.prototype.hovering;
    /** @type {?} */
    FivCollapsableMenu.prototype.splitVisible;
    /** @type {?} */
    FivCollapsableMenu.prototype.hoverMenu;
    /** @type {?} */
    FivCollapsableMenu.prototype.width;
    /** @type {?} */
    FivCollapsableMenu.prototype.minWidth;
    /** @type {?} */
    FivCollapsableMenu.prototype.maxWidth;
    /**
     * @type {?}
     * @private
     */
    FivCollapsableMenu.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    FivCollapsableMenu.prototype.menu;
    /**
     * @type {?}
     * @private
     */
    FivCollapsableMenu.prototype.split;
    /**
     * @type {?}
     * @private
     */
    FivCollapsableMenu.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2FibGUtbWVudS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZml2ZXRocmVlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29sbGFwc2FibGUtbWVudS9jb2xsYXBzYWJsZS1tZW51LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakUsT0FBTyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsS0FBSyxFQUNMLFlBQVksRUFDWixJQUFJLEVBQ0osUUFBUSxFQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBYSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRSxPQUFPLEVBQU8sR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUM7SUFhRSw0QkFDVSxTQUF1QixFQUNmLElBQWEsRUFDRCxLQUFtQixFQUN2QyxRQUFrQjtRQUo1QixpQkFTQztRQVJTLGNBQVMsR0FBVCxTQUFTLENBQWM7UUFDZixTQUFJLEdBQUosSUFBSSxDQUFTO1FBQ0QsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUN2QyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBWjVCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNaLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDakIsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNYLGFBQVEsR0FBRyxHQUFHLENBQUM7UUFDZixhQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFRL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUI7YUFDM0IsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssQ0FBQyxNQUFN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a0I7O0lBQ2xCLHNDQUFpQjs7SUFDakIsMENBQXFCOztJQUNyQix1Q0FBMEI7O0lBQzFCLG1DQUFvQjs7SUFDcEIsc0NBQXdCOztJQUN4QixzQ0FBaUQ7Ozs7O0lBRy9DLHVDQUErQjs7Ozs7SUFDL0Isa0NBQTZCOzs7OztJQUM3QixtQ0FBK0M7Ozs7O0lBQy9DLHNDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBsYXRmb3JtLCBJb25NZW51LCBJb25TcGxpdFBhbmUgfSBmcm9tICdAaW9uaWMvYW5ndWxhcic7XG5pbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgSG9zdExpc3RlbmVyLFxuICBIb3N0LFxuICBPcHRpb25hbFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNhZmVTdHlsZSwgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyB0YXAsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ZpdkNvbGxhcHNlTWVudV0nLFxuICBleHBvcnRBczogJ21lbnVDb2xsYXBzZSdcbn0pXG5leHBvcnQgY2xhc3MgRml2Q29sbGFwc2FibGVNZW51IHtcbiAgY29sbGFwc2VkID0gZmFsc2U7XG4gIGhvdmVyaW5nID0gZmFsc2U7XG4gIHNwbGl0VmlzaWJsZSA9IGZhbHNlO1xuICBASW5wdXQoKSBob3Zlck1lbnUgPSB0cnVlO1xuICBASW5wdXQoKSB3aWR0aCA9IDY0O1xuICBASW5wdXQoKSBtaW5XaWR0aCA9IDI3MDtcbiAgQElucHV0KCkgbWF4V2lkdGggPSB0aGlzLnBsYXRmb3JtLndpZHRoKCkgKiAwLjI4O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsXG4gICAgQEhvc3QoKSBwcml2YXRlIG1lbnU6IElvbk1lbnUsXG4gICAgQEhvc3QoKSBAT3B0aW9uYWwoKSBwcml2YXRlIHNwbGl0OiBJb25TcGxpdFBhbmUsXG4gICAgcHJpdmF0ZSBwbGF0Zm9ybTogUGxhdGZvcm1cbiAgKSB7XG4gICAgdGhpcy5zcGxpdC5pb25TcGxpdFBhbmVWaXNpYmxlXG4gICAgICAucGlwZShtYXAoZXZlbnQgPT4gZXZlbnQuZGV0YWlsLnZpc2libGUpKVxuICAgICAgLnN1YnNjcmliZSh2aXNpYmxlID0+ICh0aGlzLnNwbGl0VmlzaWJsZSA9IHZpc2libGUpKTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnc3R5bGUnKVxuICBnZXQgbXlTdHlsZSgpOiBTYWZlU3R5bGUge1xuICAgIGlmICh0aGlzLmNvbGxhcHNlZCAmJiB0aGlzLnNwbGl0VmlzaWJsZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zYW5pdGl6ZXJcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgICAgICAgLmJ5cGFzc1NlY3VyaXR5VHJ1c3RTdHlsZShcbiAgICAgICAgICAgIGBtaW4td2lkdGg6ICR7dGhpcy53aWR0aH1weDsgbWF4LXdpZHRoOiAke3RoaXMud2lkdGh9cHg7IC0tYm9yZGVyOiAwOyB0cmFuc2l0aW9uOiBhbGwgY3ViaWMtYmV6aWVyKC41NSwwLC4xLDEpIDIwMG1zO2BcbiAgICAgICAgICApXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXRoaXMuc3BsaXRWaXNpYmxlKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgdGhpcy5zYW5pdGl6ZXJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICAgICAgICAgIC5ieXBhc3NTZWN1cml0eVRydXN0U3R5bGUoXG4gICAgICAgICAgICAgIGAtLWJvcmRlcjogMDsgdHJhbnNpdGlvbjogYWxsIGN1YmljLWJlemllciguNTUsMCwuMSwxKSAyMDBtcztgXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHRoaXMuc2FuaXRpemVyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgICAgICAgICAuYnlwYXNzU2VjdXJpdHlUcnVzdFN0eWxlKFxuICAgICAgICAgICAgICBgbWluLXdpZHRoOiAke3RoaXMubWluV2lkdGh9cHg7IG1heC13aWR0aDogJHt0aGlzLm1heFdpZHRofXB4OyAtLWJvcmRlcjogMDsgdHJhbnNpdGlvbjogYWxsIGN1YmljLWJlemllciguNTUsMCwuMSwxKSAyMDBtcztgXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VlbnRlcicpIGhvdmVyKCkge1xuICAgIGlmICh0aGlzLmNvbGxhcHNlZCAmJiAhdGhpcy5ob3ZlcmluZyAmJiB0aGlzLmhvdmVyTWVudSkge1xuICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB0aGlzLmhvdmVyaW5nID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWxlYXZlJykgYmx1cigpIHtcbiAgICBpZiAoIXRoaXMuaG92ZXJNZW51KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy5jb2xsYXBzZWQgJiYgdGhpcy5ob3ZlcmluZykge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgICB0aGlzLmhvdmVyaW5nID0gZmFsc2U7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgZml2Q29sbGFwc2VNZW51KGNvbGxhcHNlOiBib29sZWFuKSB7XG4gICAgdGhpcy5jb2xsYXBzZWQgPSBjb2xsYXBzZTtcbiAgfVxuXG4gIHRvZ2dsZU1lbnUoKSB7XG4gICAgaWYgKHRoaXMuaG92ZXJpbmcpIHtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgICAgdGhpcy5ob3ZlcmluZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNvbGxhcHNlZCA9ICF0aGlzLmNvbGxhcHNlZDtcbiAgfVxuXG4gIG9wZW4oKSB7XG4gICAgdGhpcy5jb2xsYXBzZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuY29sbGFwc2VkID0gdHJ1ZTtcbiAgfVxufVxuIl19
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var ImageService = /** @class */ (function () {
    function ImageService() {
    }
    /**
     * @param {?} imgEl
     * @return {?}
     */
    ImageService.prototype.getAverageRGB = /**
     * @param {?} imgEl
     * @return {?}
     */
    function (imgEl) {
        /** @type {?} */
        var blockSize = 5;
        /** @type {?} */
        var // only visit every 5 pixels
        defaultRGB = { r: 0, g: 0, b: 0 };
        /** @type {?} */
        var // for non-supporting envs
        canvas = document.createElement('canvas');
        /** @type {?} */
        var context = canvas.getContext && canvas.getContext('2d');
        /** @type {?} */
        var rgb = { r: 0, g: 0, b: 0 };
        /** @type {?} */
        var data;
        /** @type {?} */
        var width;
        /** @type {?} */
        var height;
        /** @type {?} */
        var length;
        /** @type {?} */
        var i = -4;
        /** @type {?} */
        var count = 0;
        if (!context) {
            return "rgb(" + defaultRGB.r + "," + defaultRGB.g + "," + defaultRGB.b + ")";
        }
        height = canvas.height =
            imgEl.naturalHeight || imgEl.offsetHeight || imgEl.height;
        width = canvas.width =
            imgEl.naturalWidth || imgEl.offsetWidth || imgEl.width;
        context.drawImage(imgEl, 0, 0);
        try {
            data = context.getImageData(0, 0, width, height);
        }
        catch (e) {
            /* security error, img on diff domain */
            return "rgb(" + defaultRGB.r + "," + defaultRGB.g + "," + defaultRGB.b + ")";
        }
        length = data.data.length;
        while ((i += blockSize * 4) < length) {
            ++count;
            rgb.r += data.data[i];
            rgb.g += data.data[i + 1];
            rgb.b += data.data[i + 2];
        }
        // ~~ used to floor values
        rgb.r = Math.floor(rgb.r / count);
        rgb.g = Math.floor(rgb.g / count);
        rgb.b = Math.floor(rgb.b / count);
        return "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
    };
    ImageService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ImageService.ctorParameters = function () { return []; };
    /** @nocollapse */ ImageService.ngInjectableDef = i0.defineInjectable({ factory: function ImageService_Factory() { return new ImageService(); }, token: ImageService, providedIn: "root" });
    return ImageService;
}());
export { ImageService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXZldGhyZWUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9nYWxsZXJ5L2ltYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTNDO0lBSUU7SUFBZSxDQUFDOzs7OztJQUVoQixvQ0FBYTs7OztJQUFiLFVBQWMsS0FBSzs7WUFDWCxTQUFTLEdBQUcsQ0FBQzs7WUFBRSw0QkFBNEI7UUFDL0MsVUFBVSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7O1lBQUUsMEJBQTBCO1FBQzdELE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQzs7WUFDekMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7O1lBQ3RELEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFOztZQUV4QixJQUFJOztZQUNOLEtBQUs7O1lBQ0wsTUFBTTs7WUFDTixNQUFNOztZQUNOLENBQUMsR0FBRyxDQUFDLENBQUM7O1lBQ04sS0FBSyxHQUFHLENBQUM7UUFFWCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTyxTQUFPLFVBQVUsQ0FBQyxDQUFDLFNBQUksVUFBVSxDQUFDLENBQUMsU0FBSSxVQUFVLENBQUMsQ0FBQyxNQUFHLENBQUM7U0FDL0Q7UUFFRCxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU07WUFDcEIsS0FBSyxDQUFDLGFBQWEsSUFBSSxLQUFLLENBQUMsWUFBWSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDNUQsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLO1lBQ2xCLEtBQUssQ0FBQyxZQUFZLElBQUksS0FBSyxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDO1FBRXpELE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUUvQixJQUFJO1lBQ0YsSUFBSSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbEQ7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLHdDQUF3QztZQUV4QyxPQUFPLFNBQU8sVUFBVSxDQUFDLENBQUMsU0FBSSxVQUFVLENBQUMsQ0FBQyxTQUFJLFVBQVUsQ0FBQyxDQUFDLE1BQUcsQ0FBQztTQUMvRDtRQUVELE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUUxQixPQUFPLENBQUMsQ0FBQyxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLEVBQUU7WUFDcEMsRUFBRSxLQUFLLENBQUM7WUFDUixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMxQixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNCO1FBRUQsMEJBQTBCO1FBQzFCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBRWxDLE9BQU8sU0FBTyxHQUFHLENBQUMsQ0FBQyxTQUFJLEdBQUcsQ0FBQyxDQUFDLFNBQUksR0FBRyxDQUFDLENBQUMsTUFBRyxDQUFDO0lBQzNDLENBQUM7O2dCQXRERixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Ozt1QkFKRDtDQXlEQyxBQXZERCxJQXVEQztTQXBEWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBJbWFnZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgZ2V0QXZlcmFnZVJHQihpbWdFbCkge1xuICAgIGNvbnN0IGJsb2NrU2l6ZSA9IDUsIC8vIG9ubHkgdmlzaXQgZXZlcnkgNSBwaXhlbHNcbiAgICAgIGRlZmF1bHRSR0IgPSB7IHI6IDAsIGc6IDAsIGI6IDAgfSwgLy8gZm9yIG5vbi1zdXBwb3J0aW5nIGVudnNcbiAgICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLFxuICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0ICYmIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLFxuICAgICAgcmdiID0geyByOiAwLCBnOiAwLCBiOiAwIH07XG5cbiAgICBsZXQgZGF0YSxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgbGVuZ3RoLFxuICAgICAgaSA9IC00LFxuICAgICAgY291bnQgPSAwO1xuXG4gICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICByZXR1cm4gYHJnYigke2RlZmF1bHRSR0Iucn0sJHtkZWZhdWx0UkdCLmd9LCR7ZGVmYXVsdFJHQi5ifSlgO1xuICAgIH1cblxuICAgIGhlaWdodCA9IGNhbnZhcy5oZWlnaHQgPVxuICAgICAgaW1nRWwubmF0dXJhbEhlaWdodCB8fCBpbWdFbC5vZmZzZXRIZWlnaHQgfHwgaW1nRWwuaGVpZ2h0O1xuICAgIHdpZHRoID0gY2FudmFzLndpZHRoID1cbiAgICAgIGltZ0VsLm5hdHVyYWxXaWR0aCB8fCBpbWdFbC5vZmZzZXRXaWR0aCB8fCBpbWdFbC53aWR0aDtcblxuICAgIGNvbnRleHQuZHJhd0ltYWdlKGltZ0VsLCAwLCAwKTtcblxuICAgIHRyeSB7XG4gICAgICBkYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogc2VjdXJpdHkgZXJyb3IsIGltZyBvbiBkaWZmIGRvbWFpbiAqL1xuXG4gICAgICByZXR1cm4gYHJnYigke2RlZmF1bHRSR0Iucn0sJHtkZWZhdWx0UkdCLmd9LCR7ZGVmYXVsdFJHQi5ifSlgO1xuICAgIH1cblxuICAgIGxlbmd0aCA9IGRhdGEuZGF0YS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKGkgKz0gYmxvY2tTaXplICogNCkgPCBsZW5ndGgpIHtcbiAgICAgICsrY291bnQ7XG4gICAgICByZ2IuciArPSBkYXRhLmRhdGFbaV07XG4gICAgICByZ2IuZyArPSBkYXRhLmRhdGFbaSArIDFdO1xuICAgICAgcmdiLmIgKz0gZGF0YS5kYXRhW2kgKyAyXTtcbiAgICB9XG5cbiAgICAvLyB+fiB1c2VkIHRvIGZsb29yIHZhbHVlc1xuICAgIHJnYi5yID0gTWF0aC5mbG9vcihyZ2IuciAvIGNvdW50KTtcbiAgICByZ2IuZyA9IE1hdGguZmxvb3IocmdiLmcgLyBjb3VudCk7XG4gICAgcmdiLmIgPSBNYXRoLmZsb29yKHJnYi5iIC8gY291bnQpO1xuXG4gICAgcmV0dXJuIGByZ2IoJHtyZ2Iucn0sJHtyZ2IuZ30sJHtyZ2IuYn0pYDtcbiAgfVxufVxuIl19
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FivOverlayService } from '../overlay/overlay.service';
import { FivDialog } from '../dialog/dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "../overlay/overlay.service";
/**
 * @record
 */
export function DialogOptions() { }
if (false) {
    /** @type {?} */
    DialogOptions.prototype.verticalAlign;
    /** @type {?} */
    DialogOptions.prototype.horizontalAlign;
    /** @type {?} */
    DialogOptions.prototype.shape;
    /** @type {?} */
    DialogOptions.prototype.backdrop;
    /** @type {?} */
    DialogOptions.prototype.duration;
}
var FivDialogService = /** @class */ (function () {
    function FivDialogService(overlay) {
        this.overlay = overlay;
    }
    /**
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    FivDialogService.prototype.openDialog = /**
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (content, options) {
        /** @type {?} */
        var c = this.overlay.createOverlay(FivDialog, content);
        c.instance.verticalAlign = options ? options.verticalAlign : 'top';
        c.instance.verticalAlign = options ? options.verticalAlign : 'center';
        c.instance.backdrop = options ? options.backdrop : true;
        c.instance.duration = options ? options.duration : 0;
        c.instance.shape = options ? options.shape : 'card';
        c.instance.open();
        return c;
    };
    FivDialogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FivDialogService.ctorParameters = function () { return [
        { type: FivOverlayService }
    ]; };
    /** @nocollapse */ FivDialogService.ngInjectableDef = i0.defineInjectable({ factory: function FivDialogService_Factory() { return new FivDialogService(i0.inject(i1.FivOverlayService)); }, token: FivDialogService, providedIn: "root" });
    return FivDialogService;
}());
export { FivDialogService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FivDialogService.prototype.overlay;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZml2ZXRocmVlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlhbG9nL2RpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBYSxNQUFNLDRCQUE0QixDQUFDO0FBQzFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7O0FBRXZELG1DQU1DOzs7SUFMQyxzQ0FBMkM7O0lBQzNDLHdDQUE2Qzs7SUFDN0MsOEJBQXVCOztJQUN2QixpQ0FBa0I7O0lBQ2xCLGlDQUFpQjs7QUFHbkI7SUFJRSwwQkFBb0IsT0FBMEI7UUFBMUIsWUFBTyxHQUFQLE9BQU8sQ0FBbUI7SUFBRyxDQUFDOzs7Ozs7SUFFbEQscUNBQVU7Ozs7O0lBQVYsVUFBVyxPQUF1QixFQUFFLE9BQXVCOztZQUNuRCxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQVksU0FBUyxFQUFFLE9BQU8sQ0FBQztRQUNuRSxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNuRSxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUN0RSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN4RCxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNwRCxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRWxCLE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQzs7Z0JBaEJGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBYlEsaUJBQWlCOzs7MkJBRDFCO0NBNkJDLEFBakJELElBaUJDO1NBZFksZ0JBQWdCOzs7Ozs7SUFDZixtQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaXZPdmVybGF5U2VydmljZSwgTmdDb250ZW50IH0gZnJvbSAnLi4vb3ZlcmxheS9vdmVybGF5LnNlcnZpY2UnO1xuaW1wb3J0IHsgRml2RGlhbG9nIH0gZnJvbSAnLi4vZGlhbG9nL2RpYWxvZy5jb21wb25lbnQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpYWxvZ09wdGlvbnMge1xuICB2ZXJ0aWNhbEFsaWduOiAnYm90dG9tJyB8ICdjZW50ZXInIHwgJ3RvcCc7XG4gIGhvcml6b250YWxBbGlnbjogJ2xlZnQnIHwgJ2NlbnRlcicgfCAncmlnaHQnO1xuICBzaGFwZTogJ2NhcmQnIHwgJ2ZpbGwnO1xuICBiYWNrZHJvcDogYm9vbGVhbjtcbiAgZHVyYXRpb246IG51bWJlcjtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRml2RGlhbG9nU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3ZlcmxheTogRml2T3ZlcmxheVNlcnZpY2UpIHt9XG5cbiAgb3BlbkRpYWxvZyhjb250ZW50OiBOZ0NvbnRlbnQ8YW55Piwgb3B0aW9ucz86IERpYWxvZ09wdGlvbnMpIHtcbiAgICBjb25zdCBjID0gdGhpcy5vdmVybGF5LmNyZWF0ZU92ZXJsYXk8Rml2RGlhbG9nPihGaXZEaWFsb2csIGNvbnRlbnQpO1xuICAgIGMuaW5zdGFuY2UudmVydGljYWxBbGlnbiA9IG9wdGlvbnMgPyBvcHRpb25zLnZlcnRpY2FsQWxpZ24gOiAndG9wJztcbiAgICBjLmluc3RhbmNlLnZlcnRpY2FsQWxpZ24gPSBvcHRpb25zID8gb3B0aW9ucy52ZXJ0aWNhbEFsaWduIDogJ2NlbnRlcic7XG4gICAgYy5pbnN0YW5jZS5iYWNrZHJvcCA9IG9wdGlvbnMgPyBvcHRpb25zLmJhY2tkcm9wIDogdHJ1ZTtcbiAgICBjLmluc3RhbmNlLmR1cmF0aW9uID0gb3B0aW9ucyA/IG9wdGlvbnMuZHVyYXRpb24gOiAwO1xuICAgIGMuaW5zdGFuY2Uuc2hhcGUgPSBvcHRpb25zID8gb3B0aW9ucy5zaGFwZSA6ICdjYXJkJztcbiAgICBjLmluc3RhbmNlLm9wZW4oKTtcblxuICAgIHJldHVybiBjO1xuICB9XG59XG4iXX0=
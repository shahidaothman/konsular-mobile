/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, ViewChild } from '@angular/core';
import { animate, style, transition, trigger, AnimationBuilder } from '@angular/animations';
import { timer } from 'rxjs';
import { FivLoadingService } from './loading.service';
var FivLoadingProgressBar = /** @class */ (function () {
    function FivLoadingProgressBar(loadingService, builder) {
        this.loadingService = loadingService;
        this.builder = builder;
        this.loading = false;
        this.global = false;
        this.isComplete = false;
        this.progress = 0;
        this.verticalAlign = 'top';
        this.fivComplete = new EventEmitter();
        this.fivDoneShrinking = new EventEmitter();
        this.fivRefresh = new EventEmitter();
        this.animating = false;
    }
    /**
     * @return {?}
     */
    FivLoadingProgressBar.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.global) {
            this.loadingService.completeChange.subscribe((/**
             * @param {?} isComplete
             * @return {?}
             */
            function (isComplete) {
                if (isComplete) {
                    _this.complete(null);
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    FivLoadingProgressBar.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.global) {
            this.loadingService.completeChange.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    FivLoadingProgressBar.prototype.toggleSpinner = /**
     * @return {?}
     */
    function () {
        this.loading = !this.loading;
    };
    /**
     * @return {?}
     */
    FivLoadingProgressBar.prototype.load = /**
     * @return {?}
     */
    function () {
        this.loading = true;
        this.fivRefresh.emit(this);
    };
    /**
     * @return {?}
     */
    FivLoadingProgressBar.prototype.unload = /**
     * @return {?}
     */
    function () {
        this.loading = false;
        if (this.isComplete) {
            this.isComplete = false;
        }
    };
    /**
     * @param {?=} param
     * @return {?}
     */
    FivLoadingProgressBar.prototype.complete = /**
     * @param {?=} param
     * @return {?}
     */
    function (param) {
        this.param = param;
        this.isComplete = true;
        this.fillIn(850);
    };
    /**
     * @param {?} isComplete
     * @return {?}
     */
    FivLoadingProgressBar.prototype.fillAnimationComplete = /**
     * @param {?} isComplete
     * @return {?}
     */
    function (isComplete) {
        if (isComplete) {
            this.fivComplete.emit(this.param);
            this.isComplete = false;
            this.param = null;
            if (this.global) {
                this.loadingService.unload();
            }
            else {
                this.unload();
            }
        }
    };
    /**
     * @param {?} progress
     * @return {?}
     */
    FivLoadingProgressBar.prototype.setProgress = /**
     * @param {?} progress
     * @return {?}
     */
    function (progress) {
        if (progress < 0) {
            this.progress = 0;
            return;
        }
        if (progress > 100) {
            this.progress = 100;
            return;
        }
        this.progress = progress;
    };
    /**
     * @param {?} ms
     * @return {?}
     */
    FivLoadingProgressBar.prototype.fillIn = /**
     * @param {?} ms
     * @return {?}
     */
    function (ms) {
        var _this = this;
        // first define a reusable animation
        this.progress = 0;
        /** @type {?} */
        var myAnimation = this.builder.build([
            style({ width: this.progress + "%" }),
            animate(ms, style({ width: '100%' }))
        ]);
        // use the returned factory object to create a player
        /** @type {?} */
        var player = myAnimation.create(this.linear.nativeElement);
        /** @type {?} */
        var t = timer(0, ms / 100).subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.progress <= 0) {
                return t.unsubscribe();
            }
            _this.progress++;
        }));
        player.play();
        player.onDone((/**
         * @return {?}
         */
        function () {
            if (_this.animating) {
                _this.fillAnimationComplete(true);
                _this.stopProgressAnimation();
            }
        }));
        this.stopProgressAnimation();
        this.animating = true;
        this._progressPlayer = player;
    };
    /**
     * @param {?} ms
     * @return {?}
     */
    FivLoadingProgressBar.prototype.shrinkIn = /**
     * @param {?} ms
     * @return {?}
     */
    function (ms) {
        var _this = this;
        // first define a reusable animation
        this.progress = 100;
        /** @type {?} */
        var myAnimation = this.builder.build([
            style({ width: this.progress + "%" }),
            animate(ms, style({ width: 0 }))
        ]);
        // use the returned factory object to create a player
        /** @type {?} */
        var player = myAnimation.create(this.linear.nativeElement);
        /** @type {?} */
        var t = timer(0, ms / 100).subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.progress <= 0) {
                return t.unsubscribe();
            }
            _this.progress--;
        }));
        player.play();
        player.onDone((/**
         * @return {?}
         */
        function () {
            if (_this.animating) {
                _this.fivDoneShrinking.emit(true);
                _this.stopProgressAnimation();
            }
        }));
        this.stopProgressAnimation();
        this.animating = true;
        this._progressPlayer = player;
    };
    /**
     * @return {?}
     */
    FivLoadingProgressBar.prototype.stopProgressAnimation = /**
     * @return {?}
     */
    function () {
        if (this._progressPlayer) {
            this._progressPlayer.destroy();
            this._progressPlayer = null;
            this.animating = false;
        }
    };
    FivLoadingProgressBar.decorators = [
        { type: Component, args: [{
                    selector: 'fiv-loading-progress-bar',
                    template: "<div [@progressAnim] *ngIf=\"(!global && loading) || (global && loadingService.loading)\" class=\"slider\" [ngClass]=\"{'top':verticalAlign == 'top','bottom': verticalAlign == 'bottom'}\" >\n  <div class=\"line\"></div>\n  <div *ngIf=\"!isComplete\" class=\"subline inc\"></div>\n  <!-- <div *ngIf=\"isComplete\" [@fillAnim] (@fillAnim.done)=\"fillAnimationComplete(isComplete)\" class=\"subline fill\"></div> -->\n  <div *ngIf=\"!isComplete\" class=\"subline dec\"></div>\n</div>\n<div #linear [@progressAnimLinear] class=\"progress\"  [ngClass]=\"{'top':verticalAlign == 'top','bottom': verticalAlign == 'bottom'}\" ></div>\n",
                    animations: [
                        trigger('progressAnim', [
                            transition('void => *', [
                                style({ height: '0px' }),
                                animate('250ms ease-out')
                            ]),
                            transition('* => void', [
                                animate('299ms ease-in', style({ height: '0px' }))
                            ])
                        ]),
                        trigger('progressAnimLinear', [
                            transition('void => *', [
                                style({ height: '0px' }),
                                animate('65ms ease-out')
                            ]),
                            transition('* => void', [
                                animate('299ms ease-in', style({ height: '0px' }))
                            ])
                        ]),
                        trigger('fillAnim', [
                            transition('void => *', [
                                style({
                                    width: '0px'
                                }),
                                animate('850ms ease-out', style({ width: '100%' }))
                            ])
                        ])
                    ],
                    styles: [":host{--background-progress-bar:var(--ion-color-primary);--color-spin-0:var(--ion-color-primary-shade);--color-spin-25:var(--ion-color-primary-shade);--color-spin-50:var(--ion-color-primary-shade);--color-spin-75:var(--ion-color-primary-shade);--color-spin-100:var(--ion-color-primary-shade)}.slider{position:absolute;width:100%;height:5px;overflow-x:hidden;z-index:5000}.progress{position:absolute;height:5px;width:0;overflow-x:hidden;z-index:5000;background:var(--background-progress-bar);transition:240ms}.line{position:absolute;opacity:.4;width:240%;height:5px;-webkit-animation:5.6s ease-in-out infinite colorspin;animation:5.6s ease-in-out infinite colorspin}.subline{position:absolute;height:5px;background:inherit}.inc{-webkit-animation:1.6s infinite increase,5.6s ease-in-out infinite colorspin;animation:1.6s infinite increase,5.6s ease-in-out infinite colorspin}.dec{-webkit-animation:1.6s .4s infinite decrease,5.6s ease-in-out infinite colorspin;animation:1.6s .4s infinite decrease,5.6s ease-in-out infinite colorspin}.fill{left:0;width:100%;-webkit-animation:5.6s ease-in-out infinite colorspin;animation:5.6s ease-in-out infinite colorspin}@-webkit-keyframes increase{from{left:-5%;width:5%}to{left:130%;width:100%}}@keyframes increase{from{left:-5%;width:5%}to{left:130%;width:100%}}@-webkit-keyframes decrease{from{left:-80%;width:80%}to{left:110%;width:10%}}@keyframes decrease{from{left:-80%;width:80%}to{left:110%;width:10%}}@-webkit-keyframes colorspin{0%{background-color:var(--color-spin-0)}25%{background-color:var(--color-spin-25)}50%{background-color:var(--color-spin-50)}75%{background-color:var(--color-spin-75)}100%{background-color:var(--color-spin-100)}}@keyframes colorspin{0%{background-color:var(--color-spin-0)}25%{background-color:var(--color-spin-25)}50%{background-color:var(--color-spin-50)}75%{background-color:var(--color-spin-75)}100%{background-color:var(--color-spin-100)}}.top{top:0;left:0}.bottom{bottom:0;left:0}"]
                }] }
    ];
    /** @nocollapse */
    FivLoadingProgressBar.ctorParameters = function () { return [
        { type: FivLoadingService },
        { type: AnimationBuilder }
    ]; };
    FivLoadingProgressBar.propDecorators = {
        loading: [{ type: Input }],
        global: [{ type: Input }],
        isComplete: [{ type: Input }],
        verticalAlign: [{ type: Input }],
        fivComplete: [{ type: Output }],
        fivDoneShrinking: [{ type: Output }],
        fivRefresh: [{ type: Output }],
        bar: [{ type: ViewChild, args: ['bar',] }],
        linear: [{ type: ViewChild, args: ['linear',] }]
    };
    return FivLoadingProgressBar;
}());
export { FivLoadingProgressBar };
if (false) {
    /** @type {?} */
    FivLoadingProgressBar.prototype.loading;
    /** @type {?} */
    FivLoadingProgressBar.prototype.global;
    /** @type {?} */
    FivLoadingProgressBar.prototype.isComplete;
    /** @type {?} */
    FivLoadingProgressBar.prototype.progress;
    /** @type {?} */
    FivLoadingProgressBar.prototype.verticalAlign;
    /** @type {?} */
    FivLoadingProgressBar.prototype.fivComplete;
    /** @type {?} */
    FivLoadingProgressBar.prototype.fivDoneShrinking;
    /** @type {?} */
    FivLoadingProgressBar.prototype.fivRefresh;
    /** @type {?} */
    FivLoadingProgressBar.prototype.bar;
    /** @type {?} */
    FivLoadingProgressBar.prototype.linear;
    /** @type {?} */
    FivLoadingProgressBar.prototype.param;
    /** @type {?} */
    FivLoadingProgressBar.prototype._progressPlayer;
    /**
     * @type {?}
     * @private
     */
    FivLoadingProgressBar.prototype.animating;
    /** @type {?} */
    FivLoadingProgressBar.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    FivLoadingProgressBar.prototype.builder;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1wcm9ncmVzcy1iYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpdmV0aHJlZS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2xvYWRpbmctcHJvZ3Jlc3MtYmFyL2xvYWRpbmctcHJvZ3Jlc3MtYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFHVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixVQUFVLEVBQ1YsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDTCxPQUFPLEVBQ1AsS0FBSyxFQUNMLFVBQVUsRUFDVixPQUFPLEVBQ1AsZ0JBQWdCLEVBRWpCLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUV0RDtJQXVERSwrQkFDUyxjQUFpQyxFQUNoQyxPQUF5QjtRQUQxQixtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFDaEMsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUF2QjFCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUNmLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFDNUIsYUFBUSxHQUFHLENBQUMsQ0FBQztRQUNKLGtCQUFhLEdBQXFCLEtBQUssQ0FBQztRQUN2QyxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3pELHFCQUFnQixHQUEwQixJQUFJLFlBQVksRUFFakUsQ0FBQztRQUNNLGVBQVUsR0FBd0MsSUFBSSxZQUFZLEVBRXpFLENBQUM7UUFRSSxjQUFTLEdBQUcsS0FBSyxDQUFDO0lBS3ZCLENBQUM7Ozs7SUFFSix3Q0FBUTs7O0lBQVI7UUFBQSxpQkFRQztRQVBDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLFNBQVM7Ozs7WUFBQyxVQUFBLFVBQVU7Z0JBQ3JELElBQUksVUFBVSxFQUFFO29CQUNkLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3JCO1lBQ0gsQ0FBQyxFQUFDLENBQUM7U0FDSjtJQUNILENBQUM7Ozs7SUFFRCwyQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNsRDtJQUNILENBQUM7Ozs7SUFFRCw2Q0FBYTs7O0lBQWI7UUFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUMvQixDQUFDOzs7O0lBRUQsb0NBQUk7OztJQUFKO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELHNDQUFNOzs7SUFBTjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztTQUN6QjtJQUNILENBQUM7Ozs7O0lBRUQsd0NBQVE7Ozs7SUFBUixVQUFTLEtBQVc7UUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDOzs7OztJQUVELHFEQUFxQjs7OztJQUFyQixVQUFzQixVQUFtQjtRQUN2QyxJQUFJLFVBQVUsRUFBRTtZQUNkLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztZQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNsQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUM5QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDZjtTQUNGO0lBQ0gsQ0FBQzs7Ozs7SUFFRCwyQ0FBVzs7OztJQUFYLFVBQVksUUFBUTtRQUNsQixJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7WUFDbEIsT0FBTztTQUNSO1FBQ0QsSUFBSSxRQUFRLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1lBQ3BCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRUQsc0NBQU07Ozs7SUFBTixVQUFPLEVBQVU7UUFBakIsaUJBNkJDO1FBNUJDLG9DQUFvQztRQUNwQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQzs7WUFDWixXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDckMsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFLLElBQUksQ0FBQyxRQUFRLE1BQUcsRUFBRSxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDdEMsQ0FBQzs7O1lBR0ksTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBRXRELENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxTQUFTOzs7UUFBQztZQUNyQyxJQUFJLEtBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxFQUFFO2dCQUN0QixPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUN4QjtZQUNELEtBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsQixDQUFDLEVBQUM7UUFFRixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxNQUFNLENBQUMsTUFBTTs7O1FBQUM7WUFDWixJQUFJLEtBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLEtBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDakMsS0FBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7YUFDOUI7UUFDSCxDQUFDLEVBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBRXRCLElBQUksQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRUQsd0NBQVE7Ozs7SUFBUixVQUFTLEVBQVU7UUFBbkIsaUJBNkJDO1FBNUJDLG9DQUFvQztRQUNwQyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQzs7WUFDZCxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDckMsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFLLElBQUksQ0FBQyxRQUFRLE1BQUcsRUFBRSxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDakMsQ0FBQzs7O1lBR0ksTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBRXRELENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxTQUFTOzs7UUFBQztZQUNyQyxJQUFJLEtBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxFQUFFO2dCQUN0QixPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUN4QjtZQUNELEtBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsQixDQUFDLEVBQUM7UUFFRixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxNQUFNLENBQUMsTUFBTTs7O1FBQUM7WUFDWixJQUFJLEtBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2pDLEtBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO2FBQzlCO1FBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDSCxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUV0QixJQUFJLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQscURBQXFCOzs7SUFBckI7UUFDRSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztZQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztTQUN4QjtJQUNILENBQUM7O2dCQS9MRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDBCQUEwQjtvQkFDcEMsK25CQUFvRDtvQkFFcEQsVUFBVSxFQUFFO3dCQUNWLE9BQU8sQ0FBQyxjQUFjLEVBQUU7NEJBQ3RCLFVBQVUsQ0FBQyxXQUFXLEVBQUU7Z0NBQ3RCLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztnQ0FDeEIsT0FBTyxDQUFDLGdCQUFnQixDQUFDOzZCQUMxQixDQUFDOzRCQUNGLFVBQVUsQ0FBQyxXQUFXLEVBQUU7Z0NBQ3RCLE9BQU8sQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7NkJBQ25ELENBQUM7eUJBQ0gsQ0FBQzt3QkFDRixPQUFPLENBQUMsb0JBQW9CLEVBQUU7NEJBQzVCLFVBQVUsQ0FBQyxXQUFXLEVBQUU7Z0NBQ3RCLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztnQ0FDeEIsT0FBTyxDQUFDLGVBQWUsQ0FBQzs2QkFDekIsQ0FBQzs0QkFDRixVQUFVLENBQUMsV0FBVyxFQUFFO2dDQUN0QixPQUFPLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDOzZCQUNuRCxDQUFDO3lCQUNILENBQUM7d0JBQ0YsT0FBTyxDQUFDLFVBQVUsRUFBRTs0QkFDbEIsVUFBVSxDQUFDLFdBQVcsRUFBRTtnQ0FDdEIsS0FBSyxDQUFDO29DQUNKLEtBQUssRUFBRSxLQUFLO2lDQUNiLENBQUM7Z0NBQ0YsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDOzZCQUNwRCxDQUFDO3lCQUNILENBQUM7cUJBQ0g7O2lCQUNGOzs7O2dCQWxDUSxpQkFBaUI7Z0JBSnhCLGdCQUFnQjs7OzBCQXdDZixLQUFLO3lCQUNMLEtBQUs7NkJBQ0wsS0FBSztnQ0FFTCxLQUFLOzhCQUNMLE1BQU07bUNBQ04sTUFBTTs2QkFHTixNQUFNO3NCQUlOLFNBQVMsU0FBQyxLQUFLO3lCQUNmLFNBQVMsU0FBQyxRQUFROztJQWdKckIsNEJBQUM7Q0FBQSxBQWhNRCxJQWdNQztTQS9KWSxxQkFBcUI7OztJQUNoQyx3Q0FBeUI7O0lBQ3pCLHVDQUF3Qjs7SUFDeEIsMkNBQTRCOztJQUM1Qix5Q0FBYTs7SUFDYiw4Q0FBaUQ7O0lBQ2pELDRDQUFtRTs7SUFDbkUsaURBRUk7O0lBQ0osMkNBRUk7O0lBRUosb0NBQWtDOztJQUNsQyx1Q0FBd0M7O0lBRXhDLHNDQUFXOztJQUVYLGdEQUFpQzs7Ozs7SUFDakMsMENBQTBCOztJQUd4QiwrQ0FBd0M7Ozs7O0lBQ3hDLHdDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBPbkRlc3Ryb3ksXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgRWxlbWVudFJlZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgYW5pbWF0ZSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG4gIEFuaW1hdGlvbkJ1aWxkZXIsXG4gIEFuaW1hdGlvblBsYXllclxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IHRpbWVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGaXZMb2FkaW5nU2VydmljZSB9IGZyb20gJy4vbG9hZGluZy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZml2LWxvYWRpbmctcHJvZ3Jlc3MtYmFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xvYWRpbmctcHJvZ3Jlc3MtYmFyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbG9hZGluZy1wcm9ncmVzcy1iYXIuY29tcG9uZW50LnNjc3MnXSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ3Byb2dyZXNzQW5pbScsIFtcbiAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gKicsIFtcbiAgICAgICAgc3R5bGUoeyBoZWlnaHQ6ICcwcHgnIH0pLFxuICAgICAgICBhbmltYXRlKCcyNTBtcyBlYXNlLW91dCcpXG4gICAgICBdKSxcbiAgICAgIHRyYW5zaXRpb24oJyogPT4gdm9pZCcsIFtcbiAgICAgICAgYW5pbWF0ZSgnMjk5bXMgZWFzZS1pbicsIHN0eWxlKHsgaGVpZ2h0OiAnMHB4JyB9KSlcbiAgICAgIF0pXG4gICAgXSksXG4gICAgdHJpZ2dlcigncHJvZ3Jlc3NBbmltTGluZWFyJywgW1xuICAgICAgdHJhbnNpdGlvbigndm9pZCA9PiAqJywgW1xuICAgICAgICBzdHlsZSh7IGhlaWdodDogJzBweCcgfSksXG4gICAgICAgIGFuaW1hdGUoJzY1bXMgZWFzZS1vdXQnKVxuICAgICAgXSksXG4gICAgICB0cmFuc2l0aW9uKCcqID0+IHZvaWQnLCBbXG4gICAgICAgIGFuaW1hdGUoJzI5OW1zIGVhc2UtaW4nLCBzdHlsZSh7IGhlaWdodDogJzBweCcgfSkpXG4gICAgICBdKVxuICAgIF0pLFxuICAgIHRyaWdnZXIoJ2ZpbGxBbmltJywgW1xuICAgICAgdHJhbnNpdGlvbigndm9pZCA9PiAqJywgW1xuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgd2lkdGg6ICcwcHgnXG4gICAgICAgIH0pLFxuICAgICAgICBhbmltYXRlKCc4NTBtcyBlYXNlLW91dCcsIHN0eWxlKHsgd2lkdGg6ICcxMDAlJyB9KSlcbiAgICAgIF0pXG4gICAgXSlcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBGaXZMb2FkaW5nUHJvZ3Jlc3NCYXIgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGxvYWRpbmcgPSBmYWxzZTtcbiAgQElucHV0KCkgZ2xvYmFsID0gZmFsc2U7XG4gIEBJbnB1dCgpIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgcHJvZ3Jlc3MgPSAwO1xuICBASW5wdXQoKSB2ZXJ0aWNhbEFsaWduOiAndG9wJyB8ICdib3R0b20nID0gJ3RvcCc7XG4gIEBPdXRwdXQoKSBmaXZDb21wbGV0ZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIGZpdkRvbmVTaHJpbmtpbmc6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXI8XG4gICAgYm9vbGVhblxuICA+KCk7XG4gIEBPdXRwdXQoKSBmaXZSZWZyZXNoOiBFdmVudEVtaXR0ZXI8Rml2TG9hZGluZ1Byb2dyZXNzQmFyPiA9IG5ldyBFdmVudEVtaXR0ZXI8XG4gICAgRml2TG9hZGluZ1Byb2dyZXNzQmFyXG4gID4oKTtcblxuICBAVmlld0NoaWxkKCdiYXInKSBiYXI6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2xpbmVhcicpIGxpbmVhcjogRWxlbWVudFJlZjtcblxuICBwYXJhbTogYW55O1xuXG4gIF9wcm9ncmVzc1BsYXllcjogQW5pbWF0aW9uUGxheWVyO1xuICBwcml2YXRlIGFuaW1hdGluZyA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBsb2FkaW5nU2VydmljZTogRml2TG9hZGluZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBidWlsZGVyOiBBbmltYXRpb25CdWlsZGVyXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5nbG9iYWwpIHtcbiAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuY29tcGxldGVDaGFuZ2Uuc3Vic2NyaWJlKGlzQ29tcGxldGUgPT4ge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSkge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmdsb2JhbCkge1xuICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5jb21wbGV0ZUNoYW5nZS51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZVNwaW5uZXIoKSB7XG4gICAgdGhpcy5sb2FkaW5nID0gIXRoaXMubG9hZGluZztcbiAgfVxuXG4gIGxvYWQoKSB7XG4gICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmZpdlJlZnJlc2guZW1pdCh0aGlzKTtcbiAgfVxuXG4gIHVubG9hZCgpIHtcbiAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5pc0NvbXBsZXRlKSB7XG4gICAgICB0aGlzLmlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBjb21wbGV0ZShwYXJhbT86IGFueSkge1xuICAgIHRoaXMucGFyYW0gPSBwYXJhbTtcbiAgICB0aGlzLmlzQ29tcGxldGUgPSB0cnVlO1xuICAgIHRoaXMuZmlsbEluKDg1MCk7XG4gIH1cblxuICBmaWxsQW5pbWF0aW9uQ29tcGxldGUoaXNDb21wbGV0ZTogYm9vbGVhbikge1xuICAgIGlmIChpc0NvbXBsZXRlKSB7XG4gICAgICB0aGlzLmZpdkNvbXBsZXRlLmVtaXQodGhpcy5wYXJhbSk7XG4gICAgICB0aGlzLmlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgIHRoaXMucGFyYW0gPSBudWxsO1xuICAgICAgaWYgKHRoaXMuZ2xvYmFsKSB7XG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UudW5sb2FkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVubG9hZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldFByb2dyZXNzKHByb2dyZXNzKSB7XG4gICAgaWYgKHByb2dyZXNzIDwgMCkge1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwcm9ncmVzcyA+IDEwMCkge1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IDEwMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wcm9ncmVzcyA9IHByb2dyZXNzO1xuICB9XG5cbiAgZmlsbEluKG1zOiBudW1iZXIpIHtcbiAgICAvLyBmaXJzdCBkZWZpbmUgYSByZXVzYWJsZSBhbmltYXRpb25cbiAgICB0aGlzLnByb2dyZXNzID0gMDtcbiAgICBjb25zdCBteUFuaW1hdGlvbiA9IHRoaXMuYnVpbGRlci5idWlsZChbXG4gICAgICBzdHlsZSh7IHdpZHRoOiBgJHt0aGlzLnByb2dyZXNzfSVgIH0pLFxuICAgICAgYW5pbWF0ZShtcywgc3R5bGUoeyB3aWR0aDogJzEwMCUnIH0pKVxuICAgIF0pO1xuXG4gICAgLy8gdXNlIHRoZSByZXR1cm5lZCBmYWN0b3J5IG9iamVjdCB0byBjcmVhdGUgYSBwbGF5ZXJcbiAgICBjb25zdCBwbGF5ZXIgPSBteUFuaW1hdGlvbi5jcmVhdGUodGhpcy5saW5lYXIubmF0aXZlRWxlbWVudCk7XG5cbiAgICBjb25zdCB0ID0gdGltZXIoMCwgbXMgLyAxMDApLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wcm9ncmVzcyA8PSAwKSB7XG4gICAgICAgIHJldHVybiB0LnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLnByb2dyZXNzKys7XG4gICAgfSk7XG5cbiAgICBwbGF5ZXIucGxheSgpO1xuICAgIHBsYXllci5vbkRvbmUoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuYW5pbWF0aW5nKSB7XG4gICAgICAgIHRoaXMuZmlsbEFuaW1hdGlvbkNvbXBsZXRlKHRydWUpO1xuICAgICAgICB0aGlzLnN0b3BQcm9ncmVzc0FuaW1hdGlvbigpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc3RvcFByb2dyZXNzQW5pbWF0aW9uKCk7XG4gICAgdGhpcy5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgdGhpcy5fcHJvZ3Jlc3NQbGF5ZXIgPSBwbGF5ZXI7XG4gIH1cblxuICBzaHJpbmtJbihtczogbnVtYmVyKSB7XG4gICAgLy8gZmlyc3QgZGVmaW5lIGEgcmV1c2FibGUgYW5pbWF0aW9uXG4gICAgdGhpcy5wcm9ncmVzcyA9IDEwMDtcbiAgICBjb25zdCBteUFuaW1hdGlvbiA9IHRoaXMuYnVpbGRlci5idWlsZChbXG4gICAgICBzdHlsZSh7IHdpZHRoOiBgJHt0aGlzLnByb2dyZXNzfSVgIH0pLFxuICAgICAgYW5pbWF0ZShtcywgc3R5bGUoeyB3aWR0aDogMCB9KSlcbiAgICBdKTtcblxuICAgIC8vIHVzZSB0aGUgcmV0dXJuZWQgZmFjdG9yeSBvYmplY3QgdG8gY3JlYXRlIGEgcGxheWVyXG4gICAgY29uc3QgcGxheWVyID0gbXlBbmltYXRpb24uY3JlYXRlKHRoaXMubGluZWFyLm5hdGl2ZUVsZW1lbnQpO1xuXG4gICAgY29uc3QgdCA9IHRpbWVyKDAsIG1zIC8gMTAwKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMucHJvZ3Jlc3MgPD0gMCkge1xuICAgICAgICByZXR1cm4gdC51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5wcm9ncmVzcy0tO1xuICAgIH0pO1xuXG4gICAgcGxheWVyLnBsYXkoKTtcbiAgICBwbGF5ZXIub25Eb25lKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmFuaW1hdGluZykge1xuICAgICAgICB0aGlzLmZpdkRvbmVTaHJpbmtpbmcuZW1pdCh0cnVlKTtcbiAgICAgICAgdGhpcy5zdG9wUHJvZ3Jlc3NBbmltYXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnN0b3BQcm9ncmVzc0FuaW1hdGlvbigpO1xuICAgIHRoaXMuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgIHRoaXMuX3Byb2dyZXNzUGxheWVyID0gcGxheWVyO1xuICB9XG5cbiAgc3RvcFByb2dyZXNzQW5pbWF0aW9uKCkge1xuICAgIGlmICh0aGlzLl9wcm9ncmVzc1BsYXllcikge1xuICAgICAgdGhpcy5fcHJvZ3Jlc3NQbGF5ZXIuZGVzdHJveSgpO1xuICAgICAgdGhpcy5fcHJvZ3Jlc3NQbGF5ZXIgPSBudWxsO1xuICAgICAgdGhpcy5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
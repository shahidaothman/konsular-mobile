/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FivGalleryImage } from '../gallery/gallery-image/gallery-image.component';
import { Directive, Input, EventEmitter, Output, Host, Self, Optional, ElementRef } from '@angular/core';
var FivLazyImage = /** @class */ (function () {
    function FivLazyImage(fivImage, image) {
        this.fivImage = fivImage;
        this.image = image;
        this.virtual = false;
        this.inViewport = false;
        this.willShow = new EventEmitter();
        this.willHide = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FivLazyImage.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var io = new IntersectionObserver((/**
         * @param {?} entries
         * @param {?} observer
         * @return {?}
         */
        function (entries, observer) {
            entries.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            function (entry) {
                if (entry.isIntersecting) {
                    if (!_this.inViewport) {
                        _this.handleIntersection();
                        if (!_this.virtual) {
                            io.disconnect();
                        }
                    }
                }
                else {
                    if (_this.inViewport) {
                        _this.inViewport = false;
                        if (_this.fivImage) {
                            _this.willHide.emit(_this.fivImage);
                        }
                        else {
                            _this.willHide.emit(_this.image.nativeElement);
                        }
                    }
                }
            }));
        }));
        io['POLL_INTERVAL'] = 100;
        if (this.fivImage) {
            io.observe(this.fivImage.image.nativeElement);
        }
        else {
            io.observe(this.image.nativeElement);
        }
    };
    /**
     * @return {?}
     */
    FivLazyImage.prototype.handleIntersection = /**
     * @return {?}
     */
    function () {
        this.inViewport = true;
        if (this.fivLazyImage) {
            if (this.fivImage) {
                this.fivImage.src = this.fivLazyImage;
                this.willShow.emit(this.fivImage);
            }
            else {
                this.image.nativeElement.src = this.fivLazyImage;
                this.willShow.emit(this.image.nativeElement);
            }
        }
        else {
            this.willShow.emit(this.fivImage || this.image.nativeElement);
        }
    };
    FivLazyImage.decorators = [
        { type: Directive, args: [{
                    selector: '[fivLazyImage]'
                },] }
    ];
    /** @nocollapse */
    FivLazyImage.ctorParameters = function () { return [
        { type: FivGalleryImage, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
        { type: ElementRef }
    ]; };
    FivLazyImage.propDecorators = {
        fivLazyImage: [{ type: Input }],
        virtual: [{ type: Input }],
        willShow: [{ type: Output }],
        willHide: [{ type: Output }]
    };
    return FivLazyImage;
}());
export { FivLazyImage };
if (false) {
    /** @type {?} */
    FivLazyImage.prototype.fivLazyImage;
    /** @type {?} */
    FivLazyImage.prototype.virtual;
    /** @type {?} */
    FivLazyImage.prototype.inViewport;
    /** @type {?} */
    FivLazyImage.prototype.willShow;
    /** @type {?} */
    FivLazyImage.prototype.willHide;
    /** @type {?} */
    FivLazyImage.prototype.fivImage;
    /** @type {?} */
    FivLazyImage.prototype.image;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1pbWFnZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZml2ZXRocmVlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvbGF6eS1pbWFnZS9sYXp5LWltYWdlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ25GLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUNMLFlBQVksRUFDWixNQUFNLEVBQ04sSUFBSSxFQUNKLElBQUksRUFDSixRQUFRLEVBQ1IsVUFBVSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBRXZCO0lBVUUsc0JBQ3FDLFFBQXlCLEVBQ3JELEtBQWlCO1FBRFcsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFDckQsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQVBqQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFDVCxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQXNDLENBQUM7UUFDbEUsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFzQyxDQUFDO0lBS3pFLENBQUM7Ozs7SUFFSiwrQkFBUTs7O0lBQVI7UUFBQSxpQkE0QkM7O1lBM0JPLEVBQUUsR0FBRyxJQUFJLG9CQUFvQjs7Ozs7UUFBQyxVQUFDLE9BQU8sRUFBRSxRQUFRO1lBQ3BELE9BQU8sQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxLQUFLO2dCQUNuQixJQUFJLEtBQUssQ0FBQyxjQUFjLEVBQUU7b0JBQ3hCLElBQUksQ0FBQyxLQUFJLENBQUMsVUFBVSxFQUFFO3dCQUNwQixLQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQzt3QkFDMUIsSUFBSSxDQUFDLEtBQUksQ0FBQyxPQUFPLEVBQUU7NEJBQ2pCLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQzt5QkFDakI7cUJBQ0Y7aUJBQ0Y7cUJBQU07b0JBQ0wsSUFBSSxLQUFJLENBQUMsVUFBVSxFQUFFO3dCQUNuQixLQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQzt3QkFDeEIsSUFBSSxLQUFJLENBQUMsUUFBUSxFQUFFOzRCQUNqQixLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7eUJBQ25DOzZCQUFNOzRCQUNMLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7eUJBQzlDO3FCQUNGO2lCQUNGO1lBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUM7UUFDRixFQUFFLENBQUMsZUFBZSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzFCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQy9DO2FBQU07WUFDTCxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDdEM7SUFDSCxDQUFDOzs7O0lBQ0QseUNBQWtCOzs7SUFBbEI7UUFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO2dCQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDbkM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7Z0JBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDOUM7U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQy9EO0lBQ0gsQ0FBQzs7Z0JBekRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUMzQjs7OztnQkFmUSxlQUFlLHVCQXdCbkIsSUFBSSxZQUFJLElBQUksWUFBSSxRQUFRO2dCQWQzQixVQUFVOzs7K0JBT1QsS0FBSzswQkFDTCxLQUFLOzJCQUVMLE1BQU07MkJBQ04sTUFBTTs7SUFrRFQsbUJBQUM7Q0FBQSxBQTFERCxJQTBEQztTQXZEWSxZQUFZOzs7SUFDdkIsb0NBQThCOztJQUM5QiwrQkFBeUI7O0lBQ3pCLGtDQUFtQjs7SUFDbkIsZ0NBQTRFOztJQUM1RSxnQ0FBNEU7O0lBRzFFLGdDQUE0RDs7SUFDNUQsNkJBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRml2R2FsbGVyeUltYWdlIH0gZnJvbSAnLi4vZ2FsbGVyeS9nYWxsZXJ5LWltYWdlL2dhbGxlcnktaW1hZ2UuY29tcG9uZW50JztcbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgT25Jbml0LFxuICBJbnB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIEhvc3QsXG4gIFNlbGYsXG4gIE9wdGlvbmFsLFxuICBFbGVtZW50UmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZml2TGF6eUltYWdlXSdcbn0pXG5leHBvcnQgY2xhc3MgRml2TGF6eUltYWdlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgZml2TGF6eUltYWdlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHZpcnR1YWwgPSBmYWxzZTtcbiAgaW5WaWV3cG9ydCA9IGZhbHNlO1xuICBAT3V0cHV0KCkgd2lsbFNob3cgPSBuZXcgRXZlbnRFbWl0dGVyPEZpdkdhbGxlcnlJbWFnZSB8IEhUTUxJbWFnZUVsZW1lbnQ+KCk7XG4gIEBPdXRwdXQoKSB3aWxsSGlkZSA9IG5ldyBFdmVudEVtaXR0ZXI8Rml2R2FsbGVyeUltYWdlIHwgSFRNTEltYWdlRWxlbWVudD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASG9zdCgpIEBTZWxmKCkgQE9wdGlvbmFsKCkgcHVibGljIGZpdkltYWdlOiBGaXZHYWxsZXJ5SW1hZ2UsXG4gICAgcHVibGljIGltYWdlOiBFbGVtZW50UmVmXG4gICkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBjb25zdCBpbyA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcbiAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgIGlmICghdGhpcy5pblZpZXdwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUludGVyc2VjdGlvbigpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnZpcnR1YWwpIHtcbiAgICAgICAgICAgICAgaW8uZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5pblZpZXdwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLmluVmlld3BvcnQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpdkltYWdlKSB7XG4gICAgICAgICAgICAgIHRoaXMud2lsbEhpZGUuZW1pdCh0aGlzLmZpdkltYWdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMud2lsbEhpZGUuZW1pdCh0aGlzLmltYWdlLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaW9bJ1BPTExfSU5URVJWQUwnXSA9IDEwMDtcbiAgICBpZiAodGhpcy5maXZJbWFnZSkge1xuICAgICAgaW8ub2JzZXJ2ZSh0aGlzLmZpdkltYWdlLmltYWdlLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpby5vYnNlcnZlKHRoaXMuaW1hZ2UubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG4gIGhhbmRsZUludGVyc2VjdGlvbigpIHtcbiAgICB0aGlzLmluVmlld3BvcnQgPSB0cnVlO1xuICAgIGlmICh0aGlzLmZpdkxhenlJbWFnZSkge1xuICAgICAgaWYgKHRoaXMuZml2SW1hZ2UpIHtcbiAgICAgICAgdGhpcy5maXZJbWFnZS5zcmMgPSB0aGlzLmZpdkxhenlJbWFnZTtcbiAgICAgICAgdGhpcy53aWxsU2hvdy5lbWl0KHRoaXMuZml2SW1hZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbWFnZS5uYXRpdmVFbGVtZW50LnNyYyA9IHRoaXMuZml2TGF6eUltYWdlO1xuICAgICAgICB0aGlzLndpbGxTaG93LmVtaXQodGhpcy5pbWFnZS5uYXRpdmVFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53aWxsU2hvdy5lbWl0KHRoaXMuZml2SW1hZ2UgfHwgdGhpcy5pbWFnZS5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
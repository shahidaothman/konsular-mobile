/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, forwardRef, Output, EventEmitter, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { trigger, transition, style, animate } from '@angular/animations';
import { IonInput } from '@ionic/angular';
import { timer } from 'rxjs';
/** @type {?} */
export const CUSTOM_EDITIABLE_LABEL_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => FivEditableLabel)),
    multi: true
};
export class FivEditableLabel {
    constructor() {
        this.type = 'label';
        this.disabled = false;
        this.blur = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get editing() {
        return this._editing;
    }
    /**
     * @param {?} edit
     * @return {?}
     */
    set editing(edit) {
        this._editing = edit;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        timer(0).subscribe((/**
         * @return {?}
         */
        () => (this.internalValue = this.value)));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set internalValue(value) {
        if (value !== this._value) {
            this._value = value;
            if (this.onChangeCallback) {
                this.onChangeCallback(this._value);
            }
        }
    }
    /**
     * @return {?}
     */
    get internalValue() {
        return this._value;
    }
    /**
     * @return {?}
     */
    edit() {
        this.editing = true;
    }
    /**
     * @return {?}
     */
    stopEdit() {
        this.editing = false;
    }
    /**
     * @return {?}
     */
    onEscapeClick() {
        this.internalValue = this.value;
        this.stopEdit();
    }
    /**
     * @return {?}
     */
    onEnterClick() {
        this.value = this.internalValue;
        this.stopEdit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined && value !== this._value) {
            this._value = value;
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.blur.emit();
        this.stopEdit();
        if (this.onTouchedCallback) {
            this.onTouchedCallback();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    titleAnimDone(event) {
        if (event.toState === 'void') {
            this.input.setFocus();
        }
    }
}
FivEditableLabel.decorators = [
    { type: Component, args: [{
                selector: 'fiv-editable-label',
                template: "<!-- TODO if value is empty label or title can not be clicked, show placeholder?! -->\n<ion-title *ngIf=\"type === 'title' && !editing\" (click)=\"edit()\" (@titleAnim.done)=\"titleAnimDone($event)\" [@titleAnim]>\n    {{value}}</ion-title>\n<ion-label *ngIf=\"type === 'label' && !editing\" class=\"label\" (click)=\"edit()\" (@titleAnim.done)=\"titleAnimDone($event)\" [@titleAnim]>\n    {{value}}</ion-label>\n<ion-input *ngIf=\"editing\" [(ngModel)]=\"internalValue\" (blur)=\"onBlur()\" (keyup.enter)=\"onEnterClick()\"\n    (keyup.escape)=\"onEscapeClick()\" #input [@titleAnim] [ngClass]=\"{'title-input': type === 'title'}\">\n</ion-input>",
                animations: [
                    trigger('titleAnim', [
                        transition('void => *', [
                            style({ opacity: '0', transform: 'translateY(-20%)' }),
                            animate('175ms ease-out', style({ opacity: '1', transform: 'translateY(0)' }))
                        ])
                    ])
                ],
                providers: [CUSTOM_EDITIABLE_LABEL_CONTROL_VALUE_ACCESSOR],
                styles: [":host{width:100%}.label{max-width:100%}:host *{pointer-events:auto}:host(.editable-label-disabled){pointer-events:none}.title-input{font-size:20px;font-weight:500;color:var(--color)}"]
            }] }
];
/** @nocollapse */
FivEditableLabel.ctorParameters = () => [];
FivEditableLabel.propDecorators = {
    editing: [{ type: Input }],
    value: [{ type: Input }],
    type: [{ type: Input }],
    disabled: [{ type: HostBinding, args: ['class.editable-label-disabled',] }, { type: Input }],
    blur: [{ type: Output }],
    input: [{ type: ViewChild, args: ['input',] }]
};
if (false) {
    /** @type {?} */
    FivEditableLabel.prototype.value;
    /** @type {?} */
    FivEditableLabel.prototype.type;
    /** @type {?} */
    FivEditableLabel.prototype.disabled;
    /** @type {?} */
    FivEditableLabel.prototype.blur;
    /** @type {?} */
    FivEditableLabel.prototype.input;
    /**
     * @type {?}
     * @private
     */
    FivEditableLabel.prototype._editing;
    /**
     * @type {?}
     * @private
     */
    FivEditableLabel.prototype._value;
    /**
     * @type {?}
     * @private
     */
    FivEditableLabel.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    FivEditableLabel.prototype.onChangeCallback;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdGFibGUtbGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpdmV0aHJlZS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2VkaXRhYmxlLWxhYmVsL2VkaXRhYmxlLWxhYmVsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsV0FBVyxFQUNYLFVBQVUsRUFFVixNQUFNLEVBQ04sWUFBWSxFQUNaLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUU3QixNQUFNLE9BQU8sNkNBQTZDLEdBQVE7SUFDaEUsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVTs7O0lBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLEVBQUM7SUFDL0MsS0FBSyxFQUFFLElBQUk7Q0FDWjtBQW1CRCxNQUFNLE9BQU8sZ0JBQWdCO0lBeUIzQjtRQWRTLFNBQUksR0FBc0IsT0FBTyxDQUFDO1FBRzNDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFUCxTQUFJLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQVNyQixDQUFDOzs7O0lBdkJoQixJQUNJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQzs7Ozs7SUFDRCxJQUFJLE9BQU8sQ0FBQyxJQUFhO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFtQkQsa0JBQWtCO1FBQ2hCLEtB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Qzs7SUFFcEMsaUNBQW9DOzs7OztJQUVwQyxvQ0FBMEI7Ozs7O0lBQzFCLGtDQUF1Qjs7Ozs7SUFDdkIsNkNBQW9DOzs7OztJQUNwQyw0Q0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBIb3N0QmluZGluZyxcbiAgZm9yd2FyZFJlZixcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IHRyaWdnZXIsIHRyYW5zaXRpb24sIHN0eWxlLCBhbmltYXRlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBJb25JbnB1dCB9IGZyb20gJ0Bpb25pYy9hbmd1bGFyJztcbmltcG9ydCB7IHRpbWVyIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjb25zdCBDVVNUT01fRURJVElBQkxFX0xBQkVMX0NPTlRST0xfVkFMVUVfQUNDRVNTT1I6IGFueSA9IHtcbiAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEZpdkVkaXRhYmxlTGFiZWwpLFxuICBtdWx0aTogdHJ1ZVxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZml2LWVkaXRhYmxlLWxhYmVsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2VkaXRhYmxlLWxhYmVsLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZWRpdGFibGUtbGFiZWwuY29tcG9uZW50LnNjc3MnXSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ3RpdGxlQW5pbScsIFtcbiAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gKicsIFtcbiAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAnMCcsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTIwJSknIH0pLFxuICAgICAgICBhbmltYXRlKFxuICAgICAgICAgICcxNzVtcyBlYXNlLW91dCcsXG4gICAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAnMScsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknIH0pXG4gICAgICAgIClcbiAgICAgIF0pXG4gICAgXSlcbiAgXSxcbiAgcHJvdmlkZXJzOiBbQ1VTVE9NX0VESVRJQUJMRV9MQUJFTF9DT05UUk9MX1ZBTFVFX0FDQ0VTU09SXVxufSlcbmV4cG9ydCBjbGFzcyBGaXZFZGl0YWJsZUxhYmVsXG4gIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICBASW5wdXQoKVxuICBnZXQgZWRpdGluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZWRpdGluZztcbiAgfVxuICBzZXQgZWRpdGluZyhlZGl0OiBib29sZWFuKSB7XG4gICAgdGhpcy5fZWRpdGluZyA9IGVkaXQ7XG4gIH1cblxuICBASW5wdXQoKSB2YWx1ZTogc3RyaW5nO1xuICBASW5wdXQoKSB0eXBlOiAndGl0bGUnIHwgJ2xhYmVsJyA9ICdsYWJlbCc7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuZWRpdGFibGUtbGFiZWwtZGlzYWJsZWQnKVxuICBASW5wdXQoKVxuICBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gIEBPdXRwdXQoKSBibHVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBWaWV3Q2hpbGQoJ2lucHV0JykgaW5wdXQ6IElvbklucHV0O1xuXG4gIHByaXZhdGUgX2VkaXRpbmc6IGJvb2xlYW47XG4gIHByaXZhdGUgX3ZhbHVlOiBzdHJpbmc7XG4gIHByaXZhdGUgb25Ub3VjaGVkQ2FsbGJhY2s6ICgpID0+IHt9O1xuICBwcml2YXRlIG9uQ2hhbmdlQ2FsbGJhY2s6IChfOiBhbnkpID0+IHt9O1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGltZXIoMCkuc3Vic2NyaWJlKCgpID0+ICh0aGlzLmludGVybmFsVmFsdWUgPSB0aGlzLnZhbHVlKSk7XG4gIH1cblxuICBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl92YWx1ZSkge1xuICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLm9uQ2hhbmdlQ2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrKHRoaXMuX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2V0IGludGVybmFsVmFsdWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBlZGl0KCkge1xuICAgIHRoaXMuZWRpdGluZyA9IHRydWU7XG4gIH1cblxuICBzdG9wRWRpdCgpIHtcbiAgICB0aGlzLmVkaXRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIG9uRXNjYXBlQ2xpY2soKSB7XG4gICAgdGhpcy5pbnRlcm5hbFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICB0aGlzLnN0b3BFZGl0KCk7XG4gIH1cblxuICBvbkVudGVyQ2xpY2soKSB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuaW50ZXJuYWxWYWx1ZTtcbiAgICB0aGlzLnN0b3BFZGl0KCk7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gdGhpcy5fdmFsdWUpIHtcbiAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgb25CbHVyKCkge1xuICAgIHRoaXMuYmx1ci5lbWl0KCk7XG4gICAgdGhpcy5zdG9wRWRpdCgpO1xuICAgIGlmICh0aGlzLm9uVG91Y2hlZENhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KSB7XG4gICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KSB7XG4gICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjayA9IGZuO1xuICB9XG5cbiAgdGl0bGVBbmltRG9uZShldmVudCkge1xuICAgIGlmIChldmVudC50b1N0YXRlID09PSAndm9pZCcpIHtcbiAgICAgIHRoaXMuaW5wdXQuc2V0Rm9jdXMoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
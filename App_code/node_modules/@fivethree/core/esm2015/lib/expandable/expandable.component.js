/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, Input, ChangeDetectorRef } from '@angular/core';
import { trigger, state, style, transition, animate, keyframes } from '@angular/animations';
export class FivExpandable {
    /**
     * @param {?} change
     */
    constructor(change) {
        this.change = change;
        this.isOpen = false;
        this.fivWillOpen = new EventEmitter();
        this.fivDidOpen = new EventEmitter();
        this.fivWillClose = new EventEmitter();
        this.fivDidClose = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    open() {
        this.fivWillOpen.emit(this);
        this.isOpen = true;
        this.change.detectChanges();
    }
    /**
     * @return {?}
     */
    toggle() {
        if (this.isOpen === false) {
            this.open();
        }
        else {
            this.close();
        }
    }
    /**
     * @param {?=} param
     * @return {?}
     */
    close(param) {
        this.param = param;
        this.fivWillClose.emit(this);
        this.isOpen = false;
        this.change.detectChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onAnimationEnd(event) {
        if (event.fromState === 'closed') {
            this.fivDidOpen.emit(this);
        }
        else if (event.fromState === 'open') {
            this.fivDidClose.emit({ expandable: this, param: this.param });
            this.param = null;
        }
    }
}
FivExpandable.decorators = [
    { type: Component, args: [{
                selector: 'fiv-expandable',
                template: "<div>\n  <ng-content select=\"[header]\"></ng-content>\n  <div [@listAnim]=\"{value: isOpen ? 'open' : 'closed', params: timingFunction ? {time: timingFunction} : {}}\" (@listAnim.done)=\"onAnimationEnd($event)\"\n    style=\"overflow: hidden\">\n    <ng-content select=\"[content]\"></ng-content>\n  </div>\n</div>",
                animations: [
                    trigger('listAnim', [
                        state('open', style({ height: '*', opacity: 1 })),
                        state('closed', style({ height: '0', opacity: 0 })),
                        transition('closed => open', [
                            animate('{{time}}', keyframes([
                                style({ height: '0', opacity: 0, offset: 0 }),
                                style({ height: '*', opacity: 0.1, offset: 0.8 }),
                                style({ height: '*', opacity: 1, offset: 1 })
                            ]))
                        ], { params: { time: '270ms ease-out' } }),
                        transition('open => closed', [
                            animate('{{time}}', keyframes([
                                style({ height: '*', opacity: 1, offset: 0 }),
                                style({ height: '*', opacity: 0.1, offset: 0.2 }),
                                style({ height: '0', opacity: 0, offset: 1 })
                            ]))
                        ], { params: { time: '220ms ease-out' } })
                    ])
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
FivExpandable.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
FivExpandable.propDecorators = {
    isOpen: [{ type: Input }],
    timingFunction: [{ type: Input }],
    fivWillOpen: [{ type: Output }],
    fivDidOpen: [{ type: Output }],
    fivWillClose: [{ type: Output }],
    fivDidClose: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FivExpandable.prototype.isOpen;
    /** @type {?} */
    FivExpandable.prototype.timingFunction;
    /** @type {?} */
    FivExpandable.prototype.fivWillOpen;
    /** @type {?} */
    FivExpandable.prototype.fivDidOpen;
    /** @type {?} */
    FivExpandable.prototype.fivWillClose;
    /** @type {?} */
    FivExpandable.prototype.fivDidClose;
    /** @type {?} */
    FivExpandable.prototype.param;
    /**
     * @type {?}
     * @private
     */
    FivExpandable.prototype.change;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZml2ZXRocmVlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZXhwYW5kYWJsZS9leHBhbmRhYmxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxNQUFNLEVBQ04sWUFBWSxFQUNaLEtBQUssRUFDTCxpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNMLE9BQU8sRUFDUCxLQUFLLEVBQ0wsS0FBSyxFQUNMLFVBQVUsRUFDVixPQUFPLEVBQ1AsU0FBUyxFQUNWLE1BQU0scUJBQXFCLENBQUM7QUF5QzdCLE1BQU0sT0FBTyxhQUFhOzs7O0lBYXhCLFlBQW9CLE1BQXlCO1FBQXpCLFdBQU0sR0FBTixNQUFNLENBQW1CO1FBWnBDLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFFZCxnQkFBVyxHQUFnQyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlELGVBQVUsR0FBZ0MsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM3RCxpQkFBWSxHQUFnQyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQy9ELGdCQUFXLEdBR2hCLElBQUksWUFBWSxFQUFFLENBQUM7SUFJd0IsQ0FBQzs7OztJQUVqRCxRQUFRLEtBQUksQ0FBQzs7OztJQUViLElBQUk7UUFDRixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzlCLENBQUM7Ozs7SUFFRCxNQUFNO1FBQ0osSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRTtZQUN6QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDYjthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7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QUN6RSxvQ0FHd0I7O0lBRXhCLDhCQUFXOzs7OztJQUVDLCtCQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIENoYW5nZURldGVjdG9yUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgdHJpZ2dlcixcbiAgc3RhdGUsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uLFxuICBhbmltYXRlLFxuICBrZXlmcmFtZXNcbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zpdi1leHBhbmRhYmxlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2V4cGFuZGFibGUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9leHBhbmRhYmxlLmNvbXBvbmVudC5zY3NzJ10sXG4gIGFuaW1hdGlvbnM6IFtcbiAgICB0cmlnZ2VyKCdsaXN0QW5pbScsIFtcbiAgICAgIHN0YXRlKCdvcGVuJywgc3R5bGUoeyBoZWlnaHQ6ICcqJywgb3BhY2l0eTogMSB9KSksXG4gICAgICBzdGF0ZSgnY2xvc2VkJywgc3R5bGUoeyBoZWlnaHQ6ICcwJywgb3BhY2l0eTogMCB9KSksXG4gICAgICB0cmFuc2l0aW9uKFxuICAgICAgICAnY2xvc2VkID0+IG9wZW4nLFxuICAgICAgICBbXG4gICAgICAgICAgYW5pbWF0ZShcbiAgICAgICAgICAgICd7e3RpbWV9fScsXG4gICAgICAgICAgICBrZXlmcmFtZXMoW1xuICAgICAgICAgICAgICBzdHlsZSh7IGhlaWdodDogJzAnLCBvcGFjaXR5OiAwLCBvZmZzZXQ6IDAgfSksXG4gICAgICAgICAgICAgIHN0eWxlKHsgaGVpZ2h0OiAnKicsIG9wYWNpdHk6IDAuMSwgb2Zmc2V0OiAwLjggfSksXG4gICAgICAgICAgICAgIHN0eWxlKHsgaGVpZ2h0OiAnKicsIG9wYWNpdHk6IDEsIG9mZnNldDogMSB9KVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICApXG4gICAgICAgIF0sXG4gICAgICAgIHsgcGFyYW1zOiB7IHRpbWU6ICcyNzBtcyBlYXNlLW91dCcgfSB9XG4gICAgICApLFxuICAgICAgdHJhbnNpdGlvbihcbiAgICAgICAgJ29wZW4gPT4gY2xvc2VkJyxcbiAgICAgICAgW1xuICAgICAgICAgIGFuaW1hdGUoXG4gICAgICAgICAgICAne3t0aW1lfX0nLFxuICAgICAgICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgICAgICAgc3R5bGUoeyBoZWlnaHQ6ICcqJywgb3BhY2l0eTogMSwgb2Zmc2V0OiAwIH0pLFxuICAgICAgICAgICAgICBzdHlsZSh7IGhlaWdodDogJyonLCBvcGFjaXR5OiAwLjEsIG9mZnNldDogMC4yIH0pLFxuICAgICAgICAgICAgICBzdHlsZSh7IGhlaWdodDogJzAnLCBvcGFjaXR5OiAwLCBvZmZzZXQ6IDEgfSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgKVxuICAgICAgICBdLFxuICAgICAgICB7IHBhcmFtczogeyB0aW1lOiAnMjIwbXMgZWFzZS1vdXQnIH0gfVxuICAgICAgKVxuICAgIF0pXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRml2RXhwYW5kYWJsZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGlzT3BlbiA9IGZhbHNlO1xuICBASW5wdXQoKSB0aW1pbmdGdW5jdGlvbjogc3RyaW5nO1xuICBAT3V0cHV0KCkgZml2V2lsbE9wZW46IEV2ZW50RW1pdHRlcjxGaXZFeHBhbmRhYmxlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGZpdkRpZE9wZW46IEV2ZW50RW1pdHRlcjxGaXZFeHBhbmRhYmxlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGZpdldpbGxDbG9zZTogRXZlbnRFbWl0dGVyPEZpdkV4cGFuZGFibGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgZml2RGlkQ2xvc2U6IEV2ZW50RW1pdHRlcjx7XG4gICAgZXhwYW5kYWJsZTogRml2RXhwYW5kYWJsZTtcbiAgICBwYXJhbTogYW55O1xuICB9PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwYXJhbTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBuZ09uSW5pdCgpIHt9XG5cbiAgb3BlbigpIHtcbiAgICB0aGlzLmZpdldpbGxPcGVuLmVtaXQodGhpcyk7XG4gICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgIHRoaXMuY2hhbmdlLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5pc09wZW4gPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlKHBhcmFtPzogYW55KSB7XG4gICAgdGhpcy5wYXJhbSA9IHBhcmFtO1xuICAgIHRoaXMuZml2V2lsbENsb3NlLmVtaXQodGhpcyk7XG5cbiAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICAgIHRoaXMuY2hhbmdlLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIG9uQW5pbWF0aW9uRW5kKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmZyb21TdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgIHRoaXMuZml2RGlkT3Blbi5lbWl0KHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQuZnJvbVN0YXRlID09PSAnb3BlbicpIHtcbiAgICAgIHRoaXMuZml2RGlkQ2xvc2UuZW1pdCh7IGV4cGFuZGFibGU6IHRoaXMsIHBhcmFtOiB0aGlzLnBhcmFtIH0pO1xuICAgICAgdGhpcy5wYXJhbSA9IG51bGw7XG4gICAgfVxuICB9XG59XG4iXX0=
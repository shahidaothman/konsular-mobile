/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FivGalleryImage } from '../gallery/gallery-image/gallery-image.component';
import { Directive, Input, EventEmitter, Output, Host, Self, Optional, ElementRef } from '@angular/core';
export class FivLazyImage {
    /**
     * @param {?} fivImage
     * @param {?} image
     */
    constructor(fivImage, image) {
        this.fivImage = fivImage;
        this.image = image;
        this.virtual = false;
        this.inViewport = false;
        this.willShow = new EventEmitter();
        this.willHide = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const io = new IntersectionObserver((/**
         * @param {?} entries
         * @param {?} observer
         * @return {?}
         */
        (entries, observer) => {
            entries.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            entry => {
                if (entry.isIntersecting) {
                    if (!this.inViewport) {
                        this.handleIntersection();
                        if (!this.virtual) {
                            io.disconnect();
                        }
                    }
                }
                else {
                    if (this.inViewport) {
                        this.inViewport = false;
                        if (this.fivImage) {
                            this.willHide.emit(this.fivImage);
                        }
                        else {
                            this.willHide.emit(this.image.nativeElement);
                        }
                    }
                }
            }));
        }));
        io['POLL_INTERVAL'] = 100;
        if (this.fivImage) {
            io.observe(this.fivImage.image.nativeElement);
        }
        else {
            io.observe(this.image.nativeElement);
        }
    }
    /**
     * @return {?}
     */
    handleIntersection() {
        this.inViewport = true;
        if (this.fivLazyImage) {
            if (this.fivImage) {
                this.fivImage.src = this.fivLazyImage;
                this.willShow.emit(this.fivImage);
            }
            else {
                this.image.nativeElement.src = this.fivLazyImage;
                this.willShow.emit(this.image.nativeElement);
            }
        }
        else {
            this.willShow.emit(this.fivImage || this.image.nativeElement);
        }
    }
}
FivLazyImage.decorators = [
    { type: Directive, args: [{
                selector: '[fivLazyImage]'
            },] }
];
/** @nocollapse */
FivLazyImage.ctorParameters = () => [
    { type: FivGalleryImage, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
    { type: ElementRef }
];
FivLazyImage.propDecorators = {
    fivLazyImage: [{ type: Input }],
    virtual: [{ type: Input }],
    willShow: [{ type: Output }],
    willHide: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FivLazyImage.prototype.fivLazyImage;
    /** @type {?} */
    FivLazyImage.prototype.virtual;
    /** @type {?} */
    FivLazyImage.prototype.inViewport;
    /** @type {?} */
    FivLazyImage.prototype.willShow;
    /** @type {?} */
    FivLazyImage.prototype.willHide;
    /** @type {?} */
    FivLazyImage.prototype.fivImage;
    /** @type {?} */
    FivLazyImage.prototype.image;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1pbWFnZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZml2ZXRocmVlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvbGF6eS1pbWFnZS9sYXp5LWltYWdlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ25GLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUNMLFlBQVksRUFDWixNQUFNLEVBQ04sSUFBSSxFQUNKLElBQUksRUFDSixRQUFRLEVBQ1IsVUFBVSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBS3ZCLE1BQU0sT0FBTyxZQUFZOzs7OztJQU92QixZQUNxQyxRQUF5QixFQUNyRCxLQUFpQjtRQURXLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQ3JELFVBQUssR0FBTCxLQUFLLENBQVk7UUFQakIsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUN6QixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ1QsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFzQyxDQUFDO1FBQ2xFLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBc0MsQ0FBQztJQUt6RSxDQUFDOzs7O0lBRUosUUFBUTs7Y0FDQSxFQUFFLEdBQUcsSUFBSSxvQkFBb0I7Ozs7O1FBQUMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDeEQsT0FBTyxDQUFDLE9BQU87Ozs7WUFBQyxLQUFLLENBQUMsRUFBRTtnQkFDdEIsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFO29CQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTt3QkFDcEIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7d0JBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFOzRCQUNqQixFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7eUJBQ2pCO3FCQUNGO2lCQUNGO3FCQUFNO29CQUNMLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTt3QkFDbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7d0JBQ3hCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTs0QkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3lCQUNuQzs2QkFBTTs0QkFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO3lCQUM5QztxQkFDRjtpQkFDRjtZQUNILENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFDO1FBQ0YsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUMxQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMvQzthQUFNO1lBQ0wsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQzs7OztJQUNELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO2dCQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDbkM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7Z0JBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDOUM7U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQy9EO0lBQ0gsQ0FBQzs7O1lBekRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2FBQzNCOzs7O1lBZlEsZUFBZSx1QkF3Qm5CLElBQUksWUFBSSxJQUFJLFlBQUksUUFBUTtZQWQzQixVQUFVOzs7MkJBT1QsS0FBSztzQkFDTCxLQUFLO3VCQUVMLE1BQU07dUJBQ04sTUFBTTs7OztJQUpQLG9DQUE4Qjs7SUFDOUIsK0JBQXlCOztJQUN6QixrQ0FBbUI7O0lBQ25CLGdDQUE0RTs7SUFDNUUsZ0NBQTRFOztJQUcxRSxnQ0FBNEQ7O0lBQzVELDZCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpdkdhbGxlcnlJbWFnZSB9IGZyb20gJy4uL2dhbGxlcnkvZ2FsbGVyeS1pbWFnZS9nYWxsZXJ5LWltYWdlLmNvbXBvbmVudCc7XG5pbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIE9uSW5pdCxcbiAgSW5wdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgT3V0cHV0LFxuICBIb3N0LFxuICBTZWxmLFxuICBPcHRpb25hbCxcbiAgRWxlbWVudFJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ZpdkxhenlJbWFnZV0nXG59KVxuZXhwb3J0IGNsYXNzIEZpdkxhenlJbWFnZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGZpdkxhenlJbWFnZTogc3RyaW5nO1xuICBASW5wdXQoKSB2aXJ0dWFsID0gZmFsc2U7XG4gIGluVmlld3BvcnQgPSBmYWxzZTtcbiAgQE91dHB1dCgpIHdpbGxTaG93ID0gbmV3IEV2ZW50RW1pdHRlcjxGaXZHYWxsZXJ5SW1hZ2UgfCBIVE1MSW1hZ2VFbGVtZW50PigpO1xuICBAT3V0cHV0KCkgd2lsbEhpZGUgPSBuZXcgRXZlbnRFbWl0dGVyPEZpdkdhbGxlcnlJbWFnZSB8IEhUTUxJbWFnZUVsZW1lbnQ+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEhvc3QoKSBAU2VsZigpIEBPcHRpb25hbCgpIHB1YmxpYyBmaXZJbWFnZTogRml2R2FsbGVyeUltYWdlLFxuICAgIHB1YmxpYyBpbWFnZTogRWxlbWVudFJlZlxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgY29uc3QgaW8gPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XG4gICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuaW5WaWV3cG9ydCkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVJbnRlcnNlY3Rpb24oKTtcbiAgICAgICAgICAgIGlmICghdGhpcy52aXJ0dWFsKSB7XG4gICAgICAgICAgICAgIGlvLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuaW5WaWV3cG9ydCkge1xuICAgICAgICAgICAgdGhpcy5pblZpZXdwb3J0ID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5maXZJbWFnZSkge1xuICAgICAgICAgICAgICB0aGlzLndpbGxIaWRlLmVtaXQodGhpcy5maXZJbWFnZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLndpbGxIaWRlLmVtaXQodGhpcy5pbWFnZS5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlvWydQT0xMX0lOVEVSVkFMJ10gPSAxMDA7XG4gICAgaWYgKHRoaXMuZml2SW1hZ2UpIHtcbiAgICAgIGlvLm9ic2VydmUodGhpcy5maXZJbWFnZS5pbWFnZS5uYXRpdmVFbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW8ub2JzZXJ2ZSh0aGlzLmltYWdlLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cbiAgfVxuICBoYW5kbGVJbnRlcnNlY3Rpb24oKSB7XG4gICAgdGhpcy5pblZpZXdwb3J0ID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5maXZMYXp5SW1hZ2UpIHtcbiAgICAgIGlmICh0aGlzLmZpdkltYWdlKSB7XG4gICAgICAgIHRoaXMuZml2SW1hZ2Uuc3JjID0gdGhpcy5maXZMYXp5SW1hZ2U7XG4gICAgICAgIHRoaXMud2lsbFNob3cuZW1pdCh0aGlzLmZpdkltYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaW1hZ2UubmF0aXZlRWxlbWVudC5zcmMgPSB0aGlzLmZpdkxhenlJbWFnZTtcbiAgICAgICAgdGhpcy53aWxsU2hvdy5lbWl0KHRoaXMuaW1hZ2UubmF0aXZlRWxlbWVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2lsbFNob3cuZW1pdCh0aGlzLmZpdkltYWdlIHx8IHRoaXMuaW1hZ2UubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG59XG4iXX0=
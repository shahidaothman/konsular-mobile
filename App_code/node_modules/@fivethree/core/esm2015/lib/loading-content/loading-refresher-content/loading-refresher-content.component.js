/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, Output, EventEmitter, Renderer2 } from '@angular/core';
import { animate, style, transition, trigger, state, AnimationBuilder } from '@angular/animations';
import { FivLoadingSpinner } from '../../loading-spinner/loading-spinner.component';
export class FivLoadingRefresherContent {
    /**
     * @param {?} element
     * @param {?} renderer
     * @param {?} builder
     */
    constructor(element, renderer, builder) {
        this.element = element;
        this.renderer = renderer;
        this.builder = builder;
        this.iconColor = '#000';
        this.checkmark = false;
        this.disabled = false;
        this._progress = 0;
        this.fivComplete = new EventEmitter();
        this.fivRefresh = new EventEmitter();
        this.fivHidden = new EventEmitter();
        this.fivShowed = new EventEmitter();
        this.fivProgress = new EventEmitter();
        this.visible = false;
        this.iconState = 'normal';
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    set progress(progress) {
        this._progress = progress;
        if (progress < 1) {
            this.renderer.setStyle(this.spinnerRef.nativeElement, 'transform', `rotateZ(${360 * progress}deg)`);
        }
    }
    /**
     * @return {?}
     */
    get progress() {
        return this._progress;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    load() {
        this.visible = true;
        this.spinner.spin();
        this.fivRefresh.emit(this);
    }
    /**
     * @return {?}
     */
    unload() {
        this.spinner.stopSpinning();
    }
    /**
     * @return {?}
     */
    complete() {
        // this.spinner.completeIn(500);
        if (this.checkmark) {
            this.iconState = 'rotate';
        }
        else {
            this.postComplete();
        }
    }
    /**
     * @return {?}
     */
    show() {
        if (!this.visible) {
            this.visible = true;
            /** @type {?} */
            const animation = this.builder.build([
                style({ transform: 'scale(0)' }),
                animate('0ms ease-out', style({ transform: 'scale(1)' }))
            ]);
            /** @type {?} */
            const player = animation.create(this.background.nativeElement);
            player.play();
            player.onDone((/**
             * @return {?}
             */
            () => {
                this.fivShowed.emit(this);
                player.destroy();
            }));
        }
    }
    /**
     * @return {?}
     */
    hide() {
        if (this.visible) {
            /** @type {?} */
            const transform = `scale(1)`;
            /** @type {?} */
            const animation = this.builder.build([
                style({ transform: transform }),
                animate('175ms ease-in', style({ transform: 'scale(0)' }))
            ]);
            /** @type {?} */
            const player = animation.create(this.background.nativeElement);
            player.play();
            player.onDone((/**
             * @return {?}
             */
            () => {
                this.fivHidden.emit(this);
                this.visible = false;
                player.destroy();
            }));
        }
    }
    /**
     * @return {?}
     */
    fillAnimationDone() {
        if (this.checkmark) {
            this.iconState = 'rotate';
        }
        else {
            this.postComplete();
        }
    }
    /**
     * @param {?} event
     * @param {?} icon
     * @return {?}
     */
    changeIconAndReveal(event, icon) {
        if (event.fromState === 'normal') {
            this.icon = icon;
            this.iconState = 'normal';
        }
        else {
            if (event.fromState === 'rotate') {
                this.postComplete();
            }
        }
    }
    /**
     * @return {?}
     */
    postComplete() {
        this.unload();
        this.fivComplete.emit(this);
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    setValue(progress) {
        this.spinner.setValue(progress);
    }
    /**
     * @return {?}
     */
    reset() {
        this.spinner.setMode('indeterminate');
    }
}
FivLoadingRefresherContent.decorators = [
    { type: Component, args: [{
                selector: 'fiv-loading-refresher-content',
                template: "<div #background class=\"spinner-background\">\n    <fiv-loading-spinner #spinner (fivProgress)=\"fivProgress.emit($event)\" (fivComplete)=\"fillAnimationDone()\"\n        class=\"spinner\" [circleRadius]=\"8\" [diameter]=\"20\" [strokeWidth]=\"2\"></fiv-loading-spinner>\n</div>",
                animations: [
                    trigger('fabAnim', [
                        transition('void => *', [
                            style({ transform: 'scale(0)' }),
                            animate('250ms ease-out')
                        ]),
                        transition('* => void', [
                            animate('250ms ease-in', style({ transform: 'scale(0)' }))
                        ])
                    ]),
                    trigger('spinnerAnim', [
                        transition('void => *', [
                            style({ opacity: '0' }),
                            animate('250ms ease-out')
                        ]),
                        transition('* => void', [
                            animate('250ms ease-in', style({ opacity: '0' }))
                        ])
                    ]),
                    trigger('rotateAnim', [
                        transition('normal => rotate', [animate('125ms ease-out')]),
                        transition('rotate => normal', [animate('125ms ease-in')]),
                        state('rotate', style({ opacity: '0', transform: 'rotateZ(45deg)' })),
                        state('normal', style({ opacity: '1', transform: 'rotateZ(0deg)' }))
                    ]),
                    trigger('fillAnim', [
                        transition('* => fill', [
                            style({
                                'stroke-dasharray': 180,
                                'stroke-dashoffset': 90,
                                transformOrigin: 'center',
                                stroke: '#DE3E35'
                            }),
                            animate('1400ms ease-out')
                        ]),
                        state('fill', style({
                            'stroke-dasharray': 315,
                            'stroke-dashoffset': 0,
                            transformOrigin: 'center',
                            stroke: '#1B9A59',
                            opacity: 0
                        }))
                    ])
                ],
                styles: [":host{position:absolute;width:40px;height:40px;top:env(safe-area-inset-top);left:calc(50% - 20px);z-index:9}.spinner-background{position:absolute;width:40px;height:40px;background:var(--ion-color-light);border-radius:50%;box-shadow:0 4px 6px 0 rgba(0,0,0,.14),0 4px 5px rgba(0,0,0,.1)}.spinner-background fiv-loading-spinner{position:absolute;top:10px;left:10px}.rotate{-webkit-animation:1.4s linear infinite rotator;animation:1.4s linear infinite rotator}@-webkit-keyframes rotator{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(270deg);transform:rotate(270deg)}}@keyframes rotator{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(270deg);transform:rotate(270deg)}}.path{stroke-dasharray:187;stroke-dashoffset:0;-webkit-transform-origin:center;transform-origin:center;-webkit-animation:1.4s ease-in-out infinite dash,5.6s ease-in-out infinite colors;animation:1.4s ease-in-out infinite dash,5.6s ease-in-out infinite colors}.fill{stroke-dasharray:360;stroke-dashoffset:0;-webkit-transform-origin:center;transform-origin:center;-webkit-animation:1.4s ease-out fill;animation:1.4s ease-out fill;stroke:#1b9a59}@-webkit-keyframes colors{0%,100%{stroke:#4285f4}25%{stroke:#de3e35}50%{stroke:#f7c223}75%{stroke:#1b9a59}}@keyframes colors{0%,100%{stroke:#4285f4}25%{stroke:#de3e35}50%{stroke:#f7c223}75%{stroke:#1b9a59}}@-webkit-keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:187;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:187;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@-webkit-keyframes fill{0%{stroke-dashoffset:360}80%{stroke-dashoffset:180;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:0;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@keyframes fill{0%{stroke-dashoffset:360}80%{stroke-dashoffset:180;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:0;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}"]
            }] }
];
/** @nocollapse */
FivLoadingRefresherContent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: AnimationBuilder }
];
FivLoadingRefresherContent.propDecorators = {
    icon: [{ type: Input }],
    spinColor: [{ type: Input }],
    fabColor: [{ type: Input }],
    iconColor: [{ type: Input }],
    checkmark: [{ type: Input }],
    disabled: [{ type: Input }],
    progress: [{ type: Input }],
    fivComplete: [{ type: Output }],
    fivRefresh: [{ type: Output }],
    fivHidden: [{ type: Output }],
    fivShowed: [{ type: Output }],
    fivProgress: [{ type: Output }],
    spinner: [{ type: ViewChild, args: ['spinner',] }],
    spinnerRef: [{ type: ViewChild, args: ['spinner', { read: ElementRef },] }],
    background: [{ type: ViewChild, args: ['background',] }]
};
if (false) {
    /** @type {?} */
    FivLoadingRefresherContent.prototype.icon;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.spinColor;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.fabColor;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.iconColor;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.checkmark;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.disabled;
    /** @type {?} */
    FivLoadingRefresherContent.prototype._progress;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.fivComplete;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.fivRefresh;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.fivHidden;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.fivShowed;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.fivProgress;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.spinner;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.spinnerRef;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.background;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.visible;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.iconState;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    FivLoadingRefresherContent.prototype.renderer;
    /** @type {?} */
    FivLoadingRefresherContent.prototype.builder;
}
//# sourceMappingURL=data:application/json;base64,
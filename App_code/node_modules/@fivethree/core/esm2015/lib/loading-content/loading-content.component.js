/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FivLoadingRefresherContent } from './loading-refresher-content/loading-refresher-content.component';
import { Component, Output, EventEmitter, ViewChild, ElementRef, Input, Renderer2 } from '@angular/core';
import { animate, style, transition, trigger, state, AnimationBuilder } from '@angular/animations';
export class FivLoadingContent {
    /**
     * @param {?} builder
     * @param {?} renderer
     */
    constructor(builder, renderer) {
        this.builder = builder;
        this.renderer = renderer;
        this.hintText = 'new posts';
        this.maxPullHeight = 168;
        this.minPullHeight = 112;
        this.fivProgressChanged = new EventEmitter();
        this.fivRefresh = new EventEmitter();
        this.hintVisible = false;
        this.currentProgress = 0;
        this.refreshing = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    refresh() {
        this.refreshing = true;
        this.changeAnimationToProgress(112 / 168);
        this.spinner.load();
        this.fivRefresh.emit(this);
    }
    /**
     * @return {?}
     */
    completeRefresh() {
        this.spinner.complete();
    }
    /**
     * @return {?}
     */
    fillAnimationDone() {
        this.spinner.hide();
    }
    /**
     * @return {?}
     */
    showHint() {
        this.hintVisible = true;
    }
    /**
     * @return {?}
     */
    onHintClicked() {
        this.hintVisible = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    postHint(event) {
        if (!event.fromState && event.toState === 'void') {
            this.setPullAnimationProgress(112 / 168);
            this.spinner.load();
            this.refreshing = true;
            this.fivRefresh.emit(this);
        }
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    setPullAnimationProgress(progress) {
        this.currentProgress = progress;
        if (progress < 1) {
            this.renderer.setStyle(this.spinner.element.nativeElement, 'transform', `translateY(${168 * progress}px)`);
        }
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    changeAnimationToProgress(progress) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            const animation = this.builder.build([
                style({
                    transform: `translateY(${this.currentProgress *
                        168}px) rotateZ(${360 * this.currentProgress}deg)`
                }),
                animate('85ms ease-in', style({
                    transform: `translateY(${progress * 168}px) rotateZ(${360 *
                        progress}deg)`
                }))
            ]);
            /** @type {?} */
            const player = animation.create(this.spinner.element.nativeElement);
            player.play();
            player.onDone((/**
             * @return {?}
             */
            () => {
                this.setPullAnimationProgress(progress);
                player.destroy();
                resolve();
            }));
        }));
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    fivPull(progress) {
        this.setPullAnimationProgress(progress);
        this.spinner.show();
        /** @type {?} */
        const value = Math.max(0, Math.min(100, (progress * 100 * this.maxPullHeight) / this.minPullHeight));
        this.spinner.setValue(value * 0.84);
    }
    /**
     * @return {?}
     */
    onRefresh() {
        this.refresh();
        this.spinner.load();
    }
    /**
     * @return {?}
     */
    fivCancel() {
        this.moveBack();
    }
    /**
     * @return {?}
     */
    afterSpinnerHide() {
        this.setPullAnimationProgress(0);
        this.refreshing = false;
        this.spinner.reset();
    }
    /**
     * @return {?}
     */
    moveBack() {
        /** @type {?} */
        const animation = this.builder.build([
            style({
                transform: `translateY(${this.currentProgress * 168}px) rotateZ(${360 *
                    this.currentProgress}deg)`
            }),
            animate('145ms ease-in', style({ transform: 'translateY(0) rotateZ(0)' }))
        ]);
        /** @type {?} */
        const player = animation.create(this.spinner.element.nativeElement);
        player.play();
        player.onDone((/**
         * @return {?}
         */
        () => {
            this.setPullAnimationProgress(0);
            this.spinner.visible = false;
            player.destroy();
        }));
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    onSpinnerProgress(progress) {
        this.fivProgressChanged.emit(progress);
        this.renderer
            // tslint:disable-next-line:max-line-length
            .setStyle(this.spinner.element.nativeElement, 'transform', `translateY(${168 * this.currentProgress}px) rotateZ(${(360 *
            progress) /
            200}deg)`);
    }
}
FivLoadingContent.decorators = [
    { type: Component, args: [{
                selector: 'fiv-loading-content',
                template: "<fiv-loading-refresher-content [progress]=\"currentProgress\" (fivProgress)=\"onSpinnerProgress($event)\" (fivHidden)=\"afterSpinnerHide()\" (fivComplete)=\"fillAnimationDone()\"\n  #spinner></fiv-loading-refresher-content>\n<ion-chip class=\"gg-hint-wrapper\" *ngIf=\"hintVisible\" [@hintAnim] (@hintAnim.done)=\"postHint($event)\" (click)=\"onHintClicked()\"\n  #hint>\n  <ion-icon class=\"icon\" name=\"md-arrow-up\"></ion-icon>\n  <ion-label *ngIf=\"hintVisible\" class=\"text\">{{hintText}}</ion-label>\n</ion-chip>\n\n<ion-content [forceOverscroll]=\"false\" fivPull [maxPullHeight]=\"maxPullHeight\" [minPullHeight]=\"minPullHeight\" (fivPull)=\"fivPull($event)\"\n  (fivRefresh)=\"onRefresh()\" (fivCancel)=\"fivCancel()\" [enabled]=\"!refreshing && !hintVisible\">\n  <div class=\"content\">\n    <ng-content></ng-content>\n  </div>\n\n</ion-content>",
                animations: [
                    trigger('fillAnim', [
                        transition('* => fill', [
                            style({
                                'stroke-dasharray': 180,
                                'stroke-dashoffset': 90,
                                transformOrigin: 'center',
                                stroke: '#DE3E35'
                            }),
                            animate('360ms ease-out')
                        ]),
                        state('fill', style({
                            'stroke-dasharray': 315,
                            'stroke-dashoffset': 0,
                            transformOrigin: 'center',
                            stroke: '#1B9A59'
                        }))
                    ]),
                    trigger('spinnerAnim', [
                        transition('* => void', [
                            animate('250ms ease-out', style({ opacity: 0 }))
                        ])
                    ]),
                    trigger('hintAnim', [
                        transition('void => *', [
                            style({ transform: 'translateY(0px) translateX(-50%)' }),
                            animate('150ms ease-in', style({
                                opacity: 1,
                                transform: 'translateY(calc(112px + env(safe-area-inset-top))) translateX(-50%)'
                            }))
                        ]),
                        transition('* => void', [
                            style({
                                width: '112px',
                                opacity: 1,
                                transform: 'translateY(calc(112px + env(safe-area-inset-top))) translateX(-50%)'
                            }),
                            animate('125ms ease-out', style({
                                width: '40px',
                                transform: 'translateY(calc(112px + env(safe-area-inset-top))) translateX(-50%)'
                            }))
                        ])
                    ])
                ],
                styles: [":host{height:100%;width:100%;position:absolute;top:0;bottom:0;left:0;right:0}ion-content{--padding-top:calc(env(safe-area-inset-top) + var(--fiv-padding-top, 0px))}.content{min-height:100%;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.icon{height:20px;width:20px;background:0 0;color:var(--ion-color-dark)}.text{font-size:1em;color:var(--ion-color-dark)}.gg-hint-wrapper{position:absolute;z-index:8;opacity:1;left:50%;-webkit-transform:translateY(calc(112px + env(safe-area-inset-top))) translateX(-50%);transform:translateY(calc(112px + env(safe-area-inset-top))) translateX(-50%);height:40px;padding-left:8px;padding-right:8px;background:var(--ion-color-light);border-radius:40px;box-shadow:0 4px 6px 0 rgba(0,0,0,.14),0 4px 5px rgba(0,0,0,.1);margin:0}"]
            }] }
];
/** @nocollapse */
FivLoadingContent.ctorParameters = () => [
    { type: AnimationBuilder },
    { type: Renderer2 }
];
FivLoadingContent.propDecorators = {
    hintText: [{ type: Input }],
    maxPullHeight: [{ type: Input }],
    minPullHeight: [{ type: Input }],
    fivProgressChanged: [{ type: Output }],
    fivRefresh: [{ type: Output }],
    content: [{ type: ViewChild, args: ['content',] }],
    spinner: [{ type: ViewChild, args: ['spinner',] }]
};
if (false) {
    /** @type {?} */
    FivLoadingContent.prototype.hintText;
    /** @type {?} */
    FivLoadingContent.prototype.maxPullHeight;
    /** @type {?} */
    FivLoadingContent.prototype.minPullHeight;
    /** @type {?} */
    FivLoadingContent.prototype.fivProgressChanged;
    /** @type {?} */
    FivLoadingContent.prototype.fivRefresh;
    /** @type {?} */
    FivLoadingContent.prototype.content;
    /** @type {?} */
    FivLoadingContent.prototype.spinner;
    /** @type {?} */
    FivLoadingContent.prototype.hintVisible;
    /** @type {?} */
    FivLoadingContent.prototype.currentProgress;
    /** @type {?} */
    FivLoadingContent.prototype.refreshing;
    /**
     * @type {?}
     * @private
     */
    FivLoadingContent.prototype.builder;
    /**
     * @type {?}
     * @private
     */
    FivLoadingContent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,
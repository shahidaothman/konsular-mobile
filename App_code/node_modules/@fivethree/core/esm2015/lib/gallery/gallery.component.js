/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FivGalleryToolbar } from './gallery-toolbar/gallery-toolbar.component';
import { ImageService } from './image.service';
import { IonSlides, DomController, Platform } from '@ionic/angular';
import { FivOverlay } from './../overlay/overlay.component';
import { Component, ViewChild, ElementRef, Renderer2, ContentChildren, QueryList, forwardRef, HostListener, Inject, ChangeDetectorRef, Input, Output, EventEmitter } from '@angular/core';
import { style, animate, AnimationBuilder, trigger, transition } from '@angular/animations';
import { Key } from './keycodes.enum';
import { DOCUMENT } from '@angular/common';
import { FivGalleryImage } from './gallery-image/gallery-image.component';
import { from, Subject } from 'rxjs';
import { mergeMap, takeUntil } from 'rxjs/operators';
export class FivGallery {
    /**
     * @param {?} domCtrl
     * @param {?} renderer
     * @param {?} animation
     * @param {?} change
     * @param {?} platform
     * @param {?} document
     * @param {?} imageService
     */
    constructor(domCtrl, renderer, animation, change, platform, document, imageService) {
        this.domCtrl = domCtrl;
        this.renderer = renderer;
        this.animation = animation;
        this.change = change;
        this.platform = platform;
        this.document = document;
        this.imageService = imageService;
        // properties for the slides
        this.activeIndex = 0;
        this.options = {
            zoom: true,
            initialSlide: 0
        };
        this.controlsVisible = true;
        this.pagerVisible = true;
        this.ambient = true;
        this.openTiming = '300ms';
        this.closeTiming = '340ms';
        this.willOpen = new EventEmitter();
        this.willClose = new EventEmitter();
        this.didOpen = new EventEmitter();
        this.didClose = new EventEmitter();
        this.backdropChange = new EventEmitter();
        this.$onDestroy = new Subject();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    keyEvent(event) {
        if (this.overlay &&
            this.overlay.open &&
            this.initialImage &&
            this.initialImage.viewerState === 'hidden') {
            this.handleKeyboardEvents(event);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.updateImages();
        this.updateToolbars();
        this.subscribeToImageEvents();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.$onDestroy.next();
    }
    /**
     * @return {?}
     */
    subscribeToImageEvents() {
        from(this.images.map((/**
         * @param {?} image
         * @return {?}
         */
        image => image.didOpen)))
            .pipe(mergeMap((/**
         * @param {?} value
         * @return {?}
         */
        (value) => value)), takeUntil(this.$onDestroy))
            .subscribe((/**
         * @param {?} image
         * @return {?}
         */
        image => this.open(image)));
        from(this.images.map((/**
         * @param {?} image
         * @return {?}
         */
        image => image.willOpen)))
            .pipe(mergeMap((/**
         * @param {?} value
         * @return {?}
         */
        (value) => value)), takeUntil(this.$onDestroy))
            .subscribe((/**
         * @param {?} image
         * @return {?}
         */
        image => this.willOpen.emit(image)));
        from(this.images.map((/**
         * @param {?} image
         * @return {?}
         */
        image => image.didClose)))
            .pipe(mergeMap((/**
         * @param {?} value
         * @return {?}
         */
        (value) => value)), takeUntil(this.$onDestroy))
            .subscribe((/**
         * @param {?} image
         * @return {?}
         */
        image => this.didClose.emit(image)));
    }
    /**
     * @return {?}
     */
    updateImages() {
        this.images.forEach((/**
         * @param {?} img
         * @param {?} i
         * @return {?}
         */
        (img, i) => {
            img.index = i;
        }));
    }
    /**
     * @return {?}
     */
    updateToolbars() {
        this.toolbars.forEach((/**
         * @param {?} toolbar
         * @return {?}
         */
        toolbar => {
            if (toolbar.position === 'top') {
                this.topToolbar = toolbar.content;
            }
            else {
                this.bottomToolbar = toolbar.content;
            }
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeyboardEvents(event) {
        if (event.keyCode === Key.RightArrow) {
            this.next();
            return;
        }
        if (event.keyCode === Key.LeftArrow) {
            this.prev();
            return;
        }
        if (event.keyCode === Key.DownArrow || event.keyCode === Key.Escape) {
            this.close();
            return;
        }
    }
    /**
     * @return {?}
     */
    next() {
        if (this.overlay &&
            this.overlay.open &&
            this.initialImage &&
            this.initialImage.viewerState === 'hidden') {
            this.slides.slideNext();
        }
    }
    /**
     * @return {?}
     */
    prev() {
        if (this.overlay &&
            this.overlay.open &&
            this.initialImage &&
            this.initialImage.viewerState === 'hidden') {
            this.slides.slidePrev();
        }
    }
    /**
     * @param {?} initial
     * @return {?}
     */
    open(initial) {
        this.activeIndex = initial.index;
        this.options.initialSlide = this.activeIndex;
        this.overlay.show(50000);
        this.initialImage = initial;
        this.initialImage.openTiming = this.openTiming;
        this.initialImage.closeTiming = this.closeTiming;
        this.initialImage.backdropColor = this.ambient
            ? this.imageService.getAverageRGB(this.images.toArray()[this.activeIndex].image.nativeElement)
            : '#000';
        this.showControls();
    }
    /**
     * @return {?}
     */
    close() {
        this.closeFromPullDown(0);
    }
    /**
     * @return {?}
     */
    dismiss() {
        this.closeFromPullDown(0, false);
    }
    /**
     * @param {?} progress
     * @param {?=} emit
     * @return {?}
     */
    closeFromPullDown(progress, emit = true) {
        if (emit) {
            this.willClose.emit(this.initialImage);
        }
        this.transformSlides(0);
        /** @type {?} */
        const sameAsInitial = this.images.toArray()[this.activeIndex].index === this.initialImage.index;
        /** @type {?} */
        const position = this.getImagePosition(this.images.toArray()[this.activeIndex].image, progress);
        if (sameAsInitial) {
            this.initialImage.close(position);
        }
        else {
            /** @type {?} */
            const src = this.initialImage.src;
            this.initialImage.src = this.images.toArray()[this.activeIndex].src;
            this.initialImage.slideOut(position, src);
        }
        if (this.inFullscreen) {
            this.closeFullscreen();
        }
        this.slidesLoaded = false;
        this.overlay.hide();
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    resetPan(progress) {
        this.resetSlides(progress);
    }
    /**
     * @private
     * @param {?} element
     * @param {?=} offset
     * @return {?}
     */
    getImagePosition(element, offset = 0) {
        /** @type {?} */
        const bounds = element.nativeElement.getBoundingClientRect();
        return {
            top: bounds.top,
            left: bounds.left,
            height: element.nativeElement.clientHeight,
            width: element.nativeElement.clientWidth,
            translate: this.platform.height() / 2 + offset * 120
        };
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    transformSlides(progress) {
        if (this.controlsVisible) {
            this.hideControls();
        }
        this.domCtrl.write((/**
         * @return {?}
         */
        () => {
            this.renderer.setStyle(this.viewer.nativeElement, 'transform', `translateY(${progress * 120}px)`);
        }));
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    resetSlides(progress) {
        /** @type {?} */
        const reset = this.animation.build([
            style({ transform: `translateY(${progress * 120}px)` }),
            animate('150ms', style({ transform: `translateY(0px)` }))
        ]);
        /** @type {?} */
        const animation = reset.create(this.viewer.nativeElement);
        animation.play();
        animation.onDone((/**
         * @return {?}
         */
        () => {
            animation.destroy();
            this.transformSlides(0);
            this.showControls();
        }));
    }
    /**
     * @return {?}
     */
    slideDidChange() {
        this.activeIndex = this.swiper.nativeElement.swiper.activeIndex;
    }
    /**
     * @return {?}
     */
    ionSlideNextStart() {
        if (this.slidesLoaded) {
            this.updateBackdrop(this.activeIndex + 1);
        }
    }
    /**
     * @return {?}
     */
    ionSlidePrevStart() {
        if (this.slidesLoaded) {
            this.updateBackdrop(this.activeIndex - 1);
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    updateBackdrop(index) {
        this.initialImage.backdropColor = this.ambient
            ? this.imageService.getAverageRGB(this.images.toArray()[index].image.nativeElement)
            : '#000';
        this.backdropChange.emit(this.initialImage);
    }
    /**
     * @return {?}
     */
    onSlidesLoad() {
        this.slidesLoaded = true;
        this.didOpen.emit(this.initialImage);
        this.activeIndex = this.swiper.nativeElement.swiper.activeIndex;
        this.initialImage.viewerState = 'hidden';
        this.swiper.nativeElement.swiper.on('click', (/**
         * @return {?}
         */
        () => {
            this.handleSingleTap();
        }));
    }
    /**
     * @return {?}
     */
    fullscreen() {
        if (this.inFullscreen) {
            this.closeFullscreen();
        }
        else {
            this.openFullscreen();
        }
    }
    /**
     * @return {?}
     */
    openFullscreen() {
        /** @type {?} */
        const elem = document.documentElement;
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        }
        else if (elem['mozRequestFullScreen']) {
            /* Firefox */
            elem['mozRequestFullScreen']();
        }
        else if (elem['webkitRequestFullscreen']) {
            /* Chrome, Safari and Opera */
            elem['webkitRequestFullscreen']();
        }
        else if (elem['msRequestFullscreen']) {
            /* IE/Edge */
            elem['msRequestFullscreen']();
        }
        this.inFullscreen = true;
    }
    /**
     * @return {?}
     */
    closeFullscreen() {
        this.inFullscreen = false;
        if (this.document.exitFullscreen) {
            this.document.exitFullscreen();
        }
        else if (this.document.mozCancelFullScreen) {
            /* Firefox */
            this.document.mozCancelFullScreen();
        }
        else if (this.document.webkitExitFullscreen) {
            /* Chrome, Safari and Opera */
            this.document.webkitExitFullscreen();
        }
        else if (this.document.msExitFullscreen) {
            /* IE/Edge */
            this.document.msExitFullscreen();
        }
    }
    /**
     * @return {?}
     */
    zoom() {
        if (this.zoomedIn) {
            this.zoomOut();
        }
        else {
            this.zoomIn();
        }
    }
    /**
     * @return {?}
     */
    zoomIn() {
        this.swiper.nativeElement.swiper.zoom.in();
        this.zoomedIn = true;
    }
    /**
     * @return {?}
     */
    zoomOut() {
        this.swiper.nativeElement.swiper.zoom.out();
        this.zoomedIn = false;
    }
    /**
     * @return {?}
     */
    handleSingleTap() {
        this.controlsVisible = !this.controlsVisible;
        this.change.detectChanges();
    }
    /**
     * @return {?}
     */
    hideControls() {
        this.controlsVisible = false;
        this.change.detectChanges();
    }
    /**
     * @return {?}
     */
    showControls() {
        this.controlsVisible = true;
        this.change.detectChanges();
    }
}
FivGallery.decorators = [
    { type: Component, args: [{
                selector: 'fiv-gallery',
                template: "<ng-content></ng-content>\n<fiv-overlay #overlay>\n\n  <div [@slideDown] *ngIf=\"controlsVisible && topToolbar\" class=\"gallery-toolbar header\" color=\"transparent\">\n    <ng-container [ngTemplateOutlet]=\"topToolbar\">\n    </ng-container>\n  </div>\n\n  <ng-container *fivIf=\"['desktop']\">\n    <ion-fab [@scale] *ngIf=\"controlsVisible && images?.length > 0 && pagerVisible\" vertical=\"center\" horizontal=\"start\"\n      slot=\"fixed\">\n      <ion-fab-button color=\"light\" (click)=\"prev()\" [disabled]=\"activeIndex === 0\">\n        <ion-icon name=\"arrow-back\"></ion-icon>\n      </ion-fab-button>\n    </ion-fab>\n  </ng-container>\n\n  <div #viewer class=\"viewer\" fivPull [maxPullHeight]=\"160\" [minPullHeight]=\"120\" (fivPull)=\"transformSlides($event)\"\n    (fivRefresh)=\"closeFromPullDown($event)\" (fivCancel)=\"resetPan($event)\" [enableScroll]=\"true\">\n    <ion-slides #slider *ngIf=\"overlay.open\" [ngClass]=\"[initialImage?.viewerState]\"\n      (ionSlideDidChange)=\"slideDidChange()\" (ionSlideNextStart)=\"ionSlideNextStart()\"\n      (ionSlidePrevStart)=\"ionSlidePrevStart()\" (ionSlidesDidLoad)=\"onSlidesLoad()\" [options]=\"options\">\n      <ion-slide *ngFor=\"let image of images; let i = index\">\n        <div class=\"swiper-zoom-container\">\n          <img [ngClass]=\"{'instant': activeIndex !== i}\" [src]=\"image.src\">\n        </div>\n      </ion-slide>\n    </ion-slides>\n  </div>\n\n  <ng-container *fivIf=\"['desktop']\">\n    <ion-fab [@scale] *ngIf=\"controlsVisible && pagerVisible\" vertical=\"center\" horizontal=\"end\" slot=\"fixed\">\n      <ion-fab-button color=\"light\" (click)=\"next()\" [disabled]=\"activeIndex === images.length - 1\">\n        <ion-icon name=\"arrow-forward\"></ion-icon>\n      </ion-fab-button>\n    </ion-fab>\n  </ng-container>\n\n  <div [@slideUp] *ngIf=\"controlsVisible && bottomToolbar\" class=\"gallery-toolbar footer\" color=\"transparent\">\n    <ng-container [ngTemplateOutlet]=\"bottomToolbar\">\n    </ng-container>\n  </div>\n\n\n</fiv-overlay>",
                animations: [
                    trigger('scale', [
                        transition('void => *', [
                            style({ opacity: 0, transform: 'scale(0)' }),
                            animate('125ms', style({ opacity: 1, transform: 'scale(1)' }))
                        ]),
                        transition('* => void', [
                            style({ opacity: 1, transform: 'scale(1)' }),
                            animate('125ms', style({ opacity: 0, transform: 'scale(0)' }))
                        ])
                    ]),
                    trigger('slideUp', [
                        transition('void => *', [
                            style({ opacity: 0, transform: 'translateY(100%)' }),
                            animate('75ms', style({ opacity: 1, transform: 'translateY(0%)' }))
                        ]),
                        transition('* => void', [
                            style({ opacity: 1, transform: 'translateY(0%)' }),
                            animate('75ms', style({ opacity: 0, transform: 'translateY(100%)' }))
                        ])
                    ]),
                    trigger('slideDown', [
                        transition('* => void', [
                            style({ opacity: 0, transform: 'translateY(0%)' }),
                            animate('75ms', style({ opacity: 1, transform: 'translateY(-100%)' }))
                        ]),
                        transition('void => *', [
                            style({ opacity: 1, transform: 'translateY(-100%)' }),
                            animate('75ms', style({ opacity: 0, transform: 'translateY(0%)' }))
                        ])
                    ])
                ],
                styles: [".viewer{width:100vw;height:100vh}.viewer ion-slides{height:100%}.viewer img{height:auto;max-height:100%;width:auto;max-width:100%}.viewer img.instant{transition-duration:0s!important}.backdrop{background:rgba(0,0,0,.97);width:100vw;height:100vh;position:absolute}.gallery-toolbar{width:100%;--fiv-gallery-toolbar-color:#fff;position:absolute;color:var(--fiv-gallery-toolbar-color)}.gallery-toolbar.header{top:env(safe-area-inset-top)}.gallery-toolbar.footer{bottom:env(safe-area-inset-bottom)}ion-slides.in,ion-slides.out{visibility:hidden}"]
            }] }
];
/** @nocollapse */
FivGallery.ctorParameters = () => [
    { type: DomController },
    { type: Renderer2 },
    { type: AnimationBuilder },
    { type: ChangeDetectorRef },
    { type: Platform },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ImageService }
];
FivGallery.propDecorators = {
    overlay: [{ type: ViewChild, args: ['overlay',] }],
    viewer: [{ type: ViewChild, args: ['viewer',] }],
    swiper: [{ type: ViewChild, args: ['slider', { read: ElementRef },] }],
    slides: [{ type: ViewChild, args: ['slider',] }],
    images: [{ type: ContentChildren, args: [forwardRef((/**
                 * @return {?}
                 */
                () => FivGalleryImage)), { descendants: true },] }],
    toolbars: [{ type: ContentChildren, args: [FivGalleryToolbar,] }],
    pagerVisible: [{ type: Input }],
    ambient: [{ type: Input }],
    openTiming: [{ type: Input }],
    closeTiming: [{ type: Input }],
    willOpen: [{ type: Output }],
    willClose: [{ type: Output }],
    didOpen: [{ type: Output }],
    didClose: [{ type: Output }],
    backdropChange: [{ type: Output }],
    keyEvent: [{ type: HostListener, args: ['window:keyup', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FivGallery.prototype.overlay;
    /** @type {?} */
    FivGallery.prototype.viewer;
    /** @type {?} */
    FivGallery.prototype.swiper;
    /** @type {?} */
    FivGallery.prototype.slides;
    /** @type {?} */
    FivGallery.prototype.images;
    /** @type {?} */
    FivGallery.prototype.toolbars;
    /** @type {?} */
    FivGallery.prototype.topToolbar;
    /** @type {?} */
    FivGallery.prototype.bottomToolbar;
    /** @type {?} */
    FivGallery.prototype.activeIndex;
    /** @type {?} */
    FivGallery.prototype.options;
    /** @type {?} */
    FivGallery.prototype.initialImage;
    /** @type {?} */
    FivGallery.prototype.inFullscreen;
    /** @type {?} */
    FivGallery.prototype.zoomedIn;
    /** @type {?} */
    FivGallery.prototype.controlsVisible;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.slidesLoaded;
    /** @type {?} */
    FivGallery.prototype.pagerVisible;
    /** @type {?} */
    FivGallery.prototype.ambient;
    /** @type {?} */
    FivGallery.prototype.openTiming;
    /** @type {?} */
    FivGallery.prototype.closeTiming;
    /** @type {?} */
    FivGallery.prototype.willOpen;
    /** @type {?} */
    FivGallery.prototype.willClose;
    /** @type {?} */
    FivGallery.prototype.didOpen;
    /** @type {?} */
    FivGallery.prototype.didClose;
    /** @type {?} */
    FivGallery.prototype.backdropChange;
    /** @type {?} */
    FivGallery.prototype.$onDestroy;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.domCtrl;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.animation;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.change;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.document;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.imageService;
}
//# sourceMappingURL=data:application/json;base64,
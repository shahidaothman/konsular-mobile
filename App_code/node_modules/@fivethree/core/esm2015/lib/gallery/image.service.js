/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class ImageService {
    constructor() { }
    /**
     * @param {?} imgEl
     * @return {?}
     */
    getAverageRGB(imgEl) {
        /** @type {?} */
        const blockSize = 5;
        /** @type {?} */
        const // only visit every 5 pixels
        defaultRGB = { r: 0, g: 0, b: 0 };
        /** @type {?} */
        const // for non-supporting envs
        canvas = document.createElement('canvas');
        /** @type {?} */
        const context = canvas.getContext && canvas.getContext('2d');
        /** @type {?} */
        const rgb = { r: 0, g: 0, b: 0 };
        /** @type {?} */
        let data;
        /** @type {?} */
        let width;
        /** @type {?} */
        let height;
        /** @type {?} */
        let length;
        /** @type {?} */
        let i = -4;
        /** @type {?} */
        let count = 0;
        if (!context) {
            return `rgb(${defaultRGB.r},${defaultRGB.g},${defaultRGB.b})`;
        }
        height = canvas.height =
            imgEl.naturalHeight || imgEl.offsetHeight || imgEl.height;
        width = canvas.width =
            imgEl.naturalWidth || imgEl.offsetWidth || imgEl.width;
        context.drawImage(imgEl, 0, 0);
        try {
            data = context.getImageData(0, 0, width, height);
        }
        catch (e) {
            /* security error, img on diff domain */
            return `rgb(${defaultRGB.r},${defaultRGB.g},${defaultRGB.b})`;
        }
        length = data.data.length;
        while ((i += blockSize * 4) < length) {
            ++count;
            rgb.r += data.data[i];
            rgb.g += data.data[i + 1];
            rgb.b += data.data[i + 2];
        }
        // ~~ used to floor values
        rgb.r = Math.floor(rgb.r / count);
        rgb.g = Math.floor(rgb.g / count);
        rgb.b = Math.floor(rgb.b / count);
        return `rgb(${rgb.r},${rgb.g},${rgb.b})`;
    }
}
ImageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ImageService.ctorParameters = () => [];
/** @nocollapse */ ImageService.ngInjectableDef = i0.defineInjectable({ factory: function ImageService_Factory() { return new ImageService(); }, token: ImageService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXZldGhyZWUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9nYWxsZXJ5L2ltYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDLE1BQU0sT0FBTyxZQUFZO0lBQ3ZCLGdCQUFlLENBQUM7Ozs7O0lBRWhCLGFBQWEsQ0FBQyxLQUFLOztjQUNYLFNBQVMsR0FBRyxDQUFDOztjQUFFLDRCQUE0QjtRQUMvQyxVQUFVLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTs7Y0FBRSwwQkFBMEI7UUFDN0QsTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDOztjQUN6QyxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQzs7Y0FDdEQsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7O1lBRXhCLElBQUk7O1lBQ04sS0FBSzs7WUFDTCxNQUFNOztZQUNOLE1BQU07O1lBQ04sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7WUFDTixLQUFLLEdBQUcsQ0FBQztRQUVYLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixPQUFPLE9BQU8sVUFBVSxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztTQUMvRDtRQUVELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTTtZQUNwQixLQUFLLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxZQUFZLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUM1RCxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUs7WUFDbEIsS0FBSyxDQUFDLFlBQVksSUFBSSxLQUFLLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFFekQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRS9CLElBQUk7WUFDRixJQUFJLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNsRDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1Ysd0NBQXdDO1lBRXhDLE9BQU8sT0FBTyxVQUFVLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDO1NBQy9EO1FBRUQsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRTFCLE9BQU8sQ0FBQyxDQUFDLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sRUFBRTtZQUNwQyxFQUFFLEtBQUssQ0FBQztZQUNSLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzFCLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDM0I7UUFFRCwwQkFBMEI7UUFDMUIsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDbEMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDbEMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFFbEMsT0FBTyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDM0MsQ0FBQzs7O1lBdERGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSW1hZ2VTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIGdldEF2ZXJhZ2VSR0IoaW1nRWwpIHtcbiAgICBjb25zdCBibG9ja1NpemUgPSA1LCAvLyBvbmx5IHZpc2l0IGV2ZXJ5IDUgcGl4ZWxzXG4gICAgICBkZWZhdWx0UkdCID0geyByOiAwLCBnOiAwLCBiOiAwIH0sIC8vIGZvciBub24tc3VwcG9ydGluZyBlbnZzXG4gICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcbiAgICAgIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCAmJiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSxcbiAgICAgIHJnYiA9IHsgcjogMCwgZzogMCwgYjogMCB9O1xuXG4gICAgbGV0IGRhdGEsXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIGkgPSAtNCxcbiAgICAgIGNvdW50ID0gMDtcblxuICAgIGlmICghY29udGV4dCkge1xuICAgICAgcmV0dXJuIGByZ2IoJHtkZWZhdWx0UkdCLnJ9LCR7ZGVmYXVsdFJHQi5nfSwke2RlZmF1bHRSR0IuYn0pYDtcbiAgICB9XG5cbiAgICBoZWlnaHQgPSBjYW52YXMuaGVpZ2h0ID1cbiAgICAgIGltZ0VsLm5hdHVyYWxIZWlnaHQgfHwgaW1nRWwub2Zmc2V0SGVpZ2h0IHx8IGltZ0VsLmhlaWdodDtcbiAgICB3aWR0aCA9IGNhbnZhcy53aWR0aCA9XG4gICAgICBpbWdFbC5uYXR1cmFsV2lkdGggfHwgaW1nRWwub2Zmc2V0V2lkdGggfHwgaW1nRWwud2lkdGg7XG5cbiAgICBjb250ZXh0LmRyYXdJbWFnZShpbWdFbCwgMCwgMCk7XG5cbiAgICB0cnkge1xuICAgICAgZGF0YSA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIHNlY3VyaXR5IGVycm9yLCBpbWcgb24gZGlmZiBkb21haW4gKi9cblxuICAgICAgcmV0dXJuIGByZ2IoJHtkZWZhdWx0UkdCLnJ9LCR7ZGVmYXVsdFJHQi5nfSwke2RlZmF1bHRSR0IuYn0pYDtcbiAgICB9XG5cbiAgICBsZW5ndGggPSBkYXRhLmRhdGEubGVuZ3RoO1xuXG4gICAgd2hpbGUgKChpICs9IGJsb2NrU2l6ZSAqIDQpIDwgbGVuZ3RoKSB7XG4gICAgICArK2NvdW50O1xuICAgICAgcmdiLnIgKz0gZGF0YS5kYXRhW2ldO1xuICAgICAgcmdiLmcgKz0gZGF0YS5kYXRhW2kgKyAxXTtcbiAgICAgIHJnYi5iICs9IGRhdGEuZGF0YVtpICsgMl07XG4gICAgfVxuXG4gICAgLy8gfn4gdXNlZCB0byBmbG9vciB2YWx1ZXNcbiAgICByZ2IuciA9IE1hdGguZmxvb3IocmdiLnIgLyBjb3VudCk7XG4gICAgcmdiLmcgPSBNYXRoLmZsb29yKHJnYi5nIC8gY291bnQpO1xuICAgIHJnYi5iID0gTWF0aC5mbG9vcihyZ2IuYiAvIGNvdW50KTtcblxuICAgIHJldHVybiBgcmdiKCR7cmdiLnJ9LCR7cmdiLmd9LCR7cmdiLmJ9KWA7XG4gIH1cbn1cbiJdfQ==
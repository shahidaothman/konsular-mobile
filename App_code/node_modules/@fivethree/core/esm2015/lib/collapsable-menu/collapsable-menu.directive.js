/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Platform, IonMenu, IonSplitPane } from '@ionic/angular';
import { Directive, HostBinding, Input, HostListener, Host, Optional } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { map } from 'rxjs/operators';
export class FivCollapsableMenu {
    /**
     * @param {?} sanitizer
     * @param {?} menu
     * @param {?} split
     * @param {?} platform
     */
    constructor(sanitizer, menu, split, platform) {
        this.sanitizer = sanitizer;
        this.menu = menu;
        this.split = split;
        this.platform = platform;
        this.collapsed = false;
        this.hovering = false;
        this.splitVisible = false;
        this.hoverMenu = true;
        this.width = 64;
        this.minWidth = 270;
        this.maxWidth = this.platform.width() * 0.28;
        this.split.ionSplitPaneVisible
            .pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        event => event.detail.visible)))
            .subscribe((/**
         * @param {?} visible
         * @return {?}
         */
        visible => (this.splitVisible = visible)));
    }
    /**
     * @return {?}
     */
    get myStyle() {
        if (this.collapsed && this.splitVisible) {
            return (this.sanitizer
                // tslint:disable-next-line:max-line-length
                .bypassSecurityTrustStyle(`min-width: ${this.width}px; max-width: ${this.width}px; --border: 0; transition: all cubic-bezier(.55,0,.1,1) 200ms;`));
        }
        else {
            if (!this.splitVisible) {
                return (this.sanitizer
                    // tslint:disable-next-line:max-line-length
                    .bypassSecurityTrustStyle(`--border: 0; transition: all cubic-bezier(.55,0,.1,1) 200ms;`));
            }
            else {
                return (this.sanitizer
                    // tslint:disable-next-line:max-line-length
                    .bypassSecurityTrustStyle(`min-width: ${this.minWidth}px; max-width: ${this.maxWidth}px; --border: 0; transition: all cubic-bezier(.55,0,.1,1) 200ms;`));
            }
        }
    }
    /**
     * @return {?}
     */
    hover() {
        if (this.collapsed && !this.hovering && this.hoverMenu) {
            this.open();
            this.hovering = true;
        }
    }
    /**
     * @return {?}
     */
    blur() {
        if (!this.hoverMenu) {
            return;
        }
        if (!this.collapsed && this.hovering) {
            this.close();
        }
        this.hovering = false;
    }
    /**
     * @param {?} collapse
     * @return {?}
     */
    set fivCollapseMenu(collapse) {
        this.collapsed = collapse;
    }
    /**
     * @return {?}
     */
    toggleMenu() {
        if (this.hovering) {
            this.open();
            this.hovering = false;
            return;
        }
        this.collapsed = !this.collapsed;
    }
    /**
     * @return {?}
     */
    open() {
        this.collapsed = false;
    }
    /**
     * @return {?}
     */
    close() {
        this.collapsed = true;
    }
}
FivCollapsableMenu.decorators = [
    { type: Directive, args: [{
                selector: '[fivCollapseMenu]',
                exportAs: 'menuCollapse'
            },] }
];
/** @nocollapse */
FivCollapsableMenu.ctorParameters = () => [
    { type: DomSanitizer },
    { type: IonMenu, decorators: [{ type: Host }] },
    { type: IonSplitPane, decorators: [{ type: Host }, { type: Optional }] },
    { type: Platform }
];
FivCollapsableMenu.propDecorators = {
    hoverMenu: [{ type: Input }],
    width: [{ type: Input }],
    minWidth: [{ type: Input }],
    maxWidth: [{ type: Input }],
    myStyle: [{ type: HostBinding, args: ['style',] }],
    hover: [{ type: HostListener, args: ['mouseenter',] }],
    blur: [{ type: HostListener, args: ['mouseleave',] }],
    fivCollapseMenu: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivCollapsableMenu.prototype.collapsed;
    /** @type {?} */
    FivCollapsableMenu.prototype.hovering;
    /** @type {?} */
    FivCollapsableMenu.prototype.splitVisible;
    /** @type {?} */
    FivCollapsableMenu.prototype.hoverMenu;
    /** @type {?} */
    FivCollapsableMenu.prototype.width;
    /** @type {?} */
    FivCollapsableMenu.prototype.minWidth;
    /** @type {?} */
    FivCollapsableMenu.prototype.maxWidth;
    /**
     * @type {?}
     * @private
     */
    FivCollapsableMenu.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    FivCollapsableMenu.prototype.menu;
    /**
     * @type {?}
     * @private
     */
    FivCollapsableMenu.prototype.split;
    /**
     * @type {?}
     * @private
     */
    FivCollapsableMenu.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2FibGUtbWVudS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZml2ZXRocmVlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29sbGFwc2FibGUtbWVudS9jb2xsYXBzYWJsZS1tZW51LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakUsT0FBTyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsS0FBSyxFQUNMLFlBQVksRUFDWixJQUFJLEVBQ0osUUFBUSxFQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBYSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRSxPQUFPLEVBQU8sR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFNMUMsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7OztJQVM3QixZQUNVLFNBQXVCLEVBQ2YsSUFBYSxFQUNELEtBQW1CLEVBQ3ZDLFFBQWtCO1FBSGxCLGNBQVMsR0FBVCxTQUFTLENBQWM7UUFDZixTQUFJLEdBQUosSUFBSSxDQUFTO1FBQ0QsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUN2QyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBWjVCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNaLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDakIsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNYLGFBQVEsR0FBRyxHQUFHLENBQUM7UUFDZixhQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFRL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUI7YUFDM0IsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtB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Qzs7Ozs7SUFDL0Msc0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGxhdGZvcm0sIElvbk1lbnUsIElvblNwbGl0UGFuZSB9IGZyb20gJ0Bpb25pYy9hbmd1bGFyJztcbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBIb3N0TGlzdGVuZXIsXG4gIEhvc3QsXG4gIE9wdGlvbmFsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2FmZVN0eWxlLCBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IHRhcCwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZml2Q29sbGFwc2VNZW51XScsXG4gIGV4cG9ydEFzOiAnbWVudUNvbGxhcHNlJ1xufSlcbmV4cG9ydCBjbGFzcyBGaXZDb2xsYXBzYWJsZU1lbnUge1xuICBjb2xsYXBzZWQgPSBmYWxzZTtcbiAgaG92ZXJpbmcgPSBmYWxzZTtcbiAgc3BsaXRWaXNpYmxlID0gZmFsc2U7XG4gIEBJbnB1dCgpIGhvdmVyTWVudSA9IHRydWU7XG4gIEBJbnB1dCgpIHdpZHRoID0gNjQ7XG4gIEBJbnB1dCgpIG1pbldpZHRoID0gMjcwO1xuICBASW5wdXQoKSBtYXhXaWR0aCA9IHRoaXMucGxhdGZvcm0ud2lkdGgoKSAqIDAuMjg7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcixcbiAgICBASG9zdCgpIHByaXZhdGUgbWVudTogSW9uTWVudSxcbiAgICBASG9zdCgpIEBPcHRpb25hbCgpIHByaXZhdGUgc3BsaXQ6IElvblNwbGl0UGFuZSxcbiAgICBwcml2YXRlIHBsYXRmb3JtOiBQbGF0Zm9ybVxuICApIHtcbiAgICB0aGlzLnNwbGl0LmlvblNwbGl0UGFuZVZpc2libGVcbiAgICAgIC5waXBlKG1hcChldmVudCA9PiBldmVudC5kZXRhaWwudmlzaWJsZSkpXG4gICAgICAuc3Vic2NyaWJlKHZpc2libGUgPT4gKHRoaXMuc3BsaXRWaXNpYmxlID0gdmlzaWJsZSkpO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZScpXG4gIGdldCBteVN0eWxlKCk6IFNhZmVTdHlsZSB7XG4gICAgaWYgKHRoaXMuY29sbGFwc2VkICYmIHRoaXMuc3BsaXRWaXNpYmxlKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLnNhbml0aXplclxuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICAgICAgICAuYnlwYXNzU2VjdXJpdHlUcnVzdFN0eWxlKFxuICAgICAgICAgICAgYG1pbi13aWR0aDogJHt0aGlzLndpZHRofXB4OyBtYXgtd2lkdGg6ICR7dGhpcy53aWR0aH1weDsgLS1ib3JkZXI6IDA7IHRyYW5zaXRpb246IGFsbCBjdWJpYy1iZXppZXIoLjU1LDAsLjEsMSkgMjAwbXM7YFxuICAgICAgICAgIClcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdGhpcy5zcGxpdFZpc2libGUpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICB0aGlzLnNhbml0aXplclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgICAgICAgICAgLmJ5cGFzc1NlY3VyaXR5VHJ1c3RTdHlsZShcbiAgICAgICAgICAgICAgYC0tYm9yZGVyOiAwOyB0cmFuc2l0aW9uOiBhbGwgY3ViaWMtYmV6aWVyKC41NSwwLC4xLDEpIDIwMG1zO2BcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgdGhpcy5zYW5pdGl6ZXJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICAgICAgICAgIC5ieXBhc3NTZWN1cml0eVRydXN0U3R5bGUoXG4gICAgICAgICAgICAgIGBtaW4td2lkdGg6ICR7dGhpcy5taW5XaWR0aH1weDsgbWF4LXdpZHRoOiAke3RoaXMubWF4V2lkdGh9cHg7IC0tYm9yZGVyOiAwOyB0cmFuc2l0aW9uOiBhbGwgY3ViaWMtYmV6aWVyKC41NSwwLC4xLDEpIDIwMG1zO2BcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJykgaG92ZXIoKSB7XG4gICAgaWYgKHRoaXMuY29sbGFwc2VkICYmICF0aGlzLmhvdmVyaW5nICYmIHRoaXMuaG92ZXJNZW51KSB7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICAgIHRoaXMuaG92ZXJpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlbGVhdmUnKSBibHVyKCkge1xuICAgIGlmICghdGhpcy5ob3Zlck1lbnUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmNvbGxhcHNlZCAmJiB0aGlzLmhvdmVyaW5nKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICAgIHRoaXMuaG92ZXJpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIEBJbnB1dCgpIHNldCBmaXZDb2xsYXBzZU1lbnUoY29sbGFwc2U6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmNvbGxhcHNlZCA9IGNvbGxhcHNlO1xuICB9XG5cbiAgdG9nZ2xlTWVudSgpIHtcbiAgICBpZiAodGhpcy5ob3ZlcmluZykge1xuICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB0aGlzLmhvdmVyaW5nID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY29sbGFwc2VkID0gIXRoaXMuY29sbGFwc2VkO1xuICB9XG5cbiAgb3BlbigpIHtcbiAgICB0aGlzLmNvbGxhcHNlZCA9IGZhbHNlO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5jb2xsYXBzZWQgPSB0cnVlO1xuICB9XG59XG4iXX0=
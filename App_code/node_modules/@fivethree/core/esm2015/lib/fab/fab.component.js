/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FivFeatureDiscovery } from './../feature-discovery/feature-discovery.component';
import { FivLoadingProgressBar } from './../loading-progress-bar/loading-progress-bar.component';
import { FivIcon } from './../icon/icon.component';
import { Component, Input, ViewChild, Output, EventEmitter, Renderer2, ContentChild, TemplateRef, Optional } from '@angular/core';
import { animate, style, transition, trigger } from '@angular/animations';
import { FivLoadingSpinner } from '../loading-spinner/loading-spinner.component';
import { IonContent, IonLabel } from '@ionic/angular';
import { Subject } from 'rxjs';
import { takeUntil, tap, filter, repeat, map, pairwise, distinctUntilChanged } from 'rxjs/operators';
export class FivFab {
    /**
     * @param {?} renderer
     * @param {?} content
     */
    constructor(renderer, content) {
        this.renderer = renderer;
        this.content = content;
        this.vertical = 'none';
        this.horizontal = 'none';
        this.mode = 'normal';
        this.spinColor = 'primary';
        this.disabled = false;
        this.visible = true;
        this.pulse = false;
        this._scroll = true;
        this.fivComplete = new EventEmitter();
        this.fivRefresh = new EventEmitter();
        this.fivHidden = new EventEmitter();
        this.fivShow = new EventEmitter();
        this.fivTransition = new EventEmitter();
        this.loading = false;
        this.extended = false;
        this.iconState = 'normal';
        this.currentDeltaY = 0;
        this.$onDestroy = new Subject();
        this.params = {
            fromTransform: 'translateX(-50%) scale(0)',
            toTransform: 'translateX(-50%) scale(1)'
        };
        this.params = {
            toTransform: this.toTransform,
            fromTransform: this.fromTransform
        };
    }
    /**
     * @param {?} scroll
     * @return {?}
     */
    set scroll(scroll) {
        this._scroll = scroll;
        this.$onDestroy.next();
        this.ngOnInit();
    }
    /**
     * @return {?}
     */
    get scroll() {
        return this._scroll;
    }
    /**
     * @return {?}
     */
    get fromTransform() {
        return this.horizontal === 'center'
            ? 'scale(0) translateX(-50%)'
            : 'scale(0)';
    }
    /**
     * @return {?}
     */
    get toTransform() {
        return this.horizontal === 'center'
            ? 'translateX(-50%) scale(1)'
            : 'scale(1)';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.content) {
            return;
        }
        if (!this.scroll) {
            return;
        }
        this.content.scrollEvents = true;
        /** @type {?} */
        const directionChange = this.content.ionScroll.pipe(map((/**
         * @param {?} ev
         * @return {?}
         */
        ev => ev.detail.deltaY)), pairwise(), map((/**
         * @param {?} __0
         * @return {?}
         */
        ([y1, y2]) => (y2 < y1 ? 'Up' : 'Down'))), distinctUntilChanged(), takeUntil(this.content.ionScrollEnd), repeat());
        /** @type {?} */
        const up = directionChange.pipe(filter((/**
         * @param {?} direction
         * @return {?}
         */
        direction => direction === 'Up')));
        /** @type {?} */
        const down = directionChange.pipe(filter((/**
         * @param {?} direction
         * @return {?}
         */
        direction => direction === 'Down')));
        up.pipe(tap((/**
         * @return {?}
         */
        () => this.labelComp ? (this.extended = true) : (this.visible = true))), takeUntil(this.$onDestroy)).subscribe();
        down
            .pipe(tap((/**
         * @return {?}
         */
        () => this.labelComp ? (this.extended = false) : (this.visible = false))), takeUntil(this.$onDestroy))
            .subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.$onDestroy.next();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.extended = !!this.labelComp;
    }
    /**
     * @return {?}
     */
    load() {
        this.loading = true;
        this.fivRefresh.emit(this);
    }
    /**
     * @return {?}
     */
    unload() {
        if (this.bar) {
            this.bar.unload();
        }
        this.loading = false;
    }
    /**
     * @return {?}
     */
    complete() {
        if (this.loading) {
            if (this.spinner) {
                this.spinner.completeIn(1000);
            }
            else if (this.bar) {
                this.bar.complete();
            }
        }
    }
    /**
     * @return {?}
     */
    fillAnimationDone() {
        this.fivComplete.emit(this);
        this.unload();
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    rotate(progress) {
        this.renderer.setStyle(this.spinner._elementRef.nativeElement, 'transform', `rotateZ(${(progress / 200) * 360}deg)`);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    fabAnimDone(event) {
        if (event.fromState === 'void') {
            this.fivShow.emit(this);
        }
        if (event.toState === 'void') {
            this.fivHidden.emit(this);
        }
    }
}
FivFab.decorators = [
    { type: Component, args: [{
                selector: 'fiv-fab',
                template: "<ion-fab *ngIf=\"visible\" (@fabAnim.done)=\"fabAnimDone($event)\" [@fabAnim]=\"{value: '*',params: params}\"\n  [ngClass]=\"[mode,horizontal,vertical]\" [slot]=\"slot\">\n  <fiv-loading-spinner [color]=\"spinColor\" *ngIf=\"!extended && loading\" (fivProgress)=\"rotate($event)\" #spinner\n    (fivComplete)=\"fillAnimationDone()\" class=\"spinner\" [circleRadius]=\"30\" [diameter]=\"68\" [strokeWidth]=\"4\"\n    [mode]=\"'indeterminate'\">\n  </fiv-loading-spinner>\n\n  <ion-button [ngClass]=\"{'pulse': pulse}\" [color]=\"color\" [disabled]=\"disabled\">\n    <fiv-loading-progress-bar *ngIf=\"extended\" [loading]=\"loading\" (fivComplete)=\"fillAnimationDone()\" #bar>\n    </fiv-loading-progress-bar>\n    <fiv-icon #feature=\"fivFeature\" [fivFeature]=\"feature\" *ngIf=\"iconComp\" [color]=\"iconComp.color\"\n      [name]=\"iconComp.name\" [dotVisible]=\"iconComp.dotVisible\" [indicatorValue]=\"iconComp.indicatorValue\">\n    </fiv-icon>\n    <div [@labelAnim] *ngIf=\"labelComp && extended\">\n      <ng-content select=\"ion-label\"></ng-content>\n    </div>\n  </ion-button>\n</ion-fab>",
                animations: [
                    trigger('fabAnim', [
                        transition('void => *', [
                            style({
                                transform: '{{fromTransform}}'
                            }),
                            animate('250ms ease-out', style({
                                transform: '{{toTransform}}'
                            }))
                        ], {
                            params: {
                                fromTransform: 'scale(0) translateX(-50%)',
                                toTransform: 'translateX(-50%) scale(1)'
                            }
                        }),
                        transition('* => void', [
                            style({
                                transform: '{{toTransform}}'
                            }),
                            animate('250ms ease-in', style({ transform: '{{fromTransform}}' }))
                        ], {
                            params: {
                                fromTransform: 'scale(0) translateX(-50%)',
                                toTransform: 'translateX(-50%) scale(1)'
                            }
                        })
                    ]),
                    trigger('labelAnim', [
                        transition('void => *', [
                            style({ width: '0', opacity: 0 }),
                            animate('140ms', style({ width: '*', opacity: 1 }))
                        ]),
                        transition('* => void', [
                            style({ width: '*', opacity: 1 }),
                            animate('120ms', style({ width: 0, opacity: 0 }))
                        ])
                    ])
                ],
                styles: [":host{--fiv-spinner-size:68px;display:contents}:host(.button-disabled){pointer-events:none}ion-button{--border-radius:28px;height:56px;min-width:56px;-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:0;margin-inline-end:0;margin:0}ion-fab.top{top:10px}ion-fab.top.edge{top:-28px}ion-fab.middle{top:calc(50% - 28px)}ion-fab.bottom.edge{bottom:-28px}ion-fab.bottom{bottom:10px}ion-fab.center{left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}ion-fab.start{left:10px}ion-fab.end{right:calc(10px + var(--ion-safe-area-right,0px))}.pulse{-webkit-animation:1.2s infinite shadow-pulse;animation:1.2s infinite shadow-pulse}fiv-loading-spinner{position:absolute;left:calc((var(--fiv-spinner-size) - 56px)/ -2);top:calc((var(--fiv-spinner-size) - 56px)/ -2)}@-webkit-keyframes shadow-pulse{0%{border-radius:28px;box-shadow:0 0 0 0 rgba(0,0,0,.2)}100%{border-radius:28px;box-shadow:0 0 0 28px transparent}}@keyframes shadow-pulse{0%{border-radius:28px;box-shadow:0 0 0 0 rgba(0,0,0,.2)}100%{border-radius:28px;box-shadow:0 0 0 28px transparent}}"]
            }] }
];
/** @nocollapse */
FivFab.ctorParameters = () => [
    { type: Renderer2 },
    { type: IonContent, decorators: [{ type: Optional }] }
];
FivFab.propDecorators = {
    vertical: [{ type: Input }],
    horizontal: [{ type: Input }],
    mode: [{ type: Input }],
    slot: [{ type: Input }],
    icon: [{ type: Input }],
    spinColor: [{ type: Input }],
    color: [{ type: Input }],
    disabled: [{ type: Input }],
    visible: [{ type: Input }],
    pulse: [{ type: Input }],
    scroll: [{ type: Input }],
    feature: [{ type: Input }],
    fivComplete: [{ type: Output }],
    fivRefresh: [{ type: Output }],
    fivHidden: [{ type: Output }],
    fivShow: [{ type: Output }],
    fivTransition: [{ type: Output }],
    spinner: [{ type: ViewChild, args: ['spinner',] }],
    featureDiscovery: [{ type: ViewChild, args: ['feature',] }],
    bar: [{ type: ViewChild, args: ['bar',] }],
    iconComp: [{ type: ContentChild, args: [FivIcon,] }],
    labelComp: [{ type: ContentChild, args: [IonLabel,] }]
};
if (false) {
    /** @type {?} */
    FivFab.prototype.vertical;
    /** @type {?} */
    FivFab.prototype.horizontal;
    /** @type {?} */
    FivFab.prototype.mode;
    /** @type {?} */
    FivFab.prototype.slot;
    /** @type {?} */
    FivFab.prototype.icon;
    /** @type {?} */
    FivFab.prototype.spinColor;
    /** @type {?} */
    FivFab.prototype.color;
    /** @type {?} */
    FivFab.prototype.disabled;
    /** @type {?} */
    FivFab.prototype.visible;
    /** @type {?} */
    FivFab.prototype.pulse;
    /** @type {?} */
    FivFab.prototype._scroll;
    /** @type {?} */
    FivFab.prototype.feature;
    /** @type {?} */
    FivFab.prototype.fivComplete;
    /** @type {?} */
    FivFab.prototype.fivRefresh;
    /** @type {?} */
    FivFab.prototype.fivHidden;
    /** @type {?} */
    FivFab.prototype.fivShow;
    /** @type {?} */
    FivFab.prototype.fivTransition;
    /** @type {?} */
    FivFab.prototype.spinner;
    /** @type {?} */
    FivFab.prototype.featureDiscovery;
    /** @type {?} */
    FivFab.prototype.bar;
    /** @type {?} */
    FivFab.prototype.iconComp;
    /** @type {?} */
    FivFab.prototype.labelComp;
    /** @type {?} */
    FivFab.prototype.loading;
    /** @type {?} */
    FivFab.prototype.extended;
    /** @type {?} */
    FivFab.prototype.iconState;
    /** @type {?} */
    FivFab.prototype.currentDeltaY;
    /** @type {?} */
    FivFab.prototype.$onDestroy;
    /** @type {?} */
    FivFab.prototype.params;
    /**
     * @type {?}
     * @private
     */
    FivFab.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FivFab.prototype.content;
}
/**
 * @record
 */
export function FabTransitionEvent() { }
if (false) {
    /** @type {?} */
    FabTransitionEvent.prototype.from;
    /** @type {?} */
    FabTransitionEvent.prototype.to;
}
/** @enum {number} */
const FabState = {
    HIDDEN: 0,
    NORMAL: 1,
    EXTENDED: 2,
};
export { FabState };
FabState[FabState.HIDDEN] = 'HIDDEN';
FabState[FabState.NORMAL] = 'NORMAL';
FabState[FabState.EXTENDED] = 'EXTENDED';
//# sourceMappingURL=data:application/json;base64,
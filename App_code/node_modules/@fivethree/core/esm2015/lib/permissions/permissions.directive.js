/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ViewContainerRef, TemplateRef } from '@angular/core';
export class FivPermissions {
    /**
     * @param {?} viewContainer
     * @param {?} templateRef
     */
    constructor(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
        this.allowedPermissions = [];
        this.uPermissions = [];
    }
    /**
     * @param {?} userPermissions
     * @return {?}
     */
    set fivPermissionsUserPermissions(userPermissions) {
        this.uPermissions = userPermissions || [];
        this.updateView();
    }
    /**
     * @param {?} allowed
     * @return {?}
     */
    set fivPermissions(allowed) {
        this.allowedPermissions = allowed || [];
        this.updateView();
    }
    /**
     * @return {?}
     */
    checkPermission() {
        /** @type {?} */
        let show = false;
        this.uPermissions.forEach((/**
         * @param {?} role
         * @return {?}
         */
        role => {
            if (this.allowedPermissions.find((/**
             * @param {?} a
             * @return {?}
             */
            a => a.toUpperCase() === role.toUpperCase()))) {
                show = true;
            }
        }));
        return show;
    }
    /**
     * @return {?}
     */
    updateView() {
        if (this.checkPermission()) {
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
        else {
            this.viewContainer.clear();
        }
    }
}
FivPermissions.decorators = [
    { type: Directive, args: [{
                selector: '[fivPermissions]'
            },] }
];
/** @nocollapse */
FivPermissions.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef }
];
FivPermissions.propDecorators = {
    fivPermissionsUserPermissions: [{ type: Input }],
    fivPermissions: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivPermissions.prototype.allowedPermissions;
    /** @type {?} */
    FivPermissions.prototype.uPermissions;
    /**
     * @type {?}
     * @private
     */
    FivPermissions.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    FivPermissions.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpdmV0aHJlZS9jb3JlLyIsInNvdXJjZXMiOlsibGliL3Blcm1pc3Npb25zL3Blcm1pc3Npb25zLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS2hGLE1BQU0sT0FBTyxjQUFjOzs7OztJQUl6QixZQUNVLGFBQStCLEVBQy9CLFdBQTZCO1FBRDdCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7UUFMdkMsdUJBQWtCLEdBQWEsRUFBRSxDQUFDO1FBQ2xDLGlCQUFZLEdBQWEsRUFBRSxDQUFDO0lBS3pCLENBQUM7Ozs7O0lBRUosSUFBYSw2QkFBNkIsQ0FBQyxlQUF5QjtRQUNsRSxJQUFJLENBQUMsWUFBWSxHQUFHLGVBQWUsSUFBSSxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7Ozs7O0lBRUQsSUFDSSxjQUFjLENBQUMsT0FBaUI7UUFDbEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDeEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7Ozs7SUFFRCxlQUFlOztZQUNULElBQUksR0FBRyxLQUFLO1FBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTzs7OztRQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9CLElBQ0UsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUk7Ozs7WUFDMUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUM1QyxFQUNEO2dCQUNBLElBQUksR0FBRyxJQUFJLENBQUM7YUFDYjtRQUNILENBQUMsRUFBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7O0lBRUQsVUFBVTtRQUNSLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFO1lBQzFCLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3pEO2FBQU07WUFDTCxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzVCO0lBQ0gsQ0FBQzs7O1lBNUNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2FBQzdCOzs7O1lBSjBCLGdCQUFnQjtZQUFFLFdBQVc7Ozs0Q0FjckQsS0FBSzs2QkFLTCxLQUFLOzs7O0lBYk4sNENBQWtDOztJQUNsQyxzQ0FBNEI7Ozs7O0lBRzFCLHVDQUF1Qzs7Ozs7SUFDdkMscUNBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVmlld0NvbnRhaW5lclJlZiwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ZpdlBlcm1pc3Npb25zXSdcbn0pXG5leHBvcnQgY2xhc3MgRml2UGVybWlzc2lvbnMge1xuICBhbGxvd2VkUGVybWlzc2lvbnM6IHN0cmluZ1tdID0gW107XG4gIHVQZXJtaXNzaW9uczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PlxuICApIHt9XG5cbiAgQElucHV0KCkgc2V0IGZpdlBlcm1pc3Npb25zVXNlclBlcm1pc3Npb25zKHVzZXJQZXJtaXNzaW9uczogc3RyaW5nW10pIHtcbiAgICB0aGlzLnVQZXJtaXNzaW9ucyA9IHVzZXJQZXJtaXNzaW9ucyB8fCBbXTtcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBmaXZQZXJtaXNzaW9ucyhhbGxvd2VkOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuYWxsb3dlZFBlcm1pc3Npb25zID0gYWxsb3dlZCB8fCBbXTtcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcbiAgfVxuXG4gIGNoZWNrUGVybWlzc2lvbigpOiBib29sZWFuIHtcbiAgICBsZXQgc2hvdyA9IGZhbHNlO1xuICAgIHRoaXMudVBlcm1pc3Npb25zLmZvckVhY2gocm9sZSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuYWxsb3dlZFBlcm1pc3Npb25zLmZpbmQoXG4gICAgICAgICAgYSA9PiBhLnRvVXBwZXJDYXNlKCkgPT09IHJvbGUudG9VcHBlckNhc2UoKVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgc2hvdyA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2hvdztcbiAgfVxuXG4gIHVwZGF0ZVZpZXcoKSB7XG4gICAgaWYgKHRoaXMuY2hlY2tQZXJtaXNzaW9uKCkpIHtcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgIH1cbiAgfVxufVxuIl19
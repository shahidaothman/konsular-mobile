/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, HostBinding } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/** @type {?} */
export const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => FivPasswordInput)),
    multi: true
};
export class FivPasswordInput {
    constructor() {
        this.clearOnEdit = false;
        this.disabled = false;
        this.hideIcon = 'eye-off';
        this.position = 'floating';
        this.showIcon = 'eye';
        this._passwordValue = '';
    }
    /**
     * @return {?}
     */
    toggleShowPassword() {
        this.show = !this.show;
    }
    /**
     * @return {?}
     */
    get passwordValue() {
        return this._passwordValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set passwordValue(v) {
        if (v !== this._passwordValue) {
            this._passwordValue = v;
            if (this.onChangeCallback) {
                this.onChangeCallback(this._passwordValue);
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined && value !== this._passwordValue) {
            this._passwordValue = value;
        }
    }
    /**
     * @return {?}
     */
    blur() {
        if (this.onTouchedCallback) {
            this.onTouchedCallback();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
}
FivPasswordInput.decorators = [
    { type: Component, args: [{
                selector: 'fiv-password-input',
                template: "<ion-item [color]=\"color\" [disabled]=\"disabled\" [lines]=\"lines\">\n  <ion-label *ngIf=\"placeholder\" [position]=\"position\">{{ placeholder }}</ion-label>\n  <ion-input [type]=\"show ? 'text' : 'password'\" [(ngModel)]=\"passwordValue\" [clearOnEdit]=\"clearOnEdit\"\n    (ionBlur)=\"blur()\"></ion-input>\n  <ion-icon slot=\"end\" [name]=\"show ? hideIcon : showIcon\" (click)=\"toggleShowPassword()\"></ion-icon>\n</ion-item>",
                providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],
                styles: [":host(.password-disabled){pointer-events:none}"]
            }] }
];
/** @nocollapse */
FivPasswordInput.ctorParameters = () => [];
FivPasswordInput.propDecorators = {
    clearOnEdit: [{ type: Input }],
    color: [{ type: Input }],
    disabled: [{ type: HostBinding, args: ['class.password-disabled',] }, { type: Input }],
    hideIcon: [{ type: Input }],
    lines: [{ type: Input }],
    placeholder: [{ type: Input }],
    position: [{ type: Input }],
    show: [{ type: Input }],
    showIcon: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivPasswordInput.prototype.clearOnEdit;
    /** @type {?} */
    FivPasswordInput.prototype.color;
    /** @type {?} */
    FivPasswordInput.prototype.disabled;
    /** @type {?} */
    FivPasswordInput.prototype.hideIcon;
    /** @type {?} */
    FivPasswordInput.prototype.lines;
    /** @type {?} */
    FivPasswordInput.prototype.placeholder;
    /** @type {?} */
    FivPasswordInput.prototype.position;
    /** @type {?} */
    FivPasswordInput.prototype.show;
    /** @type {?} */
    FivPasswordInput.prototype.showIcon;
    /**
     * @type {?}
     * @private
     */
    FivPasswordInput.prototype._passwordValue;
    /**
     * @type {?}
     * @private
     */
    FivPasswordInput.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    FivPasswordInput.prototype.onChangeCallback;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpdmV0aHJlZS9jb3JlLyIsInNvdXJjZXMiOlsibGliL3Bhc3N3b3JkLWlucHV0L3Bhc3N3b3JkLWlucHV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUUsaUJBQWlCLEVBQXdCLE1BQU0sZ0JBQWdCLENBQUM7O0FBR3pFLE1BQU0sT0FBTyxtQ0FBbUMsR0FBUTtJQUN0RCxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVcsRUFBRSxVQUFVOzs7SUFBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBQztJQUMvQyxLQUFLLEVBQUUsSUFBSTtDQUNaO0FBUUQsTUFBTSxPQUFPLGdCQUFnQjtJQXlCM0I7UUF4QlMsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFNN0IsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVSLGFBQVEsR0FBRyxTQUFTLENBQUM7UUFNckIsYUFBUSxHQUFnRCxVQUFVLENBQUM7UUFJbkUsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVsQixtQkFBYyxHQUFHLEVBQUUsQ0FBQztJQUliLENBQUM7Ozs7SUFFaEIsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFRCxJQUFJLGFBQWEsQ0FBQyxDQUFNO1FBQ3RCLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDN0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7WUFDeEIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7YUFDNUM7U0FDRjtJQUNILENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLEtBQVU7UUFDbkIsSUFBSSxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3hELElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQzs7OztJQUVELElBQUk7UUFDRixJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztTQUMxQjtJQUNILENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsRUFBTztRQUN0QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsRUFBTztRQUN2QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0lBQzlCLENBQUM7OztZQXBFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsNmJBQThDO2dCQUU5QyxTQUFTLEVBQUUsQ0FBQyxtQ0FBbUMsQ0FBQzs7YUFDakQ7Ozs7OzBCQUVFLEtBQUs7b0JBRUwsS0FBSzt1QkFFTCxXQUFXLFNBQUMseUJBQXlCLGNBQ3JDLEtBQUs7dUJBR0wsS0FBSztvQkFFTCxLQUFLOzBCQUVMLEtBQUs7dUJBRUwsS0FBSzttQkFFTCxLQUFLO3VCQUVMLEtBQUs7Ozs7SUFsQk4sdUNBQTZCOztJQUU3QixpQ0FBc0I7O0lBRXRCLG9DQUVpQjs7SUFFakIsb0NBQThCOztJQUU5QixpQ0FBMkM7O0lBRTNDLHVDQUE2Qjs7SUFFN0Isb0NBQTRFOztJQUU1RSxnQ0FBdUI7O0lBRXZCLG9DQUEwQjs7Ozs7SUFFMUIsMENBQTRCOzs7OztJQUM1Qiw2Q0FBb0M7Ozs7O0lBQ3BDLDRDQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIGZvcndhcmRSZWYsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJ0Bpb25pYy9jb3JlJztcblxuZXhwb3J0IGNvbnN0IENVU1RPTV9JTlBVVF9DT05UUk9MX1ZBTFVFX0FDQ0VTU09SOiBhbnkgPSB7XG4gIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBGaXZQYXNzd29yZElucHV0KSxcbiAgbXVsdGk6IHRydWVcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zpdi1wYXNzd29yZC1pbnB1dCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wYXNzd29yZC1pbnB1dC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3Bhc3N3b3JkLWlucHV0LmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW0NVU1RPTV9JTlBVVF9DT05UUk9MX1ZBTFVFX0FDQ0VTU09SXVxufSlcbmV4cG9ydCBjbGFzcyBGaXZQYXNzd29yZElucHV0IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICBASW5wdXQoKSBjbGVhck9uRWRpdCA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIGNvbG9yOiBDb2xvcjtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnBhc3N3b3JkLWRpc2FibGVkJylcbiAgQElucHV0KClcbiAgZGlzYWJsZWQgPSBmYWxzZTtcblxuICBASW5wdXQoKSBoaWRlSWNvbiA9ICdleWUtb2ZmJztcblxuICBASW5wdXQoKSBsaW5lcz86ICdmdWxsJyB8ICdpbnNldCcgfCAnbm9uZSc7XG5cbiAgQElucHV0KCkgcGxhY2Vob2xkZXI6IHN0cmluZztcblxuICBASW5wdXQoKSBwb3NpdGlvbjogJ2Zsb2F0aW5nJyB8ICdpbmxpbmUnIHwgJ2ZpeGVkJyB8ICdzdGFja2VkJyA9ICdmbG9hdGluZyc7XG5cbiAgQElucHV0KCkgc2hvdzogYm9vbGVhbjtcblxuICBASW5wdXQoKSBzaG93SWNvbiA9ICdleWUnO1xuXG4gIHByaXZhdGUgX3Bhc3N3b3JkVmFsdWUgPSAnJztcbiAgcHJpdmF0ZSBvblRvdWNoZWRDYWxsYmFjazogKCkgPT4ge307XG4gIHByaXZhdGUgb25DaGFuZ2VDYWxsYmFjazogKF86IGFueSkgPT4ge307XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIHRvZ2dsZVNob3dQYXNzd29yZCgpIHtcbiAgICB0aGlzLnNob3cgPSAhdGhpcy5zaG93O1xuICB9XG5cbiAgZ2V0IHBhc3N3b3JkVmFsdWUoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5fcGFzc3dvcmRWYWx1ZTtcbiAgfVxuXG4gIHNldCBwYXNzd29yZFZhbHVlKHY6IGFueSkge1xuICAgIGlmICh2ICE9PSB0aGlzLl9wYXNzd29yZFZhbHVlKSB7XG4gICAgICB0aGlzLl9wYXNzd29yZFZhbHVlID0gdjtcbiAgICAgIGlmICh0aGlzLm9uQ2hhbmdlQ2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrKHRoaXMuX3Bhc3N3b3JkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSB0aGlzLl9wYXNzd29yZFZhbHVlKSB7XG4gICAgICB0aGlzLl9wYXNzd29yZFZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgYmx1cigpIHtcbiAgICBpZiAodGhpcy5vblRvdWNoZWRDYWxsYmFjaykge1xuICAgICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjaygpO1xuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSkge1xuICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSkge1xuICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2sgPSBmbjtcbiAgfVxufVxuIl19
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, ViewChild } from '@angular/core';
import { animate, style, transition, trigger, AnimationBuilder } from '@angular/animations';
import { timer } from 'rxjs';
import { FivLoadingService } from './loading.service';
export class FivLoadingProgressBar {
    /**
     * @param {?} loadingService
     * @param {?} builder
     */
    constructor(loadingService, builder) {
        this.loadingService = loadingService;
        this.builder = builder;
        this.loading = false;
        this.global = false;
        this.isComplete = false;
        this.progress = 0;
        this.verticalAlign = 'top';
        this.fivComplete = new EventEmitter();
        this.fivDoneShrinking = new EventEmitter();
        this.fivRefresh = new EventEmitter();
        this.animating = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.global) {
            this.loadingService.completeChange.subscribe((/**
             * @param {?} isComplete
             * @return {?}
             */
            isComplete => {
                if (isComplete) {
                    this.complete(null);
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.global) {
            this.loadingService.completeChange.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    toggleSpinner() {
        this.loading = !this.loading;
    }
    /**
     * @return {?}
     */
    load() {
        this.loading = true;
        this.fivRefresh.emit(this);
    }
    /**
     * @return {?}
     */
    unload() {
        this.loading = false;
        if (this.isComplete) {
            this.isComplete = false;
        }
    }
    /**
     * @param {?=} param
     * @return {?}
     */
    complete(param) {
        this.param = param;
        this.isComplete = true;
        this.fillIn(850);
    }
    /**
     * @param {?} isComplete
     * @return {?}
     */
    fillAnimationComplete(isComplete) {
        if (isComplete) {
            this.fivComplete.emit(this.param);
            this.isComplete = false;
            this.param = null;
            if (this.global) {
                this.loadingService.unload();
            }
            else {
                this.unload();
            }
        }
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    setProgress(progress) {
        if (progress < 0) {
            this.progress = 0;
            return;
        }
        if (progress > 100) {
            this.progress = 100;
            return;
        }
        this.progress = progress;
    }
    /**
     * @param {?} ms
     * @return {?}
     */
    fillIn(ms) {
        // first define a reusable animation
        this.progress = 0;
        /** @type {?} */
        const myAnimation = this.builder.build([
            style({ width: `${this.progress}%` }),
            animate(ms, style({ width: '100%' }))
        ]);
        // use the returned factory object to create a player
        /** @type {?} */
        const player = myAnimation.create(this.linear.nativeElement);
        /** @type {?} */
        const t = timer(0, ms / 100).subscribe((/**
         * @return {?}
         */
        () => {
            if (this.progress <= 0) {
                return t.unsubscribe();
            }
            this.progress++;
        }));
        player.play();
        player.onDone((/**
         * @return {?}
         */
        () => {
            if (this.animating) {
                this.fillAnimationComplete(true);
                this.stopProgressAnimation();
            }
        }));
        this.stopProgressAnimation();
        this.animating = true;
        this._progressPlayer = player;
    }
    /**
     * @param {?} ms
     * @return {?}
     */
    shrinkIn(ms) {
        // first define a reusable animation
        this.progress = 100;
        /** @type {?} */
        const myAnimation = this.builder.build([
            style({ width: `${this.progress}%` }),
            animate(ms, style({ width: 0 }))
        ]);
        // use the returned factory object to create a player
        /** @type {?} */
        const player = myAnimation.create(this.linear.nativeElement);
        /** @type {?} */
        const t = timer(0, ms / 100).subscribe((/**
         * @return {?}
         */
        () => {
            if (this.progress <= 0) {
                return t.unsubscribe();
            }
            this.progress--;
        }));
        player.play();
        player.onDone((/**
         * @return {?}
         */
        () => {
            if (this.animating) {
                this.fivDoneShrinking.emit(true);
                this.stopProgressAnimation();
            }
        }));
        this.stopProgressAnimation();
        this.animating = true;
        this._progressPlayer = player;
    }
    /**
     * @return {?}
     */
    stopProgressAnimation() {
        if (this._progressPlayer) {
            this._progressPlayer.destroy();
            this._progressPlayer = null;
            this.animating = false;
        }
    }
}
FivLoadingProgressBar.decorators = [
    { type: Component, args: [{
                selector: 'fiv-loading-progress-bar',
                template: "<div [@progressAnim] *ngIf=\"(!global && loading) || (global && loadingService.loading)\" class=\"slider\" [ngClass]=\"{'top':verticalAlign == 'top','bottom': verticalAlign == 'bottom'}\" >\n  <div class=\"line\"></div>\n  <div *ngIf=\"!isComplete\" class=\"subline inc\"></div>\n  <!-- <div *ngIf=\"isComplete\" [@fillAnim] (@fillAnim.done)=\"fillAnimationComplete(isComplete)\" class=\"subline fill\"></div> -->\n  <div *ngIf=\"!isComplete\" class=\"subline dec\"></div>\n</div>\n<div #linear [@progressAnimLinear] class=\"progress\"  [ngClass]=\"{'top':verticalAlign == 'top','bottom': verticalAlign == 'bottom'}\" ></div>\n",
                animations: [
                    trigger('progressAnim', [
                        transition('void => *', [
                            style({ height: '0px' }),
                            animate('250ms ease-out')
                        ]),
                        transition('* => void', [
                            animate('299ms ease-in', style({ height: '0px' }))
                        ])
                    ]),
                    trigger('progressAnimLinear', [
                        transition('void => *', [
                            style({ height: '0px' }),
                            animate('65ms ease-out')
                        ]),
                        transition('* => void', [
                            animate('299ms ease-in', style({ height: '0px' }))
                        ])
                    ]),
                    trigger('fillAnim', [
                        transition('void => *', [
                            style({
                                width: '0px'
                            }),
                            animate('850ms ease-out', style({ width: '100%' }))
                        ])
                    ])
                ],
                styles: [":host{--background-progress-bar:var(--ion-color-primary);--color-spin-0:var(--ion-color-primary-shade);--color-spin-25:var(--ion-color-primary-shade);--color-spin-50:var(--ion-color-primary-shade);--color-spin-75:var(--ion-color-primary-shade);--color-spin-100:var(--ion-color-primary-shade)}.slider{position:absolute;width:100%;height:5px;overflow-x:hidden;z-index:5000}.progress{position:absolute;height:5px;width:0;overflow-x:hidden;z-index:5000;background:var(--background-progress-bar);transition:240ms}.line{position:absolute;opacity:.4;width:240%;height:5px;-webkit-animation:5.6s ease-in-out infinite colorspin;animation:5.6s ease-in-out infinite colorspin}.subline{position:absolute;height:5px;background:inherit}.inc{-webkit-animation:1.6s infinite increase,5.6s ease-in-out infinite colorspin;animation:1.6s infinite increase,5.6s ease-in-out infinite colorspin}.dec{-webkit-animation:1.6s .4s infinite decrease,5.6s ease-in-out infinite colorspin;animation:1.6s .4s infinite decrease,5.6s ease-in-out infinite colorspin}.fill{left:0;width:100%;-webkit-animation:5.6s ease-in-out infinite colorspin;animation:5.6s ease-in-out infinite colorspin}@-webkit-keyframes increase{from{left:-5%;width:5%}to{left:130%;width:100%}}@keyframes increase{from{left:-5%;width:5%}to{left:130%;width:100%}}@-webkit-keyframes decrease{from{left:-80%;width:80%}to{left:110%;width:10%}}@keyframes decrease{from{left:-80%;width:80%}to{left:110%;width:10%}}@-webkit-keyframes colorspin{0%{background-color:var(--color-spin-0)}25%{background-color:var(--color-spin-25)}50%{background-color:var(--color-spin-50)}75%{background-color:var(--color-spin-75)}100%{background-color:var(--color-spin-100)}}@keyframes colorspin{0%{background-color:var(--color-spin-0)}25%{background-color:var(--color-spin-25)}50%{background-color:var(--color-spin-50)}75%{background-color:var(--color-spin-75)}100%{background-color:var(--color-spin-100)}}.top{top:0;left:0}.bottom{bottom:0;left:0}"]
            }] }
];
/** @nocollapse */
FivLoadingProgressBar.ctorParameters = () => [
    { type: FivLoadingService },
    { type: AnimationBuilder }
];
FivLoadingProgressBar.propDecorators = {
    loading: [{ type: Input }],
    global: [{ type: Input }],
    isComplete: [{ type: Input }],
    verticalAlign: [{ type: Input }],
    fivComplete: [{ type: Output }],
    fivDoneShrinking: [{ type: Output }],
    fivRefresh: [{ type: Output }],
    bar: [{ type: ViewChild, args: ['bar',] }],
    linear: [{ type: ViewChild, args: ['linear',] }]
};
if (false) {
    /** @type {?} */
    FivLoadingProgressBar.prototype.loading;
    /** @type {?} */
    FivLoadingProgressBar.prototype.global;
    /** @type {?} */
    FivLoadingProgressBar.prototype.isComplete;
    /** @type {?} */
    FivLoadingProgressBar.prototype.progress;
    /** @type {?} */
    FivLoadingProgressBar.prototype.verticalAlign;
    /** @type {?} */
    FivLoadingProgressBar.prototype.fivComplete;
    /** @type {?} */
    FivLoadingProgressBar.prototype.fivDoneShrinking;
    /** @type {?} */
    FivLoadingProgressBar.prototype.fivRefresh;
    /** @type {?} */
    FivLoadingProgressBar.prototype.bar;
    /** @type {?} */
    FivLoadingProgressBar.prototype.linear;
    /** @type {?} */
    FivLoadingProgressBar.prototype.param;
    /** @type {?} */
    FivLoadingProgressBar.prototype._progressPlayer;
    /**
     * @type {?}
     * @private
     */
    FivLoadingProgressBar.prototype.animating;
    /** @type {?} */
    FivLoadingProgressBar.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    FivLoadingProgressBar.prototype.builder;
}
//# sourceMappingURL=data:application/json;base64,
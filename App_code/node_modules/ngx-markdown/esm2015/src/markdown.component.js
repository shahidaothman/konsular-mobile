/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { MarkdownService } from './markdown.service';
import { PrismPlugin } from './prism-plugin';
export class MarkdownComponent {
    /**
     * @param {?} element
     * @param {?} markdownService
     */
    constructor(element, markdownService) {
        this.element = element;
        this.markdownService = markdownService;
        this.error = new EventEmitter();
        this.load = new EventEmitter();
        this._lineHighlight = false;
        this._lineNumbers = false;
    }
    // Plugin - lineNumbers
    /**
     * @return {?}
     */
    get lineNumbers() { return this._lineNumbers; }
    /**
     * @param {?} value
     * @return {?}
     */
    set lineNumbers(value) { this._lineNumbers = this.coerceBooleanProperty(value); }
    // Plugin - lineHighlight
    /**
     * @return {?}
     */
    get lineHighlight() { return this._lineHighlight; }
    /**
     * @param {?} value
     * @return {?}
     */
    set lineHighlight(value) { this._lineHighlight = this.coerceBooleanProperty(value); }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.data) {
            this.handleData();
            return;
        }
        if (this.src) {
            this.handleSrc();
            return;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.data && !this.src) {
            this.handleTransclusion();
        }
    }
    /**
     * @param {?} markdown
     * @param {?=} decodeHtml
     * @return {?}
     */
    render(markdown, decodeHtml = false) {
        this.element.nativeElement.innerHTML = this.markdownService.compile(markdown, decodeHtml);
        this.handlePlugins();
        this.markdownService.highlight(this.element.nativeElement);
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    coerceBooleanProperty(value) {
        return value != null && `${value}` !== 'false';
    }
    /**
     * @private
     * @return {?}
     */
    handleData() {
        this.render(this.data);
    }
    /**
     * @private
     * @return {?}
     */
    handleSrc() {
        this.markdownService
            .getSource(this.src)
            .subscribe((/**
         * @param {?} markdown
         * @return {?}
         */
        markdown => {
            this.render(markdown);
            this.load.emit(markdown);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => this.error.emit(error)));
    }
    /**
     * @private
     * @return {?}
     */
    handleTransclusion() {
        this.render(this.element.nativeElement.innerHTML, true);
    }
    /**
     * @private
     * @return {?}
     */
    handlePlugins() {
        if (this.lineHighlight) {
            this.setPluginClass(this.element.nativeElement, PrismPlugin.LineHighlight);
            this.setPluginOptions(this.element.nativeElement, { dataLine: this.line, dataLineOffset: this.lineOffset });
        }
        if (this.lineNumbers) {
            this.setPluginClass(this.element.nativeElement, PrismPlugin.LineNumbers);
            this.setPluginOptions(this.element.nativeElement, { dataStart: this.start });
        }
    }
    /**
     * @private
     * @param {?} element
     * @param {?} plugin
     * @return {?}
     */
    setPluginClass(element, plugin) {
        /** @type {?} */
        const preElements = element.querySelectorAll('pre');
        for (let i = 0; i < preElements.length; i++) {
            /** @type {?} */
            const classes = plugin instanceof Array ? plugin : [plugin];
            preElements.item(i).classList.add(...classes);
        }
    }
    /**
     * @private
     * @param {?} element
     * @param {?} options
     * @return {?}
     */
    setPluginOptions(element, options) {
        /** @type {?} */
        const preElements = element.querySelectorAll('pre');
        for (let i = 0; i < preElements.length; i++) {
            Object.keys(options).forEach((/**
             * @param {?} option
             * @return {?}
             */
            option => {
                /** @type {?} */
                const attributeValue = options[option];
                if (!!attributeValue) {
                    /** @type {?} */
                    const attributeName = this.toLispCase(option);
                    preElements.item(i).setAttribute(attributeName, attributeValue.toString());
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    toLispCase(value) {
        /** @type {?} */
        const upperChars = value.match(/([A-Z])/g);
        if (!upperChars) {
            return value;
        }
        /** @type {?} */
        let str = value.toString();
        for (let i = 0, n = upperChars.length; i < n; i++) {
            str = str.replace(new RegExp(upperChars[i]), '-' + upperChars[i].toLowerCase());
        }
        if (str.slice(0, 1) === '-') {
            str = str.slice(1);
        }
        return str;
    }
}
MarkdownComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'markdown, [markdown]',
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
MarkdownComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: MarkdownService }
];
MarkdownComponent.propDecorators = {
    data: [{ type: Input }],
    src: [{ type: Input }],
    lineNumbers: [{ type: Input }],
    start: [{ type: Input }],
    lineHighlight: [{ type: Input }],
    line: [{ type: Input }],
    lineOffset: [{ type: Input }],
    error: [{ type: Output }],
    load: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    MarkdownComponent.prototype.data;
    /** @type {?} */
    MarkdownComponent.prototype.src;
    /** @type {?} */
    MarkdownComponent.prototype.start;
    /** @type {?} */
    MarkdownComponent.prototype.line;
    /** @type {?} */
    MarkdownComponent.prototype.lineOffset;
    /** @type {?} */
    MarkdownComponent.prototype.error;
    /** @type {?} */
    MarkdownComponent.prototype.load;
    /**
     * @type {?}
     * @private
     */
    MarkdownComponent.prototype._lineHighlight;
    /**
     * @type {?}
     * @private
     */
    MarkdownComponent.prototype._lineNumbers;
    /** @type {?} */
    MarkdownComponent.prototype.element;
    /** @type {?} */
    MarkdownComponent.prototype.markdownService;
}
//# sourceMappingURL=data:application/json;base64,